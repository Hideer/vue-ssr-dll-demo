'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var baseFn = require('@wanwu/base-fn');
require('core-js/modules/es6.object.to-string');
var _toConsumableArray = _interopDefault(require('@babel/runtime-corejs2/helpers/esm/toConsumableArray'));
require('core-js/modules/es6.array.map');
var _defineProperty = _interopDefault(require('@babel/runtime-corejs2/helpers/esm/defineProperty'));

/**
 * Create by changsheng on 2019-04-02 16:35
 */

function inject() {
  var script = document.createElement('script');

  if (baseFn.ua.isIOSApp() && baseFn.fn.compareVersion(baseFn.ua.getAppVersion(), '2.2.0') < 0) {
    script.src = 'https://cdn.wanwudezhi.com/static/mall-web/assets/IOSCordova.js'; // return;
  } else if (baseFn.ua.isAndroidApp()) {
    // script.src = 'https://cdn.wanwudezhi.com/AndroidCordova.js';
    return;
  } else if (baseFn.ua.isWechat()) {
    // script.src = 'https://res.wx.qq.com/open/js/jweixin-1.4.0.js';
    return;
  } else {
    return;
  }

  document.body.appendChild(script);
}

inject();

var notInAppRejectMessage = '**hdp:环境不是容器';
var isApp = baseFn.ua.isApp,
    isIOSApp = baseFn.ua.isIOSApp,
    isAndroidApp = baseFn.ua.isAndroidApp;
var globalCallbackId = 0;
window.wwdzBridge = window.wwdzBridge || {};

window.wwdzBridge.callback = function (callbackId, status, response) {
  var callback = window.wwdzBridge.callbackMap[callbackId];

  if (callback) {
    var isFinished = true;

    if (status === 'success') {
      callback.success.call(this, response);
    }

    if (status === 'fail') {
      callback.fail.call(this, response);
    }

    if (status === 'progress') {
      callback.progress.call(this, response);
      isFinished = false;
    }

    if (isFinished) {
      window.wwdzBridge.callbackMap[callbackId] = null;
      delete window.wwdzBridge.callbackMap[callbackId];
    }
  }
};

window.wwdzBridge.successCallback = function (callbackId, response) {
  window.wwdzBridge.callback(callbackId, 'success', response);
};

window.wwdzBridge.failCallback = function (callbackId, response) {
  window.wwdzBridge.callback(callbackId, 'fail', response);
};

window.wwdzBridge.callbackMap = {};

function androidExec(success, fail, service, action) {
  var _this = this,
      _Object$assign;

  var args = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

  if (!(args && args.length)) {
    args = [{}];
  }

  var callbackId = globalCallbackId++;
  var successCallbackId = "successCallback_".concat(service, "_").concat(action, "_").concat(callbackId);
  var failCallbackId = "failCallback_".concat(service, "_").concat(action, "_").concat(callbackId);

  var successCallback = function successCallback(response) {
    if (success && typeof success === 'function') {
      success.call(_this, response);
    }

    delete window.wwdzBridge[successCallbackId];
    delete window.wwdzBridge[failCallbackId];
  };

  var failCallback = function failCallback(error) {
    if (fail && typeof fail === 'function') {
      fail.call(_this, error);
    }

    delete window.wwdzBridge[successCallbackId];
    delete window.wwdzBridge[failCallbackId];
  };

  Object.assign(window.wwdzBridge, (_Object$assign = {}, _defineProperty(_Object$assign, successCallbackId, successCallback), _defineProperty(_Object$assign, failCallbackId, failCallback), _Object$assign));
  var functionName = "".concat(service, "_").concat(action);
  var argsAndroid = args.map(function (item) {
    try {
      return JSON.stringify(item);
    } catch (e) {
      return '';
    }
  });

  if (window.wwdzBridge && window.wwdzBridge.hasOwnProperty(functionName) && typeof window.wwdzBridge[functionName] === 'function') {
    try {
      var _window$wwdzBridge;

      (_window$wwdzBridge = window.wwdzBridge)[functionName].apply(_window$wwdzBridge, ["wwdzBridge.".concat(successCallbackId), "wwdzBridge.".concat(failCallbackId)].concat(_toConsumableArray(argsAndroid)));
    } catch (err) {
      console.log('-------err ' + service + '---' + action, err);
    }
  }
}

function iOSExec(success, fail, service, actions, args) {
  var cordova = window.cordova;

  var cordovaExec = cordova.require('cordova/exec');

  cordovaExec(success, fail, service, actions, args);
}

function iOSExecNew(success, fail, service, actions, args) {
  if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.WKNativeMethodMessage) {
    var callbackId = globalCallbackId++;
    window.wwdzBridge.callbackMap[callbackId] = {
      success: success,
      fail: fail,
      progress: null
    };
    window.webkit.messageHandlers.WKNativeMethodMessage.postMessage({
      targetName: service,
      actionName: actions,
      data: args[0],
      identifier: callbackId
    });
  }
}

function exec(service, action) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return new Promise(function (resolve, reject) {
    if (isIOSApp() && baseFn.fn.compareVersion(baseFn.ua.getAppVersion(), '2.2.0') < 0) {
      deviceReady().then(function () {
        iOSExec(function (res) {
          resolve(res);
        }, function (err) {
          reject(err);
        }, service, action, args);
      })["catch"](function (error) {
        reject(error);
      });
    } else if (isIOSApp()) {
      iOSExecNew(function (res) {
        resolve(res);
      }, function (err) {
        console.log('iOSExecNew err', err);
        reject(err);
      }, service, action, args);
    } else if (isAndroidApp()) {
      androidExec(function (res) {
        resolve(res);
      }, function (err) {
        console.log('androidExec err', err);
        reject(err);
      }, service, action, args);
    } else {
      reject(new Error(notInAppRejectMessage));
    }
  });
}

var _isReady = false;

function deviceReady() {
  return new Promise(function (resolve, reject) {
    if (_isReady) {
      resolve();
    } else {
      if (isApp()) {
        document.addEventListener('deviceready', function () {
          _isReady = true;
          resolve();
        }, false);
      } else {
        reject(new Error(notInAppRejectMessage));
      }
    }
  });
}

if (baseFn.fn.compareVersion(baseFn.ua.getAppVersion(), '2.1.5') < 0) {
  deviceReady()["catch"](function (error) {
    console.warn(error.message);
  });
}

var execRequest = function execRequest(service, action) {

  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  return exec.apply(void 0, [service, action].concat(args)).then(function (res) {
    var data;

    if (res) {
      data = res.data; // data.payload = res;
    }

    if (res && res.code === 1001) {
      return data;
    } else if (res && res.code === 4001) {
      // router.push('/user/login?redirectUrl=' + window.location.href);
      // @ts-ignore
      // if (!config.skipLogin) {
      //     User.goToLogin();
      //     console.log(response.request.responseURL);
      // }
      return Promise.reject(new Error('未登录'));
    } else {
      var error = new Error(res && res.message || "".concat(service, "_").concat(action, ":\u672A\u5B9A\u4E49\u9519\u8BEF"));
      error.payload = res;
      return Promise.reject(error);
    }
  })["catch"](function (err) {
    return Promise.reject(err);
  });
};

var hdp = {
  exec: exec,
  execRequest: execRequest
};
window.hdp = hdp;

exports.default = hdp;
