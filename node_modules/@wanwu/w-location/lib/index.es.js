import 'core-js/modules/es.array.concat';
import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.array.iterator';
import 'core-js/modules/es.date.now';
import 'core-js/modules/es.date.to-string';
import 'core-js/modules/es.function.name';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'core-js/modules/es.regexp.constructor';
import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.regexp.to-string';
import 'core-js/modules/es.string.iterator';
import 'core-js/modules/es.string.match';
import 'core-js/modules/es.string.replace';
import 'core-js/modules/web.dom-collections.for-each';
import 'core-js/modules/web.dom-collections.iterator';
import 'core-js/modules/web.url';
import 'regenerator-runtime/runtime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { EventEmitter, fn, ua } from '@wanwu/base-fn';
import { createRtpParams } from '@wanwu/base-logger';
import throughParamsPlugin__default from '@wanwu/location-plugin-through-params';
import * as throughParamsPlugin from '@wanwu/location-plugin-through-params';
export { throughParamsPlugin as throughParams };
import { on } from '@wanwu/event-utils';
import hdp from '@wanwu/hdp';

var PREVENT_ERROR_TYPE = 'prevent';
var eventCenter = new EventEmitter(); // 给插件提供beforeNavigate事件

eventCenter.$on('beforeNavigate', callBeforeNavigateList);
var tarsksObj = {
  // 插件列表
  pluginList: [createRtpParams, throughParamsPlugin__default],
  // 跳转hook列表
  beforeNavigateList: []
};
var throttleDoMethod = fn.throttle(doMethod, 300, {
  trailing: false
});
var wLocation = {
  // vue router实例
  router: null,
  // 需要取的url前缀的正则
  // replaceReg: null,
  // path的前置处理方法
  //  preprocessing = options.preprocessing;
  // 时间戳的key，会加在url上
  timeKey: '__HgWtwYU',
  // pushState的路径存储的key，避免重复pushState
  historyKey: '__mTwWuNi',
  // 错误统一函数处理
  errorCallback: null,
  // 统一域名的正则
  whiteOriginReg: null,
  // 截取base的正则
  catBaseReg: /^\/(\w+-)+web/,
  push: function () {
    var _push = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {
      var options,
          _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              return _context.abrupt("return", genThrottleDoMethod('push', path, options));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function push(_x) {
      return _push.apply(this, arguments);
    }

    return push;
  }(),
  replace: function () {
    var _replace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path) {
      var options,
          _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              return _context2.abrupt("return", genThrottleDoMethod('replace', path, options));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function replace(_x2) {
      return _replace.apply(this, arguments);
    }

    return replace;
  }(),
  go: function () {
    var _go = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(n) {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.router) {
                _context3.next = 4;
                break;
              }

              return _context3.abrupt("return", this.router.go(n));

            case 4:
              history.go(n);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function go(_x3) {
      return _go.apply(this, arguments);
    }

    return go;
  }(),
  back: function () {
    var _back = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.router) {
                _context4.next = 4;
                break;
              }

              return _context4.abrupt("return", this.router.back());

            case 4:
              history.back();

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function back() {
      return _back.apply(this, arguments);
    }

    return back;
  }(),
  forward: function () {
    var _forward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!this.router) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", this.router.forward());

            case 4:
              history.forward();

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function forward() {
      return _forward.apply(this, arguments);
    }

    return forward;
  }(),

  /**
   *  window.history.pushState的封装，方便返回确认
   * @param {Object} state
   * @param {null} title
   * @param {String} url
   */
  pushState: function pushState(url, state) {
    var _this = this;

    var pushHistory = sessionStorage.getItem(this.historyKey);

    var onBrowserBack = function onBrowserBack() {
      sessionStorage.removeItem(_this.historyKey);
      window.removeEventListener('popstate', onBrowserBack, false);
    };

    window.addEventListener('popstate', onBrowserBack, false);

    if (url !== pushHistory) {
      window.history.pushState(state || window.history.state, '', url);
      sessionStorage.setItem(this.historyKey, url);
    }
  },

  /**
   *  window.history.replaceState的封装，不影响vue router
   * @param {String} url
   */
  replaceState: function replaceState(url) {
    window.history.replaceState(window.history.state, '', url);
  },
  use: function use(plugin) {
    tarsksObj.pluginList.push(plugin);
  },

  /**
   * 添加生命周期函数
   * @param {(to,form)=>void} lifecycle
   */
  beforeNavigate: function beforeNavigate(lifecycle) {
    tarsksObj.beforeNavigateList.push(lifecycle);
  },
  setConfig: function setConfig(options) {
    var pickKeys = ['router', 'replaceReg', 'timeKey', 'historyKey', 'errorCallback', 'whiteOriginReg', 'catBaseReg'];
    var newOption = fn.pick(options, pickKeys);
    Object.assign(this, newOption);
  },
  install: function install(Vue, options) {
    this.setConfig(options); // const location = new Location(options);

    Vue.prototype.$location = this;
    Vue.location = this;
  }
};
on(document.body, 'click', handleAClick);

function handleAClick(event) {
  var elem = event.target;

  while (elem) {
    if (elem.tagName && elem.tagName.toLowerCase() === 'a' && !elem.hasAttribute('ignoreHijack')) {
      var href = elem.href;
      wLocation.push(href);
      event.preventDefault();
      break;
    } else {
      elem = elem.parentElement;
    }
  }
}

function callBeforeNavigateList(to, from) {
  tarsksObj.beforeNavigateList.forEach(function (beforeNavigateFn) {
    return beforeNavigateFn(fn.clone(to), fn.clone(from));
  });
}

function prevent(options, THROW) {
  var err = new Error('阻止跳转');

  if (fn.getTypeof(options) === 'string') {
    err.message = options || err.message;
  }

  if (fn.getTypeof(options) === 'object') {
    Object.assign(err, options);
  }

  err.type = PREVENT_ERROR_TYPE;

  if (THROW) {
    return Promise.reject(err);
  } else {
    return Promise.resolve(false);
  }
}

function pathMaker(path, keepState) {
  var query;
  var newPathObj;
  var urlReg = new RegExp('^http(s)?://([\\w-]+.)+[\\w-]+');

  if (path && typeof path === 'string') {
    var pathObj = fn.parseUrl(path);
    newPathObj = {
      path: pathObj.path,
      query: pathObj.params || {},
      hash: pathObj.hash
    };
  } else if (fn.getTypeof(path) === 'object') {
    var _pathObj = fn.parseUrl(path.path || '');

    query = _pathObj.params;
    query = Object.assign({}, path.query, query);
    path.query = query;
    path.path = _pathObj.path;
    path.hash = _pathObj.hash || path.hash;
    newPathObj = path;
  } else {
    return path;
  }

  if (urlReg.test(newPathObj.path)) {
    var URLObj = new URL(newPathObj.path);
    newPathObj.origin = URLObj.origin && URLObj.origin.replace(wLocation.whiteOriginReg, window.location.origin);
    var newPathMatch = URLObj.pathname && URLObj.pathname.match(wLocation.catBaseReg);
    newPathObj.base = newPathMatch && newPathMatch[0] || '';
    newPathObj.path = URLObj.pathname && URLObj.pathname.replace(wLocation.catBaseReg, '');
  }

  if (!keepState) {
    var now = Date.now();
    newPathObj.query[wLocation.timeKey] = now;
  }

  if (/^\/.+/.test(newPathObj.path) && fn.typeYalidator.isEmpty(newPathObj.origin) && fn.typeYalidator.isEmpty(newPathObj.base)) {
    if (wLocation.router) {
      newPathObj.base = wLocation.router.history.base;
    }
  }

  if (/^\/.+/.test(newPathObj.path) && fn.typeYalidator.isEmpty(newPathObj.origin)) {
    newPathObj.origin = window.location.origin;
  }

  return newPathObj;
}

function doMethod(_x4, _x5) {
  return _doMethod.apply(this, arguments);
}

function _doMethod() {
  _doMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(method, path) {
    var options,
        to,
        from,
        pluginsPromise,
        newTo,
        _args6 = arguments;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};
            to = pathMaker(path);
            from = pathMaker(window.location.href, true);
            pluginsPromise = Promise.resolve(to);
            tarsksObj.pluginList.forEach(function (plugin) {
              pluginsPromise = pluginsPromise.then(function (to) {
                if (!to) return false;
                return plugin(pathMaker(to), fn.clone(from), prevent, eventCenter, options, method);
              });
            });
            _context6.next = 7;
            return pluginsPromise["catch"](function (err) {
              if (err.type === PREVENT_ERROR_TYPE && wLocation.errorCallback) {
                return wLocation.errorCallback(err);
              }

              return Promise.reject(err);
            });

          case 7:
            newTo = _context6.sent;

            if (newTo) {
              _context6.next = 10;
              break;
            }

            return _context6.abrupt("return", false);

          case 10:
            callBeforeNavigateList(newTo, from);
            return _context6.abrupt("return", jump(newTo, from, method, options));

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _doMethod.apply(this, arguments);
}

function jump(_x6, _x7, _x8) {
  return _jump.apply(this, arguments);
}

function _jump() {
  _jump = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(to, from, method) {
    var options,
        IsReplace,
        newPath,
        openWebview,
        hasOpenWebviewOptions,
        urlOpenWebview,
        openWebviewFlag,
        _args7 = arguments;
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            options = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : {};
            IsReplace = method === 'replace';
            newPath = fn.stringifyUrl("".concat(to.origin || '').concat(to.base && to.base !== '/' ? to.base : '').concat(to.path || ''), to.query) + (to.hash ? "#".concat(to.hash) : '');
            openWebview = options.openWebview;
            hasOpenWebviewOptions = !fn.typeYalidator.isUndefined(openWebview);
            urlOpenWebview = fn.getQueryString('__openWebview') === 'true';
            openWebviewFlag = hasOpenWebviewOptions ? openWebview : urlOpenWebview;

            if (!openWebviewFlag) {
              _context7.next = 22;
              break;
            }

            if (!ua.isApp()) {
              _context7.next = 19;
              break;
            }

            _context7.prev = 9;
            _context7.next = 12;
            return hdp.exec('PluginRouter', 'jumpApp', {
              linkUrl: newPath
            });

          case 12:
            return _context7.abrupt("return");

          case 15:
            _context7.prev = 15;
            _context7.t0 = _context7["catch"](9);

          case 17:
            _context7.next = 22;
            break;

          case 19:
            if (!ua.isPC()) {
              _context7.next = 22;
              break;
            }

            window.open(newPath);
            return _context7.abrupt("return");

          case 22:
            if (!(wLocation.router && (new RegExp("^".concat(window.location.origin || '').concat(wLocation.router.history.base || '')).test(newPath) || to.name && !to.path))) {
              _context7.next = 26;
              break;
            }

            return _context7.abrupt("return", wLocation.router[method](fn.pick(to, ['path', 'name', 'query', 'params', 'hash'])));

          case 26:
            if (IsReplace) {
              location.replace(newPath);
            } else {
              location.href = newPath;
            }

          case 27:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, null, [[9, 15]]);
  }));
  return _jump.apply(this, arguments);
}

function genThrottleDoMethod(method, path) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (typeof options === 'boolean') {
    options = {
      isTrottle: options
    };
  }

  var _ref = options || {},
      _ref$isTrottle = _ref.isTrottle,
      isTrottle = _ref$isTrottle === void 0 ? true : _ref$isTrottle;

  if (isTrottle) {
    return throttleDoMethod(method, path, options || {});
  } else {
    return doMethod(method, path, options || {});
  }
}

export default wLocation;
