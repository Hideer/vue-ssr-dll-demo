import _defineProperty from '@babel/runtime-corejs2/helpers/esm/defineProperty';
import _typeof from '@babel/runtime-corejs2/helpers/esm/typeof';
import 'core-js/modules/es6.regexp.replace';
import _classCallCheck from '@babel/runtime-corejs2/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime-corejs2/helpers/esm/createClass';
import { fn } from '@wanwu/base-fn';

var Location =
/*#__PURE__*/
function () {
  function Location() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Location);

    // vue router实例
    this.router = options.router; // 需要取的url前缀的正则

    this.replaceReg = options.replaceReg; // path的前置处理方法

    this.preprocessing = options.preprocessing; // 时间戳的key，会加在url上

    this.timeKey = options.timeKey || '__HgWtwYU'; // pushState的路径存储的key，避免重复pushState

    this.historyKey = options.historyKey || '__mTwWuNi'; // replaceKey

    this.replaceKey = options.replaceKey || 'replace'; // replaceVal

    this.replaceVal = options.replaceVal || '1';
  }

  _createClass(Location, [{
    key: "doMethod",
    value: function doMethod(method, path) {
      var IsReplace = method === 'replace';

      if (this.preprocessing) {
        path = this.preprocessing(path);

        if (path === false) {
          return;
        }
      }

      var now = Date.now();

      if (path && typeof path === 'string') {
        path = path.replace(this.replaceReg, '');
      }

      if (/^http(s)?:\/\/\w*/.test(path)) {
        path = fn.setQueryString(path, this.timeKey, now);

        if (IsReplace) {
          location.replace(path);
        } else {
          location.href = path;
        }
      } else if (/^[a-zA-Z]*:\/\//.test(path)) {
        if (IsReplace) {
          location.replace(path);
        } else {
          location.href = path;
        }
      } else if (path && typeof path === 'string') {
        path = fn.setQueryString(path, this.timeKey, now);

        if (this.router) {
          if (IsReplace) {
            path = fn.setQueryString(path, this.replaceKey, this.replaceVal);
          }

          this.router[method](path);
        } else {
          if (IsReplace) {
            location.replace(path);
          } else {
            location.href = path;
          }
        }
      } else if (_typeof(path) === 'object') {
        if (path.query) {
          path.query[this.timeKey] = now;
        } else {
          path.query = _defineProperty({}, this.timeKey, now);
        }

        if (this.router) {
          if (IsReplace) {
            path.query[this.replaceKey] = this.replaceVal;
          }

          this.router[method](path);
        } else {
          if (IsReplace) {
            location.replace(fn.stringifyUrl(path.path, path.query, true));
          } else {
            location.href = path;
          }
        } // this.router[method](path);

      } else {
        console.error(new Error('路由参数不合法'));
        console.log(method + ' path:', path);
      }
    }
  }, {
    key: "push",
    value: function push(path) {
      this.doMethod('push', path);
    }
  }, {
    key: "replace",
    value: function replace(path) {
      this.doMethod('replace', path);
    }
  }, {
    key: "go",
    value: function go(n) {
      if (this.router) {
        this.router.go(n);
      } else {
        history.go(n);
      }
    }
  }, {
    key: "back",
    value: function back() {
      if (this.router) {
        this.router.back();
      } else {
        history.back();
      }
    }
  }, {
    key: "forward",
    value: function forward() {
      if (this.router) {
        this.router.forward();
      } else {
        history.forward();
      }
    }
    /**
     *  window.history.pushState的封装，方便返回确认
     * @param {Object} state
     * @param {null} title
     * @param {String} url
     */

  }, {
    key: "pushState",
    value: function pushState(url) {
      var _this = this;

      var pushHistory = sessionStorage.getItem(this.historyKey);

      var onBrowserBack = function onBrowserBack() {
        sessionStorage.removeItem(_this.historyKey);
        window.removeEventListener('popstate', onBrowserBack, false);
      };

      window.addEventListener('popstate', onBrowserBack, false);

      if (url !== pushHistory) {
        window.history.pushState(window.history.state, '', url);
        sessionStorage.setItem(this.historyKey, url);
      }
    }
    /**
     *  window.history.replaceState的封装，不影响vue router
     * @param {String} url
     */

  }, {
    key: "replaceState",
    value: function replaceState(url) {
      window.history.replaceState(window.history.state, '', url);
    }
  }], [{
    key: "install",
    value: function install(Vue, options) {
      var location = new Location(options);
      Vue.prototype.$location = location;
      Vue.location = location;
    }
  }]);

  return Location;
}();

export default Location;
