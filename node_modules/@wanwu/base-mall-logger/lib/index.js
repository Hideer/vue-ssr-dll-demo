'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.symbol');
require('core-js/modules/es.symbol.description');
require('core-js/modules/es.symbol.iterator');
require('core-js/modules/es.array.concat');
require('core-js/modules/es.array.for-each');
require('core-js/modules/es.array.from');
require('core-js/modules/es.array.is-array');
require('core-js/modules/es.array.iterator');
require('core-js/modules/es.array.join');
require('core-js/modules/es.array.map');
require('core-js/modules/es.array.slice');
require('core-js/modules/es.date.now');
require('core-js/modules/es.date.to-string');
require('core-js/modules/es.function.name');
require('core-js/modules/es.object.assign');
require('core-js/modules/es.object.keys');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.regexp.to-string');
require('core-js/modules/es.string.iterator');
require('core-js/modules/es.string.search');
require('core-js/modules/web.dom-collections.for-each');
require('core-js/modules/web.dom-collections.iterator');
require('core-js/modules/web.timers');
var wanwu = require('@wanwu/base-fn');
var baseLogger = require('@wanwu/base-logger');
var uaParser = _interopDefault(require('@wanwu/ua-parse'));
var mySentry = _interopDefault(require('@wanwu/sentry'));
var axios = _interopDefault(require('@wanwu/base-request'));
var User = _interopDefault(require('@wanwu/base-user'));

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var fn = wanwu.fn;
var ua = wanwu.ua;
function initLogger() {
  var userInfo = User.getUserInfo() || {};
  userInfo.id = userInfo.userId || '-1';
  userInfo.username = userInfo.unick || '';
  var systemInfo = uaParser(ua.getUserAgent());
  var systemInfoTags = {};
  Object.keys(systemInfo).forEach(function (key) {
    var item = systemInfo[key];
    systemInfoTags[key + '-uaParser'] = typeof item === 'string' ? item : Object.keys(item).map(function (keyStr) {
      var itemStr = item[keyStr] || '';
      return itemStr;
    }).join(' ');
  });
  mySentry.setUserOrTag({
    user: userInfo,
    tags: systemInfoTags,
    content: {
      key: 'systemInfo',
      value: systemInfo
    }
  });
}
var Logger = {
  msgQueue: [],
  timer: null,
  logP: function logP() {
    if (fn.getQueryString('channel')) {
      axios.get("topic/count?channel=".concat(encodeURIComponent(fn.getQueryString('channel'))))["catch"](function (err) {
        mySentry.logError(err);
      });
    }
  },
  logE: function logE(eventId, extra) {
    baseLogger.logE(eventId, extra);
  },
  sendMsg: function sendMsg(error) {
    var _this = this;

    var params = {
      msg: error.message,
      stack: error.stack,
      userInfo: User.getUserInfo(),
      ua: navigator.userAgent,
      timestamp: Date.now(),
      url: location.href,
      referer: document.referrer
    };
    this.msgQueue.push(params);
    clearTimeout(this.timer);
    this.timer = setTimeout(function () {
      _this.requestLog();
    }, 0);
  },
  requestLog: function requestLog() {
    var _this2 = this;

    var tmpData = this.msgQueue;
    this.msgQueue = []; // axios({
    //     url: 'https://api.wanwudezhi.com/media/log/add',
    //     data: tmpData.map(item => {
    //         return JSON.stringify(item);
    //     }),
    //     method: 'POST',
    //     headers: {
    //         [Config.AuthorizationKey]: '',
    //     },
    // })
    //     .then(() => {
    //     })
    //     .catch((err) => {
    //         mySentry.logError(err);
    //         this.msgQueue = this.msgQueue.concat(tmpData);
    //     });

    axios.post('https://api.wanwudezhi.com/media/log/add', tmpData.map(function (item) {
      return JSON.stringify(item);
    }), {
      withoutToken: true
    }).then(function () {})["catch"](function (err) {
      mySentry.logError(err);
      _this2.msgQueue = _this2.msgQueue.concat(tmpData);
    });
  }
};
function VueErrorHandler(err, vm, info) {
  Logger.sendMsg(err);
}
function VueWarnHandler(msg, vm, info) {
  Logger.sendMsg({
    message: msg,
    stack: info
  });
}
var throughParams = ['__env', 'inviteCode', 'token', '__debug', '__useip', '__useport', 'shareUserId', 'shareTime', '__source_channel', '__miniprogramType'];
function getRouteLocation(url, params) {
  var urlSearch = location.search.slice(1);
  var urlParams = fn.parse(urlSearch);
  var pickParams = fn.pick(urlParams, throughParams); // stringifyUrl: 将对象作为search参数，拼装成url

  return fn.stringifyUrl(url, Object.assign({}, pickParams, params));
}
function getRouteQuery(to, from) {
  var fromQuery = from.query;
  var toQuery = to.query; // 进行从原对象中过滤需要的属性，返回过滤的对象

  var pickedParams = fn.pick(fromQuery, throughParams);

  if (toQuery.inviteCode && Array.isArray(toQuery.inviteCode)) {
    var _iterator = _createForOfIteratorHelper(toQuery.inviteCode),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (item) {
          toQuery.inviteCode = item;
          break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return Object.assign({}, toQuery, pickedParams);
}

exports.VueErrorHandler = VueErrorHandler;
exports.VueWarnHandler = VueWarnHandler;
exports.default = Logger;
exports.getRouteLocation = getRouteLocation;
exports.getRouteQuery = getRouteQuery;
exports.initLogger = initLogger;
