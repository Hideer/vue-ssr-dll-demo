/**
 * Create by changsheng on 2019-04-19 14:50
 */

import * as wanwu from '@wanwu/base-fn';
import { logE } from '@wanwu/base-logger';
import uaParser from '@wanwu/ua-parse';
import mySentry from '@wanwu/sentry';
import axios from '@wanwu/base-request';
import User from '@wanwu/base-user';
const fn = wanwu.fn;
const ua = wanwu.ua;


export function initLogger() {
    const userInfo = User.getUserInfo() || {};
    userInfo.id = userInfo.userId || '-1';
    userInfo.username = userInfo.unick || '';
    const systemInfo = uaParser(ua.getUserAgent());
    let systemInfoTags = {};
    Object.keys(systemInfo).forEach(key => {
        const item = systemInfo[key];
        systemInfoTags[key + '-uaParser'] = typeof item === 'string' ? item : Object.keys(item).map(keyStr => {
            const itemStr = item[keyStr] || '';
            return itemStr;
        }).join(' ');
    });

    mySentry.setUserOrTag({
        user: userInfo,
        tags: systemInfoTags,
        content: {
            key: 'systemInfo',
            value: systemInfo,
        },
    });
}

const Logger = {
    msgQueue: [],

    timer: null,

    logP() {
        if (fn.getQueryString('channel')) {
            axios.get(`topic/count?channel=${encodeURIComponent(fn.getQueryString('channel'))}`).catch((err) => {
                mySentry.logError(err);
            });
        }
    },

    logE(eventId, extra) {
        logE(eventId, extra);
    },

    sendMsg(error) {
        const params = {
            msg: error.message,
            stack: error.stack,
            userInfo: User.getUserInfo(),
            ua: navigator.userAgent,
            timestamp: Date.now(),
            url: location.href,
            referer: document.referrer,
        };

        this.msgQueue.push(params);

        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
            this.requestLog();
        }, 0);
    },

    requestLog() {
        const tmpData = this.msgQueue;
        this.msgQueue = [];
        // axios({
        //     url: 'https://api.wanwudezhi.com/media/log/add',
        //     data: tmpData.map(item => {
        //         return JSON.stringify(item);
        //     }),
        //     method: 'POST',
        //     headers: {
        //         [Config.AuthorizationKey]: '',
        //     },
        // })
        //     .then(() => {
        //     })
        //     .catch((err) => {
        //         mySentry.logError(err);
        //         this.msgQueue = this.msgQueue.concat(tmpData);
        //     });
        axios.post('https://api.wanwudezhi.com/media/log/add', tmpData.map(item => {
            return JSON.stringify(item);
        }), {
            withoutToken: true,
        }).then(() => {
        })
        .catch((err) => {
            mySentry.logError(err);
            this.msgQueue = this.msgQueue.concat(tmpData);
        });
    },
};

export function VueErrorHandler(err, vm, info) {
    Logger.sendMsg(err);
}

export function VueWarnHandler(msg, vm, info) {
    Logger.sendMsg({
        message: msg,
        stack: info,
    });
}

export default Logger;


const throughParams = ['__env', 'inviteCode', 'token', '__debug', '__useip', '__useport', 'shareUserId', 'shareTime', '__source_channel', '__miniprogramType'];

export function getRouteLocation(url, params) {
    const urlSearch = location.search.slice(1);
    const urlParams = fn.parse(urlSearch);
    const pickParams = fn.pick(urlParams, throughParams);
    // stringifyUrl: 将对象作为search参数，拼装成url
    return fn.stringifyUrl(url, Object.assign({}, pickParams, params));
}

export function getRouteQuery(to, from) {
    const fromQuery = from.query;
    const toQuery = to.query;
    // 进行从原对象中过滤需要的属性，返回过滤的对象
    const pickedParams = fn.pick(fromQuery, throughParams);
    if (toQuery.inviteCode && Array.isArray(toQuery.inviteCode)) {
        for (let item of toQuery.inviteCode) {
            if (item) {
                toQuery.inviteCode = item;
                break;
            }
        }
    }
    return Object.assign({}, toQuery, pickedParams);
}
