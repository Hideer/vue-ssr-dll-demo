'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.function.name');
require('core-js/modules/es.object.assign');
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/esm/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/esm/createClass'));
var Popup = _interopDefault(require('@wanwu/base-vue-popup'));
var Loading = _interopDefault(require('@wanwu/base-vue-loading'));
var vueRuntimeHelpers = require('@wanwu/vue-runtime-helpers');
var Vue = _interopDefault(require('vue'));
var getCompDefaultOptions = _interopDefault(require('@wanwu/get-comp-default-options'));

//
var script = {
  name: 'LoadingToast',
  components: {
    Popup: Popup,
    Loading: Loading
  },
  props: {
    value: {
      type: Boolean,
      "default": false
    },
    loadingText: {
      type: String,
      "default": ''
    },
    loadType: {
      type: String,
      "default": 'line'
    },
    loadingProps: {
      type: Object
    }
  },
  data: function data() {
    return {};
  },
  computed: {},
  methods: {
    closed: function closed(e) {
      this.$emit('closed');
    },
    onInput: function onInput(val) {
      this.$emit('input', val);
    }
  }
};

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('Popup', {
    staticClass: "component__loadingToast loadingToast",
    attrs: {
      "value": _vm.value,
      "overlay": false,
      "slot-style": {
        zIndex: '4001'
      }
    },
    on: {
      "closed": function closed($event) {
        return _vm.closed($event);
      },
      "input": _vm.onInput
    }
  }, [_c('div', {
    staticClass: "content flex f-fd-c f-jc-c f-ai-c"
  }, [_c('Loading', _vm._b({
    staticClass: "Loading",
    attrs: {
      "size": 80,
      "load-type": _vm.loadType
    }
  }, 'Loading', _vm.loadingProps, false)), _vm._v(" "), _vm.loadingText ? _c('div', {
    staticClass: "text"
  }, [_vm._v("\n            " + _vm._s(_vm.loadingText) + "\n        ")]) : _vm._e()], 1)]);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-042550f4_0", {
    source: ".component__loadingToast .content[data-v-042550f4]{max-width:2.26rem;min-width:1.8rem;min-height:1.8rem;background-color:rgba(50,50,51,.88);color:#fff;padding:.3rem;font-size:.26rem;line-height:.4rem;border-radius:.16rem;justify-content:center;text-align:center;max-width:6.7rem;white-space:normal;overflow:hidden}.component__loadingToast .text[data-v-042550f4]{text-align:center;color:#c9c9c9;margin-top:.2rem;font-size:.26rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-042550f4";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, vueRuntimeHelpers.createInjector, undefined, undefined);

var defaultOptions = getCompDefaultOptions(__vue_component__);
var ToastConstructor = Vue.extend(__vue_component__);
var instance;

var LoadingToast = /*#__PURE__*/function () {
  function LoadingToast() {
    _classCallCheck(this, LoadingToast);
  }

  _createClass(LoadingToast, null, [{
    key: "show",
    value: function show(options) {
      if (!instance) {
        instance = new ToastConstructor().$mount(document.createElement('div'));
        instance.$on('input', function (val) {
          instance.value = val;
        });
        document.body.appendChild(instance.$el);
      }

      Object.assign(instance, defaultOptions);

      if (options) {
        if (typeof options === 'string') {
          Object.assign(instance, {
            loadingText: options
          });
        } else {
          Object.assign(instance, options);
        }
      }

      instance.value = true;
    }
  }, {
    key: "close",
    value: function close() {
      if (instance) {
        instance.value = false;
      }
    }
  }]);

  return LoadingToast;
}();

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
  Vue.prototype.$loadingToast = LoadingToast;
  Vue.loadingToast = LoadingToast;
};

exports.LoadingToast = LoadingToast;
exports.default = __vue_component__;
