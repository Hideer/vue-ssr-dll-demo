function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// import ComponentRender from '../commonComponents/ComponentRender';
import { logR, logE } from '@wanwu/base-logger';
import OuterStyle from './outerStyle';
export default {
  name: 'ComponentWrapper',
  inject: ['variables', 'variableChange', 'ApplicationEnv', 'userRelated', 'appContext__'],
  props: {
    config: {
      type: Object
    },
    isPreview: {
      type: Boolean,
      "default": false
    }
  },
  errorCaptured: function errorCaptured(err, vm, info) {
    var componentName = this.config && this.config.componentName;
    var pageComponentId = this.config && this.config.id;

    if (this.ApplicationEnv && this.ApplicationEnv.env !== 'preview') {
      logE('nineBusiness', {
        key: 'nine-component-renderer-error',
        component: componentName,
        pageComponentId: pageComponentId,
        noNameError: !componentName,
        info: info,
        message: err && err.message
      });
      logR('nine-component-renderer-error', 1, {
        component: componentName,
        pageComponentId: pageComponentId,
        noNameError: !componentName,
        info: info,
        message: err && err.message
      }, ['component', 'noNameError', 'info', 'message', 'pageComponentId' // componentName ? 'noNameError' : '',
      // (err && err.message) || '未知错误',
      // info,
      ]);
    }
  },
  computed: {
    show: function show() {
      var contextShow = this.appContext__ && this.appContext__.appConfig.showControlMap[this.config.id];
      var defaultShow = this.config.commonProps.defaultShow === undefined ? true : this.config.commonProps.defaultShow;
      return contextShow === undefined ? defaultShow : contextShow;
    },
    component: function component() {
      return this.config.componentInfo.componentName;
    },
    componentProps: function componentProps() {
      return this.config.props;
    },
    componentSlots: function componentSlots() {
      // should be an array

      /**
       * {
       * name: 'slotname',
       * config: {}
       * }
       */
      return this.config.slots || [];
    },
    isShowRelatedCrowd: function isShowRelatedCrowd() {
      var _this = this;

      if (this.isPreview) {
        return this.isPreview;
      } // 未获取到登陆信息


      if (!this.userRelated.userInfo) {
        return false;
      }

      var isLogin = this.userRelated.userInfo && this.userRelated.userInfo.userId;
      var nowTime = +new Date();
      var displayTimeRange = this.config.commonProps.displayTimeRange;
      var isInRange = displayTimeRange && displayTimeRange.length && displayTimeRange.length > 1 && nowTime >= displayTimeRange[0] && nowTime <= displayTimeRange[1];
      var isHitTimeRange = !this.config.commonProps.isRegularDisplay || this.config.commonProps.isRegularDisplay && isInRange; // 未登陆
      // 登陆了但是画像参数还未返回

      if (!isLogin || isLogin && !this.userRelated.crowIds) {
        return (!this.config.commonProps.isUsePortrait || this.config.commonProps.isUsePortrait && this.config.commonProps.isShowNologin) && isHitTimeRange;
      } // 登陆了且画像有数据


      var portraitIds = this.config.commonProps.portraitIds ? this.config.commonProps.portraitIds.split(',') : [];
      var isHitPortrait = this.config.commonProps.crowType ? portraitIds.filter(function (item) {
        return _this.config.commonProps.crowType === '1' && (_this.userRelated.crowIds.userCrowIds || []).indexOf(item) > -1 || _this.config.commonProps.crowType === '2' && (_this.userRelated.crowIds.sellerCrowIds || []).indexOf(item) > -1;
      }).length > 0 : false;
      return (!this.config.commonProps.isUsePortrait || this.config.commonProps.isUsePortrait && isHitPortrait) && isHitTimeRange;
    } // hasSlots() {
    //     return Array.isArray(this.componentSlots) && this.componentSlots.length > 0;
    // }

  },
  render: function render(h) {
    var _this2 = this;

    // const provides = this.config.provides;
    // const consumes = this.config.consumes;
    // const on = {};
    // let props = {};
    // if (provides && Array.isArray(provides)) {
    //     provides.forEach(p => {
    //         props[p.propName] = this.variables[p.variableName];
    //         // on[p.changeEventName] = this.variableChange;
    //         on[p.changeEventName] = v => {
    //             this.variableChange(p.variableName, v);
    //         };
    //     });
    // }
    // if (consumes && Array.isArray(consumes)) {
    //     consumes.forEach(p => {
    //         // props[p.propName] = this.variables[p.variableName];
    //         let values =
    //             this.variables[p.variableName] &&
    //             this.variables[p.variableName].values;
    //         let value = {};
    //         if (values) {
    //             values = Array.isArray(values) ? values : [values];
    //             value = values.find(
    //                 v => v.component === this.config.componentName,
    //             );
    //         }
    //         if (value && value.data) {
    //             props = { ...props, ...value.data };
    //         }
    //     });
    // }
    if (!this.show) return null;
    return this.isShowRelatedCrowd ? h('div', {
      on: this.isPreview ? {
        change: function change(e) {
          _this2.$emit('drageChange', e);
        }
      } : null,
      directives: [{
        name: 'log-exposure',
        value: {
          event: 'nineBusiness',
          data: this.componentExposureData(this.config)
        }
      }],
      attrs: {
        id: this.config.id
      }
    }, [h(this.config.componentName, {
      props: _objectSpread(_objectSpread({}, this.config.props), {}, {
        originConfig: this.config
      }),
      // on,
      style: OuterStyle(this.config.commonProps),
      attrs: {
        id: this.config.commonProps.componentDomId
      }
    }, this.componentSlots.map(function (s, index) {
      var name = s.name,
          config = s.config;
      return h('component-wrapper', {
        props: {
          config: config,
          index: index
        },
        key: name
      });
    }))]) : '';
  },
  methods: {
    componentExposureData: function componentExposureData(_ref) {
      var componentName = _ref.componentName,
          id = _ref.id;
      return {
        key: 'nine-component-show',
        component: componentName,
        pageComponentId: id
      };
    }
  }
};