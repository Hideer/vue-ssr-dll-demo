function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import axios from 'axios';
import Axios from './http';
import { Message, Loading } from 'element-ui';
import * as KEYS from './apiKeys';
import router from '../router/index';
import env from './env'; // 当前环境配置

import { deepCopy, ssoLogin } from './utils';
import qs from 'qs';
import store from '../store';
var loadingInstance = null; // element loading

var pc_request = new Axios({
  base: {
    dataType: 'json'
  },
  requestInterceptor: [function (config) {
    var _config$notNeedLoadin = config.notNeedLoading,
        notNeedLoading = _config$notNeedLoadin === void 0 ? false : _config$notNeedLoadin;

    if (!notNeedLoading) {
      loadingInstance = Loading.service({
        fullscreen: true
      });
    }

    var token = window.storage.getItem(window.storage.keys.USER_TOKEN).token;

    if (token) {
      config.headers['Authorization'] = token; // 让每个请求携带自定义token 请根据实际情况自行修改
    }

    var Permission = store.state.login.permission;

    if (Permission) {
      config.headers['Permission'] = Permission;
    }

    return config;
  }, function (error) {
    loadingInstance && loadingInstance.close(); // Do something with request error

    Promise.reject(error);
  }]
}); // 响应拦截 -- 接口请求错误处理

_axios.interceptors.response.use( /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {
    var _res$config, config, _config$loadingDelay, loadingDelay, code, message, filterNumberBoolean, successCode, warningCode, noAuthCode, ssoNoAuthCode, errorCode;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _res$config = res.config, config = _res$config === void 0 ? {} : _res$config;
            _config$loadingDelay = config.loadingDelay, loadingDelay = _config$loadingDelay === void 0 ? 0 : _config$loadingDelay;
            _context.next = 4;
            return new Promise(function (resolve) {
              setTimeout(function () {
                loadingInstance && loadingInstance.close();
                resolve();
              }, loadingDelay);
            });

          case 4:
            if (res.data.code) {
              code = res.data.code;
              message = res.data.message;
            } else {
              code = res && res.data && res.data.status && res.data.status.code || '';
              message = res && res.data && res.data.status && res.data.status.message || '';
            } // 过滤数字和布尔值


            filterNumberBoolean = function filterNumberBoolean(arg) {
              var result = arg;

              if (typeof arg === 'number' || typeof arg === 'boolean' || arg) {
                result = arg;
              } else {
                result = true;
              }

              return result;
            };

            successCode = [1001, '1001']; // 成功code

            warningCode = [5009, 5012]; // 警告code

            noAuthCode = [4001]; // 无权限code

            ssoNoAuthCode = [40010]; // sso无权限code

            errorCode = [5004, 5006, 5007, 50018, 50017, 50019, 50028]; // 错误code

            if (!successCode.includes(code)) {
              _context.next = 15;
              break;
            }

            return _context.abrupt("return", filterNumberBoolean(res.data.result));

          case 15:
            if (warningCode.includes(code)) {
              Message.warning(message || '');
            } else if (errorCode.includes(code)) {
              Message.error(res.data.result || message);
            } else if (noAuthCode.includes(code)) {
              Message.error(message || '登录信息失效，请重新登录');
              window.storage.removeItem(window.storage.keys.USER_INFO);
              window.storage.removeItem(window.storage.keys.USER_TOKEN);
              router.push({
                name: 'login'
              }); // 暂时跳转老的
              // ssoLogin() // 统一跳转sso
            } else if (ssoNoAuthCode.includes(code)) {
              Message.error(message || 'sso登录信息失效，请重新登录');
              ssoLogin();
            } else {
              Message.error(message || "\u8BF7\u6C42\u9519\u8BEF(".concat(code, ")"));
            }

            return _context.abrupt("return", Promise.reject(res && res.data || {
              message: message || "\u8BF7\u6C42\u9519\u8BEF(".concat(code, ")")
            }));

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}(), function (error) {
  loadingInstance.close();

  if (error.response) {
    switch (error.response.status) {
      case 502:
        console.log('接口异常:' + error.response.status);
        Message.error("".concat(error.response.status, " | \u7F51\u7EDC\u9519\u8BEF"));
        break;

      case 500:
        console.log('接口异常:' + error.response.status);
        Message.error("".concat(error.response.status, " | \u670D\u52A1\u5668\u9519\u8BEF"));
        break;

      case 400:
        console.log('接口异常:' + error.response.status);
        Message.error("".concat(error.response.status, " | \u670D\u52A1\u5668\u9519\u8BEF"));
        break;

      default:
        Message.error('服务器错误');
    }
  } else {
    Message.error('服务器错误');
  }

  return Promise.reject(error);
}); // 类型转换


var toType = function toType(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
}; // 参数trim过滤


var filterNull = function filterNull(o) {
  // delete o.total
  for (var key in o) {
    if (o[key] === null) {
      delete o[key];
    }

    if (toType(o[key]) === 'string') {
      o[key] = o[key].trim();
    }
  }

  return o;
}; // 封装axios方法


var apiAxios = function apiAxios(method, url, params, option) {
  var reg = /^\/mock-prefix/g;
  var moduleReg = /^[a-zA-z]*::/g; // 接口分模块域名可能不同匹配

  var moduleName = '';

  if (moduleReg.test(url)) {
    var urlArr = url.split('::');
    moduleName = urlArr[0];
    url = urlArr[1];
  }

  if (!reg.test(url)) url = (/^http(s)?:\/\//.test(url) ? '' : env.apiDomain(moduleName)) + url;
  params = deepCopy(params);

  if (params) {
    params = filterNull(params);
  } // const token = window.storage.getItem(window.storage.keys.USER_TOKEN)


  var urlData = option === true ? url + params.id : url;
  if (option === true) delete params.id;
  var headers = {};

  if (option === 'qs') {
    params = qs.stringify(params);
    headers = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'
      }
    };
  }

  var axiosConfig = _objectSpread(_objectSpread({
    method: method,
    url: urlData,
    data: method === 'POST' || method === 'PUT' || method === 'PATCH' ? params : null,
    params: method === 'GET' || method === 'DELETE' ? params : null
  }, option), headers);

  return _axios(axiosConfig);
};

var exportObj = {
  get: function get(url, params, option) {
    return apiAxios('GET', url, params, option);
  },
  post: function post(url, params, option) {
    return apiAxios('POST', url, params, option);
  },
  put: function put(url, params, option) {
    return apiAxios('PUT', url, params, option);
  },
  patch: function patch(url, params, option) {
    return apiAxios('PATCH', url, params, option);
  },
  "delete": function _delete(url, params, option) {
    return apiAxios('DELETE', url, params, option);
  },
  keys: KEYS
};
export default exportObj;