function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
 * @Descripttion:
 * @version: 0.0.0
 * @Author: fenghe
 * @Date: 2019-11-28 15:29:29
 * @LastEditors  : fenghe
 */
import axios from 'axios';
import merge from 'lodash.merge';
import baseOption from './baseOption';
import apiResultHandler from '../apiResultHandler'; // let qs = require('qs');
// 解决中文乱码

var Request = /*#__PURE__*/function () {
  function Request(option) {
    _classCallCheck(this, Request);

    this.config = merge({}, baseOption, option);
    this.instance = null;
    this.CancelToken = axios.CancelToken;
    this.source = this.CancelToken.source();
    this.initAxios = this.initAxios.bind(this);
    this.initSource = this.initSource.bind(this);
    this.cancel = this.cancel.bind(this);
    this.sendAxios = this.sendAxios.bind(this);
    this.initAxios();
  }

  _createClass(Request, [{
    key: "setOption",
    value: function setOption(option) {
      this.config = merge({}, this.config, option);
      if (option.requestInterceptor || option.responseInterceptor) this.initAxios();
    }
  }, {
    key: "pushInterceptorsSuccess",
    value: function pushInterceptorsSuccess(fun) {
      if (typeof fun !== 'function') return;

      if (this.config.requestInterceptor[0] instanceof Array) {
        this.config.requestInterceptor[0].push(fun);
      } else {
        var originRequestInterceptor = this.config.requestInterceptor[0];
        this.config.requestInterceptor[0] = [originRequestInterceptor, fun];
      }

      this.initAxios();
    }
  }, {
    key: "initSource",
    value: function initSource() {
      this.source = this.CancelToken.source();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.source.cancel();
    }
  }, {
    key: "initAxios",
    value: function initAxios() {
      var _this = this;

      this.instance = axios.create(_objectSpread({}, this.config.base));
      this.instance.interceptors.request.use( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config) {
          var i, len, res;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;

                  if (!(_this.config.requestInterceptor[0] instanceof Array)) {
                    _context.next = 13;
                    break;
                  }

                  i = 0, len = _this.config.requestInterceptor[0].length;

                case 3:
                  if (!(i < len)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 6;
                  return _this.config.requestInterceptor[0][i](config, _this.config, _this.source);

                case 6:
                  config = _context.sent;

                case 7:
                  i++;
                  _context.next = 3;
                  break;

                case 10:
                  return _context.abrupt("return", config);

                case 13:
                  _context.next = 15;
                  return _this.config.requestInterceptor[0](config, _this.config, _this.source);

                case 15:
                  res = _context.sent;
                  return _context.abrupt("return", res);

                case 17:
                  _context.next = 23;
                  break;

                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](0);
                  console.log(_context.t0);
                  return _context.abrupt("return", config);

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 19]]);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.requestInterceptor[1](err, _this.config);
      });
      this.instance.interceptors.response.use(apiResultHandler, null);
      this.instance.interceptors.response.use( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
          var res;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.config.responseInterceptor[0](config, _this.config, _this.source.cancel);

                case 2:
                  res = _context2.sent;
                  return _context2.abrupt("return", res);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.responseInterceptor[1](err, _this.config, _this.source.cancel);
      });
    }
  }, {
    key: "setConfig",
    value: function setConfig(option) {
      this.config = merge({}, this.config, option);
    }
  }, {
    key: "getAxiosInstance",
    value: function getAxiosInstance() {
      return this.instance;
    }
  }, {
    key: "sendAxios",
    value: function sendAxios(method, url, data) {
      var _this2 = this;

      var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var params = this.config.formatData(data);
      return new Promise(function (resolve, reject) {
        if (['post', 'put', 'patch'].includes(method)) {
          _this2.instance[method](url, params, _objectSpread(_objectSpread({}, config), {}, {
            cancelToken: _this2.source.token
          })).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else if (['get', 'delete', 'head'].includes(method)) {
          _this2.instance[method](url, _objectSpread({
            params: params,
            cancelToken: _this2.source.token
          }, config)).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else {
          reject(new Error('请求方法不正确!'));
        }
      });
    }
  }]);

  return Request;
}();

export default Request;