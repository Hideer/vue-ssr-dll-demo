function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 * @Descripttion:
 * @version: 0.0.0
 * @Author: fenghe
 * @Date: 2019-12-16 15:11:51
 * @LastEditors: Please set LastEditors
 */
import Axios from './http';
import { ua, fn } from '@wanwu/base-fn';
import { encrypt } from '@wanwu/crypto';
import webConfig, { getConstID, getUUID } from '@wanwu/mall-web-config';
import md5 from 'md5';
import { getToken } from '@wanwu/base-sdk-token-manager';
var AppVersion = '2.0.0';
var axios = new Axios({
  requestInterceptor: [/*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, option, source) {
      var url, data, token, deviceinfo, appversion, systemversion, timestamp, requestTime, salt, sign, deviceNum, customHeader, originText, cipherText, __env, prefix, useip, useport;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!config.withoutCancelToken) {
                config.cancelToken = source.token;
              }

              url = config.url, data = config.data;
              token = option.getToken();
              deviceinfo = 'h5';
              if (ua.isIOSApp()) deviceinfo = 'iOS';
              if (ua.isAndroidApp()) deviceinfo = 'Android';
              if (ua.isWechatMiniProgram()) deviceinfo = 'xcx';
              appversion = ua.getAppVersion() || AppVersion;
              systemversion = '1.0.0';
              timestamp = parseInt(Date.now() / 1000);
              requestTime = Date.now();
              salt = 'zdwhH5#!@';
              sign = md5([deviceinfo, appversion, systemversion, timestamp, salt].join('-')).toUpperCase();
              _context.next = 15;
              return getUUID();

            case 15:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 18;
                break;
              }

              _context.t0 = '';

            case 18:
              deviceNum = _context.t0;
              customHeader = {
                deviceinfo: deviceinfo,
                appversion: appversion,
                systemversion: systemversion,
                timestamp: timestamp,
                requestTime: requestTime,
                sign: sign,
                deviceNum: deviceNum
              };

              if (!config.fingerprint) {
                _context.next = 31;
                break;
              }

              _context.prev = 21;
              _context.next = 24;
              return getConstID();

            case 24:
              customHeader['deviceToken'] = _context.sent;
              _context.next = 31;
              break;

            case 27:
              _context.prev = 27;
              _context.t1 = _context["catch"](21);
              customHeader['deviceToken'] = '';
              console.log(_context.t1);

            case 31:
              config.headers.common = Object.assign({}, config.headers.common, customHeader);

              if (token && !config.withoutToken) {
                config.headers.common[webConfig.AuthorizationKey] = token;
              }

              if (config.encrypt) {
                if (typeof data !== 'undefined') {
                  originText = JSON.stringify(data);
                  cipherText = encrypt(originText);
                  config.data = {
                    cipherText: cipherText
                  };
                }
              }

              __env = fn.getQueryString('__env');

              if (!/^http(s)?:\/\//.test(url)) {
                if (/^api\//.test(url)) {
                  // `api/`开头
                  prefix = '/';
                } else if (/^\//.test(url)) {
                  // `/`开头
                  prefix = '';
                } else {
                  prefix = '/api/v1/mall/';
                }

                if (__env === 'useip') {
                  useip = fn.getQueryString('__useip');
                  useport = fn.getQueryString('__useport');
                  config.url = "http://".concat(useip, ":").concat(useport || 8085) + prefix + url;
                } else if (__env === 'dev') {
                  config.url = 'http://mall-portal-dev2.wanwudezhi.com' + prefix + url;
                } else if (__env === 'dev3') {
                  // 测试环境3
                  config.url = 'http://mall-portal-dev3.wanwudezhi.work' + prefix + url;
                } else if (__env === 'develop') {
                  // 测试环境（日常环境）
                  config.url = 'http://gitlab.wanwudezhi.com' + prefix + url;
                } else if (__env === 'pre') {
                  // 预发环境
                  config.url = 'http://pre-portal.wanwudezhi.com' + prefix + url;
                } else {
                  // 生产环境
                  config.url = 'https://api.wanwudezhi.com' + prefix + url;
                } // config.url = 'http://192.168.0.30:8085' + prefix + url;

              }

              return _context.abrupt("return", config);

            case 37:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[21, 27]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }()],
  formatRes: function formatRes(res) {
    return res.result;
  },
  getToken: getToken
});

function setAppVersion(version) {
  AppVersion = version;
}

export var initSource = axios.initSource;
export var cancel = axios.cancel; // 兼容原先写法....
// export default {
//     get: function (url, {
//         params,
//         ...config
//     } = {},config) {
//         return axios.sendAxios('get', url, params, config);
//     },
//     delete: function (url, {
//         params,
//         ...config
//     } = {}) {
//         return axios.sendAxios('delete', url, params, config);
//     },
//     post: function (url, params, config) {
//         return axios.sendAxios('post', url, params, config);
//     },
//     put: function (url, params, config) {
//         return axios.sendAxios('put', url, params, config);
//     },
// };

var instance = axios.instance;
instance.sendAxios = axios.sendAxios;

instance.sendAxios.get = function (url, params, config) {
  return instance.sendAxios('get', url, params, config);
};

instance.sendAxios["delete"] = function (url, params, config) {
  return instance.sendAxios('delete', url, params, config);
};

instance.sendAxios.post = function (url, params, config) {
  return instance.sendAxios('post', url, params, config);
};

instance.sendAxios.put = function (url, params, config) {
  return instance.sendAxios('put', url, params, config);
};

export { axios, setAppVersion };
export default instance;