function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { logR } from '@wanwu/base-logger';

function isEmptyArray(arr) {
  return Array.isArray(arr) && arr.length === 0;
} // function isEmptyObject() {
//     return false;
// }


function isEmptyData(data) {
  return isEmptyArray(data) || data.total !== undefined && (!data.dataList || isEmptyArray(data.dataList));
}

function logApiEmptyOrError(req, isRequestError, isEmptyResponse, isResponseFail) {
  var config = req.config || {};

  if (isRequestError || isEmptyResponse) {
    var logContent = {
      // key: 'nine-api-error',
      isRequestError: isRequestError,
      isEmptyResponse: !isResponseFail && isEmptyResponse,
      apiUrl: config.url,
      requestData: config.data,
      reponseData: req.data || req.result // headers: config.headers,

    };
    console.log('report request problem:', req, logContent); // logE('nineBusiness', logContent);

    logR('nine-api-error', 1, logContent, Object.keys(logContent));
  }
} // const handledFailCode = [301];


var errorCodes = [5005, 5010, 101]; // const apiWhiteList = [
//     'https://kunlun.wanwudezhi.com/c2c/messageWindow/idleButton',
// ];

var apiList = ['https://kunlun.wanwudezhi.com/activity/coupon/details', 'https://kunlun.wanwudezhi.com/activity/seller/coupon/getShopCouponList', 'https://kunlun.wanwudezhi.com/activity/seller/coupon/getMergeCouponWithShopList', 'https://api.wanwudezhi.com/api/activity/activityPage/query', 'https://api.wanwudezhi.com/api/live/wwdzlive/queryActivityLiveRoomListForUB', 'https://api.wanwudezhi.com/api/promotion/liveroom/queryLiveRoomByRoomIds', 'https://api.wanwudezhi.com/mall/recommend/activity', 'https://api.wanwudezhi.com/api/promotion/activity/', 'https://api.wanwudezhi.com/mall/guessYouLike', 'https://api.wanwudezhi.com/mall/jiugong/cpcCarefullyTop'];

function testApiInList(api) {
  var _iterator = _createForOfIteratorHelper(apiList),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var a = _step.value;
      if (api.indexOf(a) > -1) return true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
}

function apiResultHandler(config) {
  var _config$data = config.data,
      data = _config$data === void 0 ? {} : _config$data,
      status = config.status,
      url = config.config.url;
  if (!testApiInList(url)) return config;
  var isRequestError = status !== 200; // 只对特殊code做记录

  var isResponseFail = data.code && errorCodes.includes(data.code);
  var result = data.result || data.data;
  var isCode1001 = data.code === 1001; // 判断数据为空只在code为1001，也就是正常响应的情况下判断，不然所有的非1001 code都是空数据

  var isEmptyResult = isCode1001 && (result === null || result === undefined || isEmptyData(result)); // const result = data.result || data.data;
  // let isEmptyList = false;
  // if (
  //     isEmpty(result) ||
  //     (result && typeof result.total === 'number' && isEmpty(result.dataList))
  // ) {
  //     isEmptyList = true;
  // }

  logApiEmptyOrError(config, isRequestError, isEmptyResult, isResponseFail);
  return config;
}

export default apiResultHandler;