function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import axios from '../request';
import kl_request from '../kl_request';
import { fn } from '@wanwu/base-fn';
var transfer = {
  get: function get() {
    var api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var config = arguments.length > 2 ? arguments[2] : undefined;
    var paramStr = api ? api.split('?') : [];
    var apiStr = paramStr.length ? paramStr[0] : '';
    var queryStr = paramStr.length > 1 ? paramStr[1] : '';
    var parseParams = fn.parse(queryStr);
    Object.keys(parseParams).forEach(function (key) {
      if (parseParams[key] === 'true') {
        parseParams[key] = true;
      } else if (parseParams[key] === 'false') {
        parseParams[key] = false;
      }
    });
    var obj = args || {};

    var params = _objectSpread(_objectSpread({}, parseParams), args && args.params);

    delete obj.params;

    if (params.iskl) {
      delete params.iskl;
      return kl_request.post(apiStr, _objectSpread(_objectSpread({}, obj), {}, {
        params: params
      }), config);
    } else {
      return axios.get(apiStr, _objectSpread(_objectSpread({}, obj), {}, {
        params: params
      }), config);
    }
  },
  put: function put(api, args, config) {
    return axios.put(api, args, config);
  },
  "delete": function _delete(api, args, config) {
    return axios["delete"](api, args, config);
  },
  post: function post(api, args, config) {
    return axios.post(api, args, config);
  }
};
export default {
  install: function install(Vue) {
    // Vue.prototype.$request = axios;
    Vue.prototype.$request = transfer;
  }
};