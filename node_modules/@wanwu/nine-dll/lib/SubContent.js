// import ComponentRender from '../commonComponents/ComponentRender';
// import { logR } from '@wanwu/base-logger';
// import OuterStyle from './outerStyle';
export default {
  name: 'SubContent',
  inject: ['variables', 'variableChange', 'ApplicationEnv'],
  props: {
    config: {
      type: Object
    },
    isPreview: {
      type: Boolean,
      "default": false
    },
    index: {
      type: Number
    }
  },
  // errorCaptured(err, vm, info) {
  //     const componentName = this.config && this.config.componentName;
  //     if (this.ApplicationEnv && this.ApplicationEnv.env !== 'preview') {
  //         logR(
  //             'nine-component-renderer',
  //             1,
  //             {
  //                 component: componentName,
  //                 noNameError: !componentName,
  //                 info: info,
  //                 message: err && err.message,
  //             },
  //             ['component', 'noNameError', 'info', 'message'],
  //         );
  //     }
  // },
  computed: {
    component: function component() {
      return this.config.componentInfo.componentName;
    },
    componentProps: function componentProps() {
      return this.config.props;
    },
    componentSlots: function componentSlots() {
      return this.config.slots || [];
    },
    type: function type() {
      return this.config.type;
    },
    subPages: function subPages() {
      return this.previewWrapper && this.previewWrapper.subPages || [];
    }
  },
  render: function render(h) {
    console.log(this.config);

    switch (this.type) {
      case 'Component':
        {
          var components = this.config.components;

          if (components) {
            return h('div', components.map(function (c, index) {
              return h('component-wrapper', {
                props: {
                  config: c,
                  index: index
                },
                key: index
              });
            }));
          }

          return null; // return h('component-wrapper', {
          //     props: { config: this.config.config, index: 0 },
          //     key: name,
          // });
        }

      case 'SubPage':
        {
          // return;
          var _components = this.config.content && this.config.content.components;

          if (_components) {
            return h('div', _components.map(function (c, index) {
              return h('component-wrapper', {
                props: {
                  config: c,
                  index: index
                },
                key: index
              });
            }));
          }

          return null;
        }

      default:
        {
          console.error("".concat(this.type, " not supported"));
        }
    } // return h(
    //     this.isPreview ? 'draggable' : 'div',
    //     {
    //         on: this.isPreview
    //             ? {
    //                   change: e => {
    //                       this.$emit('drageChange', e);
    //                   },
    //               }
    //             : null,
    //     },
    //     [
    //         h(
    //             this.config.componentName,
    //             {
    //                 props: { ...this.config.props },
    //                 // on,
    //                 style: OuterStyle(this.config.commonProps),
    //             },
    //             this.componentSlots.map((s, index) => {
    //                 const { name, config } = s;
    //                 return h('component-wrapper', {
    //                     props: { config, index },
    //                     key: name,
    //                 });
    //             }),
    //         ),
    //     ],
    // );

  }
};