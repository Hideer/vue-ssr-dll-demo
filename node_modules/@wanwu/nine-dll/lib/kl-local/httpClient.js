function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import httpBase from 'axios';
import merge from 'lodash.merge';
import baseOption from './baseOption';
import { fn } from '@wanwu/base-fn';

var HttpClient = /*#__PURE__*/function () {
  function HttpClient(option) {
    _classCallCheck(this, HttpClient);

    this.config = merge({}, baseOption, option);
    this.httpBaseInstance = null;
    this.CancelToken = httpBase.CancelToken;
    this.initSource = this.initSource.bind(this);
    this.cancel = this.cancel.bind(this);
    this.init();
  } // 设置请求配置


  _createClass(HttpClient, [{
    key: "setOption",
    value: function setOption(option) {
      this.config = merge({}, this.config, option);
      this.init();
    }
  }, {
    key: "initSource",
    value: function initSource() {
      this.source = this.CancelToken.source();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.source.cancel();
    }
  }, {
    key: "init",
    value: function init() {
      var _this = this;

      this.httpBaseInstance = httpBase.create(_objectSpread({}, this.config.base)); // 依次执行所有配置里的拦截器方法

      this.httpBaseInstance.interceptors.request.use( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config) {
          var i, len, res;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;

                  if (!(_this.config.requestInterceptor[0] instanceof Array)) {
                    _context.next = 13;
                    break;
                  }

                  i = 0, len = _this.config.requestInterceptor[0].length;

                case 3:
                  if (!(i < len)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 6;
                  return _this.config.requestInterceptor[0][i](config, _this.config, _this.source);

                case 6:
                  config = _context.sent;

                case 7:
                  i++;
                  _context.next = 3;
                  break;

                case 10:
                  return _context.abrupt("return", config);

                case 13:
                  _context.next = 15;
                  return _this.config.requestInterceptor[0](config, _this.config, _this.source);

                case 15:
                  res = _context.sent;
                  return _context.abrupt("return", res);

                case 17:
                  _context.next = 23;
                  break;

                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](0);
                  console.log(_context.t0);
                  return _context.abrupt("return", config);

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 19]]);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.requestInterceptor[1](err, _this.config);
      });
      /**
       * 默认的responseInterceptor会把结果返回处理成只有data
       * 这在很多情况下其实不能满足需求，所以增加这个配置可以在这个responseInterceptor之前执行
       * veryFirstResponseInterceptors: [[handler, errHandler]]
       */

      if (this.config.veryFirstResponseInterceptors && Array.isArray(this.config.veryFirstResponseInterceptors)) {
        this.config.veryFirstResponseInterceptors.forEach(function (interceptor) {
          var _this$httpBaseInstanc;

          interceptor = Array.isArray(interceptor) ? interceptor : [interceptor];

          (_this$httpBaseInstanc = _this.httpBaseInstance.interceptors.response).use.apply(_this$httpBaseInstanc, _toConsumableArray(interceptor));
        });
      }

      this.httpBaseInstance.interceptors.response.use( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
          var res;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.config.responseInterceptor[0](config, _this.config, _this.source.cancel);

                case 2:
                  res = _context2.sent;
                  return _context2.abrupt("return", res);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.responseInterceptor[1](err, _this.config, _this.source.cancel);
      });
      this.initSource();
    } // 返回请求基类的实例 目前基类使用的是axios

  }, {
    key: "getHttpBaseInstance",
    value: function getHttpBaseInstance() {
      return this.httpBaseInstance;
    }
  }, {
    key: "get",
    value: function get(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.send('get', url, data, config);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.send('post', url, data, config);
    }
  }, {
    key: "send",
    value: function send(method, url, data) {
      var _this2 = this;

      var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var params = data;
      return new Promise(function (resolve, reject) {
        if (['post', 'put', 'patch'].includes(method)) {
          // 兼容 { params:{} } 格式
          var _paramsData;

          if (params && params.params && fn.isPlainObject(params.params)) {
            _paramsData = params.params;
            delete params.params;
            config = _objectSpread(_objectSpread({}, config), params);
          } else {
            _paramsData = params;
          }

          _this2.httpBaseInstance[method](url, _paramsData, _objectSpread(_objectSpread({}, config), {}, {
            cancelToken: _this2.source.token
          })).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else if (['get', 'delete', 'head'].includes(method)) {
          _this2.httpBaseInstance[method](url, _objectSpread(_objectSpread({}, paramsData), {}, {
            cancelToken: _this2.source.token
          }, config)).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else {
          reject(new Error('请求方法不正确!'));
        }
      });
    }
  }]);

  return HttpClient;
}();

export default HttpClient;