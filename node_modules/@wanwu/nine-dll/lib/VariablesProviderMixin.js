function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

export default {
  data: function data() {
    return {
      variables: {}
    };
  },
  provide: function provide() {
    return {
      variables: this.variables,
      variableChange: this.variableChange
    };
  },
  created: function created() {
    this.initVariables();
  },
  watch: {
    varConfig: {
      handler: function handler() {
        // console.log('............')
        // this.$nextTick(() => {
        this.initVariables(); // })
      },
      deep: true
    }
  },
  methods: {
    initVariables: function initVariables() {
      // const data = {}
      var currentData = this.variables;

      if (this.varConfig) {
        var entries = Object.entries(this.varConfig);

        for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
          var _entries$_i = _slicedToArray(_entries[_i], 2),
              k = _entries$_i[0],
              v = _entries$_i[1];

          // data[k] = currentData && currentData[k] ? currentData[k] : v.default
          this.$set(this.variables, k, currentData && currentData[k] ? currentData[k] : v["default"]);
        }
      } // this.variables = data

    },
    variableChange: function variableChange(key, value) {
      if (!this.variables[key]) {
        console.warn('variable key mismatch, should check config');
      }

      this.$set(this.variables, key, value); // [key] = value
    }
  } // render() {
  //     console.log(this);
  //     return this.$slots.default;
  // },

};