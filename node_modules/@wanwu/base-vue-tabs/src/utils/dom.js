function isWindow(val) {
    return val === window;
}

// 获取元素高
export function getVisibleHeight(el) {
    if (isWindow(el)) {
        return el.innerHeight;
    }
    const {
        height, bottom, top,
    } = el.getBoundingClientRect();
    return height || bottom - top;
}

// 获取元素上边距视窗的位置
export function getVisibleTop(el) {
    if (isWindow(el)) {
        return 0;
    }
    return el.getBoundingClientRect().top;
}

// 获取元素bottom
export function getVisibleBottom(el) {
    if (isWindow(el)) {
        return 0;
    }
    return el.getBoundingClientRect().bottom;
}

// 获取页面滚动位置
export function getRootScrollTop() {
    return (
        window.pageYOffset ||
        document.documentElement.scrollTop ||
        document.body.scrollTop ||
        0
    );
}

// 获取元素上边距页面顶部距离
export function getElementTop(el) {
    if (isWindow(el)) {
        return 0;
    }

    const scrollTop = getRootScrollTop();
    return el.getBoundingClientRect().top + scrollTop;
}

// 设置页面滚动位置
export function setRootScrollTop(value) {
    setScrollTop(window, value);
    setScrollTop(document.body, value);
}

// 设置元素滚动位置
export function setScrollTop(el, value) {
    if ('scrollTop' in el) {
        el.scrollTop = value;
    } else {
        el.scrollTo(el.scrollX, value);
    }
}

// 横向滚动动画
export function scrollLeftTo(scroller, to, duration, scrollLeftRafId) {
    window.cancelAnimationFrame(scrollLeftRafId);
    let count = 0;
    const from = scroller.scrollLeft;
    const frames = duration === 0 ? 1 : Math.round((duration * 1000) / 24);
    function animate() {
        scroller.scrollLeft += (to - from) / frames;
        if (++count < frames) {
            return window.requestAnimationFrame(animate);
        }
    }
    return animate();
}

// 竖向滚动动画
export function scrollTopTo(to, duration, callback, scrollTopRafId) {
    window.cancelAnimationFrame(scrollTopRafId);

    let current = getRootScrollTop();

    const isDown = current < to;
    const frames = duration === 0 ? 1 : Math.round((duration * 1000) / 16);
    const step = (to - current) / frames;

    function animate() {
        current += step;
        if ((isDown && current > to) || (!isDown && current < to)) {
            current = to;
        }
        setRootScrollTop(current);
        if ((isDown && current < to) || (!isDown && current > to)) {
            return window.requestAnimationFrame(animate);
        } else if (callback) {
            callback();
        }
    }
    return animate();
}
