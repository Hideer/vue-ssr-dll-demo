'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.function.name');
require('core-js/modules/es.array.concat');
require('core-js/modules/es.array.filter');
require('core-js/modules/es.array.for-each');
require('core-js/modules/es.string.fixed');
require('core-js/modules/web.dom-collections.for-each');
require('core-js/modules/web.timers');
require('regenerator-runtime/runtime');
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/esm/asyncToGenerator'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var eventUtils = require('@wanwu/event-utils');
var mixinTouch = _interopDefault(require('@wanwu/base-vue-mixin-touch'));
require('core-js/modules/es.number.constructor');
var Popup = _interopDefault(require('@wanwu/base-vue-popup'));
var vueRuntimeHelpers = require('@wanwu/vue-runtime-helpers');
require('core-js/modules/es.array.index-of');
require('core-js/modules/es.array.splice');

var mixinProps = {
  props: {
    value: [String, Number],
    shouldAnimate: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number,
      "default": 0.3
    },
    sticky: {
      type: Boolean,
      "default": false
    },
    tabHeight: {
      type: Number,
      "default": 0
    },
    // 单位rem（fixed定位时）
    top: {
      type: Number,
      "default": 0
    },
    // 滚动阈值，标签数量超过阈值时开始横向滚动
    swipeThreshold: {
      type: [Number, String],
      "default": 4
    },
    // 滑动切换标签页
    swipeable: {
      type: Boolean,
      "default": false
    },
    // 内容切换动画
    animated: {
      type: Boolean,
      "default": false
    },
    // 样式风格类型，可选值为card,icon
    type: {
      type: String,
      "default": 'line'
    },
    // 标签栏样式
    customTabbarStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    // 标签样式
    customTabStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    // 选中样式
    customActiveStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    // 下划线样式
    customLineStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    // 是否自动填充吸顶时content的高度
    fillScreen: {
      type: Boolean,
      "default": false
    },
    // 距离页面指定到的距离时候吸顶
    offsetTop: {
      type: Number,
      "default": 0
    },
    // 是否要开启延迟切换
    delay: {
      type: Boolean,
      "default": false
    },
    // icon类型的图片样式
    iconStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    showAll: {
      type: Boolean,
      "default": false
    },
    showAllStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    fixed: {
      type: Boolean,
      "default": false
    },
    // 标签宽度自适应
    tabAutoWidth: {
      type: Boolean,
      "default": false
    },
    // type === 'newModel' 使用默认下划线插槽
    useSlotLine: {
      type: Boolean,
      "default": true
    },
    // 滚动导航
    scrollspy: {
      type: Boolean,
      "default": false
    },
    // 隐藏bar
    hiddenBar: {
      type: [Boolean, String],
      "default": ''
    },
    // 是否开启滚动导航动画
    scrollspyAnimate: {
      type: Boolean,
      "default": true
    },
    // 保持吸顶，不跟随内容模块移出视图
    isStickyAlways: {
      type: Boolean,
      "default": false
    },
    // 吸顶状态消失时标签栏动画
    tabbarAnimate: {
      type: Boolean,
      "default": true
    },
    splitLine: {
      type: [Boolean, undefined],
      "default": undefined
    },
    // tab切换时滚动条是否自动滚动到顶部
    scrollToTopOnChange: {
      type: Boolean,
      "default": true
    },
    // change前调用
    // @return {Promise | Boolean}
    beforeChange: {
      type: Function
    }
  }
};

var script = {
  name: 'TabsAllPopup',
  components: {
    Popup: Popup
  },
  props: {
    value: {
      type: Boolean
    },
    active: {
      type: [Number, String],
      "default": 0
    },
    list: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    top: {
      type: Number,
      "default": 0
    },
    customStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    }
  },
  watch: {
    value: function value(val) {
      if (val) {
        document.documentElement.style.overflow = 'hidden';
      } else {
        document.documentElement.style.overflow = '';
      }
    }
  },
  methods: {
    onPopInput: function onPopInput() {
      for (var _len = arguments.length, argvs = new Array(_len), _key = 0; _key < _len; _key++) {
        argvs[_key] = arguments[_key];
      }

      this.$emit.apply(this, ['input'].concat(argvs));
    }
  }
};

var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "compoment__AllPopup AllPopup"
  }, [_c('Popup', {
    attrs: {
      "value": _vm.value,
      "overlay": true,
      "position": "top",
      "overlay-style": {
        top: _vm.top + 'px'
      },
      "slot-style": {
        top: _vm.top + 'px',
        overflow: 'hidden'
      }
    },
    on: {
      "input": _vm.onPopInput
    }
  }, [_c('div', {
    staticClass: "popup flex f-fd-r f-fw-w",
    style: _vm.customStyle.popupStyle
  }, _vm._l(_vm.list, function (item, index) {
    return _c('div', {
      key: index,
      "class": _vm.active === item.name ? 'popup__item popup__item--active' : 'popup__item',
      style: [_vm.customStyle.tabStyle, _vm.active === item.name ? _vm.customStyle.tabActiveStyle : {}],
      on: {
        "click": function click($event) {
          return _vm.$emit('change', {
            item: item,
            index: index
          });
        }
      }
    }, [_vm._v("\n                " + _vm._s(item.label) + "\n            ")]);
  }), 0)])], 1);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-dee7630c_0", {
    source: ".compoment__AllPopup[data-v-dee7630c]{position:relative;z-index:1001}.compoment__AllPopup .popup__icon[data-v-dee7630c]{height:.88rem;padding:0 .28rem;background-color:#fff;display:flex;align-items:center;justify-content:flex-end}.compoment__AllPopup .popup__icon i[data-v-dee7630c]{font-size:.48rem;font-weight:500;line-height:.88rem}.compoment__AllPopup .popup[data-v-dee7630c]{background-color:#fff;padding:.88rem .19rem .2rem}.compoment__AllPopup .popup .popup__item[data-v-dee7630c]{width:1.6rem;height:.72rem;line-height:.72rem;background:#f4f5f5;border-radius:.04rem;border:.02rem solid #eaeaeb;font-size:.28rem;text-align:center;font-weight:400;color:#2e333b;margin:0 .09rem .28rem}.compoment__AllPopup .popup .popup__item--active[data-v-dee7630c]{background:#fbe9eb;font-weight:500;color:#cf142b;border:.01rem solid rgba(207,20,43,.1)}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-dee7630c";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, vueRuntimeHelpers.createInjector, undefined, undefined);

function isWindow(val) {
  return val === window;
} // 获取元素高


function getVisibleHeight(el) {
  if (isWindow(el)) {
    return el.innerHeight;
  }

  var _el$getBoundingClient = el.getBoundingClientRect(),
      height = _el$getBoundingClient.height,
      bottom = _el$getBoundingClient.bottom,
      top = _el$getBoundingClient.top;

  return height || bottom - top;
} // 获取元素上边距视窗的位置

function getVisibleTop(el) {
  if (isWindow(el)) {
    return 0;
  }

  return el.getBoundingClientRect().top;
} // 获取元素bottom

function getVisibleBottom(el) {
  if (isWindow(el)) {
    return 0;
  }

  return el.getBoundingClientRect().bottom;
} // 获取页面滚动位置

function getRootScrollTop() {
  return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
} // 获取元素上边距页面顶部距离

function getElementTop(el) {
  if (isWindow(el)) {
    return 0;
  }

  var scrollTop = getRootScrollTop();
  return el.getBoundingClientRect().top + scrollTop;
} // 设置页面滚动位置

function setRootScrollTop(value) {
  setScrollTop(window, value);
  setScrollTop(document.body, value);
} // 设置元素滚动位置

function setScrollTop(el, value) {
  if ('scrollTop' in el) {
    el.scrollTop = value;
  } else {
    el.scrollTo(el.scrollX, value);
  }
} // 横向滚动动画

function scrollLeftTo(scroller, to, duration, scrollLeftRafId) {
  window.cancelAnimationFrame(scrollLeftRafId);
  var count = 0;
  var from = scroller.scrollLeft;
  var frames = duration === 0 ? 1 : Math.round(duration * 1000 / 24);

  function animate() {
    scroller.scrollLeft += (to - from) / frames;

    if (++count < frames) {
      return window.requestAnimationFrame(animate);
    }
  }

  return animate();
} // 竖向滚动动画

function scrollTopTo(to, duration, callback, scrollTopRafId) {
  window.cancelAnimationFrame(scrollTopRafId);
  var current = getRootScrollTop();
  var isDown = current < to;
  var frames = duration === 0 ? 1 : Math.round(duration * 1000 / 16);
  var step = (to - current) / frames;

  function animate() {
    current += step;

    if (isDown && current > to || !isDown && current < to) {
      current = to;
    }

    setRootScrollTop(current);

    if (isDown && current < to || !isDown && current > to) {
      return window.requestAnimationFrame(animate);
    } else if (callback) {
      callback();
    }
  }

  return animate();
}

var script$1 = {
  name: 'Tabs',
  components: {
    AllPopup: __vue_component__
  },
  mixins: [mixinTouch, mixinProps],
  data: function data() {
    return {
      currentValue: this.value,
      navList: [],
      lineStyle: {},
      events: {},
      barStyle: {},
      navObj: {},
      minHeight: null,
      allPopupShow: false,
      popupTop: 0,
      barHeight: 0,
      scrollLeftRafId: 0,
      scrollTopRafId: 0,
      lineTimer: null,
      clikTimer: null
    };
  },
  computed: {
    showAllBgStyle: function showAllBgStyle() {
      if (this.showAllStyle && this.showAllStyle.bgColor) {
        var bgColor = this.showAllStyle.bgColor;

        if (bgColor instanceof Array) {
          return "background: linear-gradient(to left, ".concat(bgColor[0], " 80%, ").concat(bgColor[1], ")");
        } else {
          return "background: linear-gradient(to left, ".concat(bgColor, " 80%, transparent)");
        }
      }

      return '';
    },
    containerStyle: function containerStyle() {
      var style = {};

      if ((this.fixed || this.barStyle.position === 'fixed' || this.barStyle.position === 'absolute') && !(typeof this.hiddenBar === 'boolean')) {
        style.paddingTop = (this.tabHeight / 100 * window.computedRem || this.barHeight) + 'px';
      }

      return style;
    },
    fixedStyle: function fixedStyle() {
      if (this.fixed) {
        return {
          width: '100%',
          position: 'fixed',
          top: this.offsetTopPx + 'px',
          zIndex: 1000
        };
      }

      return {};
    },
    scrollable: function scrollable() {
      return this.navList.length > this.swipeThreshold;
    },
    tabStyle: function tabStyle() {
      var style = {};

      if (this.scrollable && !this.tabAutoWidth) {
        style.flexBasis = "".concat(88 / this.swipeThreshold, "%");
      }

      if (this.tabAutoWidth) {
        style.flex = '0';
      }

      return style;
    },
    listeners: function listeners() {
      if (this.swipeable) {
        return {
          touchstart: this.touchStart,
          touchmove: this.onTouchMove,
          touchend: this.onTouchEnd,
          touchcancel: this.onTouchEnd
        };
      }

      return {};
    },
    contentStyle: function contentStyle() {
      if (this.animated) {
        return {
          left: "".concat(-1 * this.navObj[this.currentValue] * 100, "%"),
          // transform: `translate3d(${-1 * this.navObj[this.currentValue] * 100}%, 0, 0)`,
          transitionDuration: "".concat(this.duration, "s")
        };
      }

      return {};
    },
    currentIndex: function currentIndex() {
      return this.navObj[this.currentValue];
    },
    offsetTopPx: function offsetTopPx() {
      return this.top * window.computedRem || ((window.appHeaderHeight || 0) + (this.offsetTop || 0) / 100) * window.computedRem;
    },
    scrollOffset: function scrollOffset() {
      return this.offsetTopPx + this.barHeight;
    }
  },
  watch: {
    value: function value(val) {
      this.currentValue = val;
    },
    currentValue: function currentValue(name) {
      this.updateStatus();
      this.scrollIntoView();
      this.setLine();
      this.getMinHeight();
      this.changeScroll();
      this.$emit('input', name);
      this.$emit('change', name);
    },
    navList: function navList() {
      var _this2 = this;

      this.setLine();
      this.$nextTick(function () {
        _this2.scrollIntoView(true);
      });
    }
  },
  mounted: function mounted() {
    this.onShow();
  },
  activated: function activated() {
    this.onShow();
    this.setLine();
  },
  deactivated: function deactivated() {
    this.handlers(false);
    this.clearComponentTimer();
  },
  beforeDestroy: function beforeDestroy() {
    this.handlers(false);
    this.clearComponentTimer();
  },
  methods: {
    setCurrentValue: function () {
      var _setCurrentValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newValue) {
        var result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(newValue === this.currentValue)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", false);

              case 2:
                if (!(this.beforeChange && typeof this.beforeChange === 'function')) {
                  _context.next = 14;
                  break;
                }

                _context.prev = 3;
                _context.next = 6;
                return this.beforeChange(newValue, this.currentValue);

              case 6:
                result = _context.sent;
                _context.next = 12;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](3);
                result = false;

              case 12:
                if (!(result === false)) {
                  _context.next = 14;
                  break;
                }

                return _context.abrupt("return", false);

              case 14:
                this.currentValue = newValue;
                return _context.abrupt("return", true);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 9]]);
      }));

      function setCurrentValue(_x) {
        return _setCurrentValue.apply(this, arguments);
      }

      return setCurrentValue;
    }(),
    swipeToNextTab: function () {
      var _swipeToNextTab = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(step) {
        var currentIndex, changeResult;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(step === 0)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                currentIndex = this.navObj[this.currentValue];
                currentIndex += step;

              case 4:
                if (!(currentIndex >= 0 && currentIndex <= this.navList.length - 1)) {
                  _context2.next = 13;
                  break;
                }

                _context2.next = 7;
                return this.setCurrentValue(this.navList[currentIndex].name);

              case 7:
                changeResult = _context2.sent;

                if (!changeResult) {
                  _context2.next = 10;
                  break;
                }

                return _context2.abrupt("break", 13);

              case 10:
                currentIndex += step;
                _context2.next = 4;
                break;

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function swipeToNextTab(_x2) {
        return _swipeToNextTab.apply(this, arguments);
      }

      return swipeToNextTab;
    }(),
    clearComponentTimer: function clearComponentTimer() {
      if (this.lineTimer) {
        clearTimeout(this.lineTimer);
        this.lineTimer = null;
      }

      if (this.clikTimer) {
        clearTimeout(this.clikTimer);
        this.clikTimer = null;
      }
    },
    // 滚动到选中模块的顶部
    changeScroll: function changeScroll() {
      if (!this.scrollspy && this.barStyle.position === 'fixed' && this.scrollToTopOnChange) {
        // + 1 为了防止fixed状态消失，当 containerTop = this.offsetTopPx 时
        setRootScrollTop(Math.ceil(getElementTop(this.$el) - this.offsetTopPx) + 1);
      }
    },
    scrollToCurrentContent: function scrollToCurrentContent(index, isCheck) {
      var _this3 = this;

      var content = this.$refs.content;

      if (this.scrollspy && content) {
        var target = content.childNodes[this.currentIndex];

        if (target) {
          var to = Math.ceil(getElementTop(target) - this.scrollOffset) + 1;
          this.lockScroll = true;
          var duration = this.duration;

          if (isCheck || !this.scrollspyAnimate) {
            duration = 0;
          }

          this.scrollTopRafId = scrollTopTo(to, duration, function () {
            if (isCheck) {
              _this3.lockScroll = false;
            } else {
              _this3.checkIndex(index);
            }
          }, this.scrollTopRafId);
        }
      }
    },
    // 检查滚动动画完成后定位的index
    checkIndex: function checkIndex(index) {
      var current = this.getCurrentIndexOnScroll();

      if (current !== index) {
        this.scrollToCurrentContent(index, true);
      } else {
        this.lockScroll = false;
      }
    },
    getCurrentIndexOnScroll: function getCurrentIndexOnScroll() {
      var _this$$refs = this.$refs,
          content = _this$$refs.content,
          bar = _this$$refs.bar;
      if (!content || !bar) return;
      var children = content.childNodes;

      for (var index = 0; index < children.length; index++) {
        if (getVisibleTop(children[index]) > this.scrollOffset) {
          return index === 0 ? 0 : index - 1;
        }
      }

      return children.length - 1;
    },
    getTabs: function getTabs() {
      // 获取pane
      return this.$children.filter(function (item) {
        return item.$options.name === 'TabsPane';
      });
    },
    updateNav: function updateNav() {
      // 获取标题，name,并放置到navList数组中
      var list = [];
      this.navObj = {};

      var _this = this;

      this.getTabs().forEach(function (pane, index) {
        list.push({
          label: pane.label,
          name: pane.name || index,
          iconImage: pane.iconImage || '',
          iconFont: pane.iconFont || '',
          isClick: pane.isClick
        });
        _this.navObj[pane.name || index] = index;
        if (!pane.name) pane.name = index;

        if (index === 0) {
          if (!_this.currentValue) {
            _this.currentValue = pane.name || index; // _this.currentIndex = index;
          }
        }
      });
      this.navList = list;
      this.updateStatus();
    },
    updateStatus: function updateStatus() {
      var tabs = this.getTabs();

      var _this = this;

      tabs.forEach(function (tab) {
        if (_this.animated || _this.scrollspy) {
          tab.show = true;
        } else {
          var b = tab.name === _this.currentValue;
          tab.show = b;
        } // return tab.show;

      });
    },
    // update nav bar style
    // retryCnt 重试次数
    setLine: function setLine() {
      var _this4 = this;

      var retryCnt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.type === 'card' || this.type === 'icon') {
        return;
      }

      var shouldAnimate = this.shouldAnimate;
      this.$nextTick(function () {
        var _this4$$refs = _this4.$refs,
            tabs = _this4$$refs.tabs,
            line = _this4$$refs.line;

        if (!tabs || !tabs[_this4.navObj[_this4.currentValue]]) {
          return;
        }

        var tab = tabs[_this4.navObj[_this4.currentValue]];
        var tabContent = tab.getElementsByClassName('tabs-label--content')[0];
        var width = tab.offsetWidth / 2;

        if (line) {
          width = line.offsetWidth;
        } else if (tabContent) {
          width = tabContent.offsetWidth;
        }

        var left = tab.offsetLeft + (tab.offsetWidth - width) / 2; // 解决安卓客户端 webview 没有宽度时渲染页面导致下划线定位不准确问题（重试一次）

        if (!document.body.offsetWidth && retryCnt < 1) {
          _this4.lineTimer = setTimeout(function () {
            retryCnt++;

            _this4.setLine(retryCnt);
          }, 100);
          return;
        }

        var lineStyle = {
          width: width + 'px',
          transform: "translateX(".concat(left, "px)")
        };

        if (shouldAnimate) {
          lineStyle.transitionDuration = "".concat(_this4.duration, "s");
        }

        _this4.lineStyle = lineStyle;
      });
    },
    handleClick: function handleClick(index) {
      var _this5 = this;

      var nav = this.navList[index];

      if (nav.isClick) {
        var name = nav.name;
        this.$emit('click', name);

        if (name !== this.currentValue) {
          if (this.delay) {
            this.clikTimer = setTimeout(function () {
              // this.currentValue = name;
              _this5.setCurrentValue(name).then(function (changeResult) {
                changeResult && _this5.scrollToCurrentContent(index);
              });
            }, 300);
          } else {
            // this.currentValue = name;
            this.setCurrentValue(name).then(function (changeResult) {
              changeResult && _this5.scrollToCurrentContent(index);
            });
          }
        }
      }
    },
    getMinHeight: function getMinHeight() {
      if (!this.fillScreen) return;
      var bar = this.$refs.bar;
      var screenHeight = window.screen.availHeight;
      this.minHeight = screenHeight - getVisibleBottom(bar) + 1 + 'px';
    },
    handlers: function handlers(bind) {
      var events = this.events;

      if (events.resize !== bind) {
        events.resize = bind;
        (bind ? eventUtils.on : eventUtils.off)(window, 'resize', this.setLine, true);
      }

      if (this.sticky || this.scrollspy) {
        if (events.scroll !== bind) {
          events.scroll = bind;
          (bind ? eventUtils.on : eventUtils.off)(window, 'scroll', this.onScoll, true);
        }
      }
    },
    onScoll: function onScoll() {
      if (this.scrollspy && !this.lockScroll) {
        var currentIndex = this.getCurrentIndexOnScroll();
        this.currentValue = this.navList[currentIndex].name;
      }

      var container = this.$refs.container;
      if (!this.sticky || !container) return; // 吸顶时距离页面顶部高度

      var containerBottom = getVisibleBottom(container);
      var containerTop = getVisibleTop(container);
      var condition = this.isStickyAlways ? containerTop < this.offsetTopPx : containerTop < this.offsetTopPx && containerBottom > this.offsetTopPx;

      if (condition) {
        var barStyle = {
          position: 'fixed',
          top: this.offsetTopPx + 'px'
        };

        if (this.tabbarAnimate) {
          var transform = -(this.barHeight - (containerBottom - this.offsetTopPx));

          if (transform < 0 && !this.isStickyAlways) {
            barStyle.transform = "translate3d(0, ".concat(transform, "px, 0)");
          }
        }

        this.barStyle = barStyle;
        this.$emit('onFixed', true);
      } else {
        this.barStyle = {};
        this.$emit('onFixed', false);
      }
    },
    onShow: function onShow() {
      var _this6 = this;

      this.handlers(true);
      this.$nextTick(function () {
        _this6.barHeight = getVisibleHeight(_this6.$refs.bar);

        _this6.scrollIntoView(true);
      });
    },
    renderTitle: function renderTitle(el, index) {
      var _this7 = this;

      this.$nextTick(function () {
        var tab = _this7.$refs.tabs[index];
        tab.parentNode.replaceChild(el, tab);
        _this7.$refs.tabs[index] = el;
      });
    },
    // scroll active tab into view
    scrollIntoView: function scrollIntoView(immediate) {
      var tabWraps = this.$refs.tabWraps;

      if (!this.scrollable || !tabWraps || !tabWraps[this.navObj[this.currentValue]]) {
        return;
      }

      var barbody = this.$refs.barbody;
      var tab = tabWraps[this.navObj[this.currentValue]];
      var to = tab.offsetLeft - (barbody.offsetWidth - tab.offsetWidth) / 2;
      this.scrollLeftRafId = scrollLeftTo(barbody, to, immediate ? 0 : +this.duration, this.scrollLeftRafId);
    },
    onTouchMove: function onTouchMove(event) {
      if (!this.swipeable) return;
      this.touchMove(event);

      if (this.direction === 'horizontal') {
        event.preventDefault();
        event.stopPropagation();
      }
    },
    onTouchEnd: function onTouchEnd() {
      var deltaX = this.deltaX,
          currentValue = this.currentValue;
      var currentIndex = this.navObj[currentValue];

      if (this.direction === 'horizontal') {
        if (deltaX > 0 && currentIndex !== 0) {
          this.swipeToNextTab(-1); // this.currentValue = this.navList[currentIndex - 1].name;
        } else if (deltaX < 0 && currentIndex !== this.navList.length - 1) {
          this.swipeToNextTab(1); // this.currentValue = this.navList[currentIndex + 1].name;
        }
      }
    },
    showAllClick: function showAllClick() {
      var bar = this.$refs.bar;
      this.popupTop = getVisibleTop(bar);
      this.allPopupShow = !this.allPopupShow;
    },
    allTabsChange: function allTabsChange(_ref) {
      var _this8 = this;

      var item = _ref.item,
          index = _ref.index;
      // this.currentValue = item.name;
      this.setCurrentValue(item.name).then(function (changeResult) {
        if (changeResult) {
          _this8.scrollToCurrentContent();

          _this8.allPopupShow = false;
        }
      });
    }
  }
};

var __vue_script__$1 = script$1;
/* template */

var __vue_render__$1 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    ref: "container",
    staticClass: "component__tabs tabs",
    "class": {
      'tabs-relative': _vm.sticky,
      'tabs-card': _vm.type === 'card',
      'tabs-new': _vm.type === 'newModel',
      'tabs-icon': _vm.type === 'icon'
    },
    style: [_vm.containerStyle]
  }, [_c('div', {
    ref: "bar",
    staticClass: "tabs-bar",
    "class": [typeof _vm.hiddenBar === 'boolean' ? 'will_hiddenBar' : '', _vm.hiddenBar ? 'hiddenBar' : '', _vm.showAll ? 'tabs-bar-showall' : ''],
    style: [_vm.barStyle, _vm.fixedStyle, _vm.customTabbarStyle]
  }, [_vm._t("nav-left"), _vm._v(" "), _c('div', {
    ref: "barbody",
    staticClass: "tabs-tab-wrap",
    "class": {
      'scrollable': _vm.scrollable,
      'tab-autoWidth': _vm.tabAutoWidth
    }
  }, [_vm._l(_vm.navList, function (item, index) {
    return _c('div', {
      key: item.name + '' + index,
      ref: "tabWraps",
      refInFor: true,
      staticClass: "tabs-tab",
      "class": {
        'split-line': _vm.splitLine || _vm.type === 'icon' && _vm.splitLine === undefined,
        'tabs-tab-active': item.name === _vm.currentValue
      },
      style: [_vm.tabStyle, _vm.customTabStyle, item.name === _vm.currentValue ? _vm.customActiveStyle : {}],
      on: {
        "click": function click($event) {
          return _vm.handleClick(index);
        }
      }
    }, [_vm.type === 'icon' ? _c('div', {
      ref: "tabs",
      refInFor: true,
      staticClass: "tabs-label"
    }, [_c('div', {
      staticClass: "tabs-label--content flex f-ai-c"
    }, [_c('div', {
      staticClass: "icon__wrap"
    }, [item.iconImage ? _c('img', {
      style: _vm.iconStyle,
      attrs: {
        "src": item.iconImage
      }
    }) : _vm._e(), _vm._v(" "), item.iconFont ? _c('i', {
      "class": item.iconFont,
      style: _vm.iconStyle
    }) : _vm._e()]), _vm._v(" "), _c('div', {
      staticClass: "label"
    }, [_vm._v("\n                            " + _vm._s(item.label) + "\n                        ")])])]) : _c('div', {
      ref: "tabs",
      refInFor: true,
      staticClass: "tabs-label"
    }, [_c('div', {
      staticClass: "tabs-label--content"
    }, [_vm._v("\n                        " + _vm._s(item.label) + "\n                    ")])])]);
  }), _vm._v(" "), (_vm.$slots.line || _vm.useSlotLine && _vm.type === 'newModel') && (_vm.type === 'line' || _vm.type === 'newModel') ? _c('div', {
    ref: "line",
    staticClass: "tabs-bar--line-position",
    style: [_vm.lineStyle, _vm.customLineStyle]
  }, [_vm._t("line", [_vm._m(0)])], 2) : _vm.type === 'line' || _vm.type === 'newModel' ? _c('div', {
    staticClass: "tabs-bar--line-position tabs-bar--line",
    style: [_vm.lineStyle, _vm.customLineStyle]
  }) : _vm._e(), _vm._v(" "), _vm.showAll ? _c('div', {
    staticClass: "showAllOccupying",
    style: _vm.showAllStyle.customIconStyle
  }) : _vm._e()], 2), _vm._v(" "), _vm._t("nav-right"), _vm._v(" "), _vm.showAll ? _c('div', {
    staticClass: "arrow__wrap",
    style: _vm.showAllStyle.customIconStyle
  }, [!_vm.showAllStyle.hiddenBg ? _c('div', {
    staticClass: "arrow__bg",
    style: _vm.showAllBgStyle
  }) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "arrow__wrap--click",
    style: _vm.allPopupShow ? 'z-index: 1002;' : '',
    on: {
      "click": _vm.showAllClick
    }
  }, [_vm._t("show-all", [_c('div', {
    staticClass: "arrow__icon"
  }, [_c('i', {
    "class": "WWDZ " + (_vm.showAllStyle.iconFont || 'ww-icon-xiala'),
    style: _vm.allPopupShow ? 'transform: rotate(180deg);' : 'transform: rotate(0deg);'
  })])])], 2), _vm._v(" "), _c('AllPopup', {
    attrs: {
      "list": _vm.navList,
      "active": _vm.currentValue,
      "top": _vm.popupTop,
      "custom-style": _vm.showAllStyle.customPopupStyle
    },
    on: {
      "change": _vm.allTabsChange
    },
    model: {
      value: _vm.allPopupShow,
      callback: function callback($$v) {
        _vm.allPopupShow = $$v;
      },
      expression: "allPopupShow"
    }
  })], 1) : _vm._e()], 2), _vm._v(" "), _c('div', _vm._g({
    ref: "content",
    staticClass: "tabs-content",
    "class": [_vm.animated ? 'tabs-content--animated' : '', _vm.type === 'icon' ? 'tabs-cardContent' : ''],
    style: {
      minHeight: _vm.fillScreen ? _vm.minHeight : null
    }
  }, _vm.listeners), [_vm.animated ? _c('div', {
    staticClass: "tabs-content--animated--wrap",
    style: _vm.contentStyle
  }, [_vm._t("default")], 2) : _vm._t("default")], 2)]);
};

var __vue_staticRenderFns__$1 = [function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "line__slot"
  }, [_c('i', {
    staticClass: "WWDZ ww-icon-xuanzhong"
  })]);
}];
/* style */

var __vue_inject_styles__$1 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-f8e6fe9e_0", {
    source: ".component__tabs.tabs-relative[data-v-f8e6fe9e]{position:relative}.component__tabs .tabs-bar[data-v-f8e6fe9e]{display:flex;position:relative;width:100%;background:#fff;border-bottom:.02rem solid #f8f8f8;z-index:1000;box-sizing:border-box}.component__tabs .tabs-bar .tabs-tab-wrap[data-v-f8e6fe9e]{position:relative;overflow-x:auto;display:flex;height:100%;width:100%}.component__tabs .tabs-bar .tabs-tab-wrap[data-v-f8e6fe9e]::-webkit-scrollbar{display:none}.component__tabs .tabs-bar--line-position[data-v-f8e6fe9e]{z-index:1000;left:0;bottom:0;position:absolute;will-change:transform;color:#cf142b}.component__tabs .tabs-bar--line[data-v-f8e6fe9e]{height:.04rem;border-radius:.03rem;background-color:#ea3131}.component__tabs .tabs-bar .line__slot[data-v-f8e6fe9e]{height:.09rem;display:flex;align-items:center;justify-content:center;transform:scale(.25);transform-origin:center bottom;margin-bottom:.1rem}.component__tabs .tabs-bar .line__slot .ww-icon-xuanzhong[data-v-f8e6fe9e]{font-size:.24rem}.component__tabs .will_hiddenBar[data-v-f8e6fe9e]{position:fixed}.component__tabs .hiddenBar[data-v-f8e6fe9e]{opacity:0;pointer-events:none}.component__tabs .tabs-bar-showall[data-v-f8e6fe9e]{position:static}.component__tabs .tabs-tab[data-v-f8e6fe9e]{display:flex;align-items:center;justify-content:center;flex:1;font-size:.26rem;font-weight:400;color:#9b9b9b;line-height:.8rem}.component__tabs .tabs-tab .tabs-label[data-v-f8e6fe9e]{display:flex;align-items:center;justify-content:center;padding:0 .1rem;white-space:nowrap;overflow:hidden}.component__tabs .split-line[data-v-f8e6fe9e]{position:relative}.component__tabs .split-line[data-v-f8e6fe9e]:not(:last-child)::after{content:' ';width:.02rem;height:.24rem;background:#eaeaeb;position:absolute;right:0;top:50%;transform:translateY(-50%)}.component__tabs .showAllOccupying[data-v-f8e6fe9e]{width:.84rem;height:.88rem;flex-shrink:0}.component__tabs .scrollable .tabs-tab[data-v-f8e6fe9e]{flex:0 0 22%}.component__tabs .tab-autoWidth[data-v-f8e6fe9e]{padding:0 .1rem}.component__tabs .tab-autoWidth .tabs-tab[data-v-f8e6fe9e]{padding:0 .08rem}.component__tabs .tab-autoWidth .tabs-tab .tabs-label[data-v-f8e6fe9e]{padding:0 .1rem}.component__tabs .tabs-tab-active[data-v-f8e6fe9e]{font-weight:600;color:#ea3131}.component__tabs .tabs-cardContent[data-v-f8e6fe9e]{padding:0}.component__tabs .tabs-content--animated[data-v-f8e6fe9e]{width:100%;overflow:hidden}.component__tabs .tabs-content--animated .tabs-content--animated--wrap[data-v-f8e6fe9e]{display:flex;will-change:left;position:relative}.component__tabs .tabs-content--animated .tabsPane[data-v-f8e6fe9e]{width:100%;flex-shrink:0}.component__tabs .arrow__wrap[data-v-f8e6fe9e]{position:absolute;width:.84rem;height:.88rem;right:0}.component__tabs .arrow__wrap--click[data-v-f8e6fe9e]{position:relative;top:0;right:0;z-index:1000;height:100%}.component__tabs .arrow__bg[data-v-f8e6fe9e]{width:100%;height:100%;background:linear-gradient(to left,#fff 80%,rgba(255,255,255,0));position:absolute;z-index:1000;top:0;right:0}.component__tabs .arrow__icon[data-v-f8e6fe9e]{display:flex;justify-content:center;align-items:center;height:100%;width:100%;position:absolute;top:0;right:0;z-index:1000}.component__tabs .arrow__icon i[data-v-f8e6fe9e]{font-size:.48rem;transition:all .3s}.component__tabs.tabs-new>.tabs-bar .tabs-tab[data-v-f8e6fe9e]{font-size:.32rem;color:#63666c;line-height:.88rem}.component__tabs.tabs-new>.tabs-bar .tabs-tab-active[data-v-f8e6fe9e]{color:#cf142b}.component__tabs.tabs-new>.tabs-bar--line[data-v-f8e6fe9e]{background-color:#cf142b}.component__tabs.tabs-card>.tabs-bar[data-v-f8e6fe9e]{padding:.16rem 0;background-color:transparent;border-bottom:0}.component__tabs.tabs-card>.tabs-bar[data-v-f8e6fe9e]::after{content:\" \";width:.01rem;height:.01rem;flex-shrink:0}.component__tabs.tabs-card>.tabs-bar .tabs-tab[data-v-f8e6fe9e]{font-size:.26rem;height:.64rem;background-color:#fff;border-radius:.04rem;padding:0 .28rem;margin-right:.18rem;line-height:.64rem}.component__tabs.tabs-card>.tabs-bar .tabs-tab .tabs-label[data-v-f8e6fe9e]{padding:0}.component__tabs.tabs-card>.tabs-bar .tabs-tab[data-v-f8e6fe9e]:first-child{margin-left:.28rem}.component__tabs.tabs-card>.tabs-bar .tabs-tab[data-v-f8e6fe9e]:last-child{margin-right:.28rem}.component__tabs.tabs-card>.tabs-bar .tabs-tab-active[data-v-f8e6fe9e]{background-color:#fbe9eb;color:#cf142b;border:.01rem solid #f1bec5}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap[data-v-f8e6fe9e]{border-bottom:0;height:.96rem;line-height:inherit}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab[data-v-f8e6fe9e]{line-height:inherit}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab .tabs-label[data-v-f8e6fe9e]{display:inline-flex;line-height:inherit}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab .tabs-label .icon__wrap[data-v-f8e6fe9e]{width:.34rem;display:flex;justify-content:center;align-items:center;margin-right:.06rem;box-sizing:content-box;opacity:0;transform-origin:left bottom}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab .tabs-label .icon__wrap>img[data-v-f8e6fe9e]{width:100%;height:100%;display:block}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab .tabs-label .label[data-v-f8e6fe9e]{transform:translateX(-.2rem);transition:all .4s}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab-active .tabs-label .icon__wrap[data-v-f8e6fe9e]{opacity:1;transform:scale(1);-webkit-animation:iconMove-data-v-f8e6fe9e .6s;animation:iconMove-data-v-f8e6fe9e .6s}.component__tabs.tabs-icon>.tabs-bar .tabs-tab-wrap .tabs-tab-active .tabs-label .label[data-v-f8e6fe9e]{transform:translateX(0)}@-webkit-keyframes iconMove-data-v-f8e6fe9e{0%{opacity:0;transform:scale(0) rotate(0)}25%{opacity:1;transform:scale(1) rotate(0)}50%{opacity:1;transform:scale(1) rotate(-15deg)}100%{opacity:1;transform:scale(1) rotate(0)}}@keyframes iconMove-data-v-f8e6fe9e{0%{opacity:0;transform:scale(0) rotate(0)}25%{opacity:1;transform:scale(1) rotate(0)}50%{opacity:1;transform:scale(1) rotate(-15deg)}100%{opacity:1;transform:scale(1) rotate(0)}}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$1 = "data-v-f8e6fe9e";
/* module identifier */

var __vue_module_identifier__$1 = undefined;
/* functional template */

var __vue_is_functional_template__$1 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$1 = /*#__PURE__*/vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, vueRuntimeHelpers.createInjector, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$2 = {
  name: 'TabsPane',
  components: {},
  props: {
    name: {
      type: [String, Number]
    },
    label: {
      type: [String, Number],
      "default": ''
    },
    // 传入图片
    iconImage: {
      type: String,
      "default": ''
    },
    // 传入阿里图标
    iconFont: {
      type: String,
      "default": ''
    },
    // 是否可点击
    isClick: {
      type: Boolean,
      "default": true
    }
  },
  data: function data() {
    return {
      show: false
    };
  },
  computed: {
    active: function active() {
      return this.$parent.value === this.name;
    }
  },
  watch: {
    label: function label() {
      this.updateNav();
    },
    iconFont: function iconFont() {
      this.updateNav();
    },
    iconImage: function iconImage() {
      this.updateNav();
    },
    name: function name() {
      this.updateNav();
    },
    isClick: function isClick() {
      this.updateNav();
    }
  },
  mounted: function mounted() {
    // console.log(this.$parent.$slots.default);
    var index = this.$parent.$slots["default"].indexOf(this.$vnode);
    var navList = this.$parent.navList;
    navList.splice(index === -1 ? navList.length : index, 0, this);

    if (this.$slots.tab) {
      this.$parent.renderTitle(this.$refs.tabs, index);
    }

    this.updateNav();
  },
  methods: {
    updateNav: function updateNav() {
      this.$parent.updateNav();
    }
  }
};

/* script */
var __vue_script__$2 = script$2;
/* template */

var __vue_render__$2 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.show,
      expression: "show"
    }],
    staticClass: "component__tabsPane tabsPane"
  }, [_vm._t("default"), _vm._v(" "), _vm.$slots.tab ? _c('div', {
    ref: "tabs",
    staticClass: "tabs-label"
  }, [_c('div', {
    staticClass: "tabs-label--content"
  }, [_vm._t("tab")], 2)]) : _vm._e()], 2);
};

var __vue_staticRenderFns__$2 = [];
/* style */

var __vue_inject_styles__$2 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-438f1dbe_0", {
    source: ".tabs-label--content[data-v-438f1dbe]{display:inline-block}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$2 = "data-v-438f1dbe";
/* module identifier */

var __vue_module_identifier__$2 = undefined;
/* functional template */

var __vue_is_functional_template__$2 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$2 = /*#__PURE__*/vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__$2,
  staticRenderFns: __vue_staticRenderFns__$2
}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, vueRuntimeHelpers.createInjector, undefined, undefined);

__vue_component__$1.install = function (Vue) {
  Vue.component(__vue_component__$1.name, __vue_component__$1);
};

__vue_component__$2.install = function (Vue) {
  Vue.component(__vue_component__$2.name, __vue_component__$2);
};
var index = {
  install: function install(Vue) {
    __vue_component__$1.install(Vue);
    __vue_component__$2.install(Vue);
  },
  Tabs: __vue_component__$1,
  TabsPane: __vue_component__$2
};

exports.Tabs = __vue_component__$1;
exports.TabsPane = __vue_component__$2;
exports.default = index;
