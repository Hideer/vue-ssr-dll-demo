'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.array.includes');
require('core-js/modules/es.function.bind');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.promise');
require('regenerator-runtime/runtime');
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/esm/asyncToGenerator'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/esm/defineProperty'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/esm/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/esm/createClass'));
var httpBase = _interopDefault(require('axios'));
var merge = _interopDefault(require('lodash.merge'));
var baseFn = require('@wanwu/base-fn');
require('core-js/modules/es.array.concat');
require('core-js/modules/es.array.iterator');
require('core-js/modules/es.array.map');
require('core-js/modules/es.date.now');
require('core-js/modules/es.date.to-string');
require('core-js/modules/es.map');
require('core-js/modules/es.object.assign');
require('core-js/modules/es.parse-int');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.string.iterator');
require('core-js/modules/es.string.replace');
require('core-js/modules/esnext.map.delete-all');
require('core-js/modules/esnext.map.every');
require('core-js/modules/esnext.map.filter');
require('core-js/modules/esnext.map.find');
require('core-js/modules/esnext.map.find-key');
require('core-js/modules/esnext.map.includes');
require('core-js/modules/esnext.map.key-of');
require('core-js/modules/esnext.map.map-keys');
require('core-js/modules/esnext.map.map-values');
require('core-js/modules/esnext.map.merge');
require('core-js/modules/esnext.map.reduce');
require('core-js/modules/esnext.map.some');
require('core-js/modules/esnext.map.update');
require('core-js/modules/web.dom-collections.iterator');
require('core-js/modules/web.url');
var mySentry = _interopDefault(require('@wanwu/sentry'));
var encryption = _interopDefault(require('@wanwu/im-encryption'));
var mallWebConfig = require('@wanwu/mall-web-config');
var baseSdkTokenManager = require('@wanwu/base-sdk-token-manager');

var baseOption = {
  base: {
    timeout: 30000,
    headers: {
      'Content-Type': 'application/json'
    }
  },
  getToken: function getToken() {},
  errToast: function errToast() {},
  cbFor401: function cbFor401() {},
  formatErr: function formatErr(err) {
    return err;
  },
  formatRes: function formatRes(data) {
    return data;
  },
  formatData: function formatData(data) {
    return data;
  } // requestInterceptor: [],
  // responseInterceptor: [],

};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var HttpClient = /*#__PURE__*/function () {
  function HttpClient(option) {
    _classCallCheck(this, HttpClient);

    this.config = merge({}, baseOption, option);
    this.httpBaseInstance = null;
    this.CancelToken = httpBase.CancelToken;
    this.initSource = this.initSource.bind(this);
    this.cancel = this.cancel.bind(this);
    this.init();
  } // 设置请求配置


  _createClass(HttpClient, [{
    key: "setOption",
    value: function setOption(option) {
      this.config = merge({}, this.config, option);

      if (option.requestInterceptor || option.responseInterceptor || option.base) {
        this.init();
      }
    }
  }, {
    key: "initSource",
    value: function initSource() {
      this.source = this.CancelToken.source();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.source.cancel();
    }
  }, {
    key: "init",
    value: function init() {
      var _this = this;

      this.httpBaseInstance = httpBase.create(_objectSpread({}, this.config.base)); // 依次执行所有配置里的拦截器方法

      this.httpBaseInstance.interceptors.request.use( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config) {
          var i, len, res;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;

                  if (!(_this.config.requestInterceptor[0] instanceof Array)) {
                    _context.next = 13;
                    break;
                  }

                  i = 0, len = _this.config.requestInterceptor[0].length;

                case 3:
                  if (!(i < len)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 6;
                  return _this.config.requestInterceptor[0][i](config, _this.config, _this.source);

                case 6:
                  config = _context.sent;

                case 7:
                  i++;
                  _context.next = 3;
                  break;

                case 10:
                  return _context.abrupt("return", config);

                case 13:
                  _context.next = 15;
                  return _this.config.requestInterceptor[0](config, _this.config, _this.source);

                case 15:
                  res = _context.sent;
                  return _context.abrupt("return", res);

                case 17:
                  _context.next = 23;
                  break;

                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](0);
                  console.log(_context.t0);
                  return _context.abrupt("return", config);

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 19]]);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.requestInterceptor[1](err, _this.config);
      });
      this.httpBaseInstance.interceptors.response.use( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
          var res;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.config.responseInterceptor[0](config, _this.config, _this.source.cancel);

                case 2:
                  res = _context2.sent;
                  return _context2.abrupt("return", res);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.responseInterceptor[1](err, _this.config, _this.source.cancel);
      });
      this.initSource();
    } // 返回请求基类的实例 目前基类使用的是axios

  }, {
    key: "getHttpBaseInstance",
    value: function getHttpBaseInstance() {
      return this.httpBaseInstance;
    }
  }, {
    key: "get",
    value: function get(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.send('get', url, data, config);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.send('post', url, data, config);
    }
  }, {
    key: "send",
    value: function send(method, url, data) {
      var _this2 = this;

      var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var params = data;
      return new Promise(function (resolve, reject) {
        if (['post', 'put', 'patch'].includes(method)) {
          // 兼容 { params:{} } 格式
          var _paramsData;

          if (params && params.params && baseFn.fn.isPlainObject(params.params)) {
            _paramsData = params.params;
            delete params.params;
            config = _objectSpread(_objectSpread({}, config), params);
          } else {
            _paramsData = params;
          }

          _this2.httpBaseInstance[method](url, _paramsData, _objectSpread(_objectSpread({}, config), {}, {
            cancelToken: _this2.source.token
          })).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else if (['get', 'delete', 'head'].includes(method)) {
          _this2.httpBaseInstance[method](url, _objectSpread(_objectSpread({}, paramsData), {}, {
            cancelToken: _this2.source.token
          }, config)).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else {
          reject(new Error('请求方法不正确!'));
        }
      });
    }
  }]);

  return HttpClient;
}();

var KL_HOSTS = {
  develop: 'http://dev-kunlun.wanwudezhi.com',
  dev: 'http://dev-kunlun.wanwudezhi.com',
  pre: 'https://pre-kunlun.wanwudezhi.com',
  prod: 'https://kunlun.wanwudezhi.com',
  httppre: 'http://pre-kunlun.wanwudezhi.com',
  httpprod: 'https://kunlun.wanwudezhi.com',
  httpspre: 'https://pre-kunlun.wanwudezhi.com',
  httpsprod: 'https://kunlun.wanwudezhi.com'
};
var KL_OS_TYPES = {
  'Android': 1,
  'IOS': 2,
  'PC': 3
};
var ERR_MSGS = {
  '400': '请求错误(400)',
  '401': '未授权，请重新登录(401)',
  '403': '拒绝访问(403)',
  '404': '未找到此接口(404)',
  '408': '请求超时(408)',
  '500': '服务器错误(500)',
  '501': '服务未实现(501)',
  '502': '网络错误(502)',
  '503': '服务不可用(503)',
  '504': '网络超时(504)',
  '505': 'HTTP版本不受支持(505)'
};
var AXIOS_ERR_MSGS = {
  'Network Error': '网络错误，请检查您的网络'
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

if (!window.ENCRYPT_KEY) {
  window.ENCRYPT_KEY = {
    appVersion: baseFn.ua.getAppVersion() || '3.0.2',
    // 商城
    signVersion: '1.0.0',
    // h5
    h5sId: '300100'
  };
} // 重写全局
// window.ENCRYPT_KEY.appVersion = ua.getAppVersion() || '3.0.2';
// const appVer = window.ENCRYPT_KEY.appVersion;
// const signVer = window.ENCRYPT_KEY.signVersion;
// const KlSignatureIns = new KlSignature();


var __env = baseFn.fn.getQueryString('__env') || 'prod';

var mockUser = baseFn.fn.getQueryString('mock_user') || '';
var mock = baseFn.fn.getQueryString('mock') || '';
var kl_debug_params_str = baseFn.fn.getQueryString('kl_debug_params') || '';
var kl_debug_params = null;

if (kl_debug_params_str) {
  try {
    kl_debug_params = JSON.parse(kl_debug_params_str);
  } catch (e) {
    console.log(e);
  }
}

var protocol = location.protocol.replace(':', '');
var option = {
  requestInterceptor: [/*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, option, source) {
      var appVer, signVer, url, data, osInfo, kl_os_type, token, kl_ver, kl_token, kl_t, kl_platform, kl_display_type, kl_os_version, kl_device_id, kl_trace_id, kl_sign_ver, kl_sdk_ver, customHeader, kl_device_token, prefix, kl_path, host, useip, useport, parseUrlObj, kl_sign, headerMapKV, headerMapKV2, headerMap, signData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!config.withoutCancelToken) {
                config.cancelToken = source.token;
              } else {
                config.cancelToken = null;
              }

              appVer = window.ENCRYPT_KEY.appVersion;
              signVer = window.ENCRYPT_KEY.signVersion;
              url = config.url, data = config.data;
              osInfo = 'PC';
              if (baseFn.ua.isIOS()) osInfo = 'IOS';
              if (baseFn.ua.isAndroid()) osInfo = 'Android';
              kl_os_type = KL_OS_TYPES[osInfo]; // 操作系统类型 android:1 ios:2 pc:3

              token = option.getToken();
              kl_ver = appVer; // 客户端版本

              kl_token = token; // 用户Token

              kl_t = parseInt(Date.now() / 1000); // 请求的时间戳，秒级别

              kl_platform = 3; // 1:app 2:小程序 3:浏览器

              if (baseFn.ua.isApp()) kl_platform = 1;
              if (baseFn.ua.isWechatMiniProgram()) kl_platform = 2;
              kl_display_type = 2; // 展示类型  1:Native 2:H5

              kl_os_version = '1.0.0'; // 操作系统版本

              _context.next = 19;
              return mallWebConfig.getUUID();

            case 19:
              kl_device_id = _context.sent;
              kl_trace_id = mallWebConfig.generateUUID();
              kl_sign_ver = signVer;
              kl_sdk_ver = '1.0.3'; // 请求网关 携带头部信息

              customHeader = {
                kl_ver: kl_ver,
                kl_token: kl_token,
                kl_t: kl_t,
                kl_os_type: kl_os_type,
                kl_platform: kl_platform,
                kl_display_type: kl_display_type,
                kl_os_version: kl_os_version,
                kl_device_id: kl_device_id,
                kl_trace_id: kl_trace_id,
                kl_sign_ver: kl_sign_ver,
                kl_sdk_ver: kl_sdk_ver // kl_sign,

              }; // 设备指纹

              kl_device_token = '';

              if (!config.fingerprint) {
                _context.next = 36;
                break;
              }

              _context.prev = 26;
              _context.next = 29;
              return mallWebConfig.getWebUmidToken();

            case 29:
              kl_device_token = _context.sent;
              _context.next = 35;
              break;

            case 32:
              _context.prev = 32;
              _context.t0 = _context["catch"](26);
              console.log(_context.t0);

            case 35:
              customHeader['kl_device_token'] = kl_device_token;

            case 36:
              // mock
              if (mockUser) customHeader['kl_mock_user'] = mockUser;
              if (mock) customHeader['kl_mock'] = mock; // debug params

              if (kl_debug_params) {
                customHeader = _objectSpread$1(_objectSpread$1({}, customHeader), kl_debug_params);
              } // 取消上传token


              if (config.withoutToken) {
                delete customHeader['kl_token'];
                kl_token = null;
              } // 数据加密
              // if (config.encrypt && (typeof data !== 'undefined')) {
              //     const originText = JSON.stringify(data);
              //     const cipherText = encrypt(originText);
              //     config.data = { cipherText };
              // }
              // 切换host


              prefix = '';
              kl_path = '';

              if (!/^http(s)?:\/\//.test(url)) {
                if (!/^\//.test(url)) {
                  // `/`开头
                  prefix = '/';
                }

                if (__env !== 'useip') {
                  host = KL_HOSTS[protocol + __env] || KL_HOSTS[__env] || KL_HOSTS.prod;
                  config.url = host + prefix + url;
                } else {
                  useip = baseFn.fn.getQueryString('__useip');
                  useport = baseFn.fn.getQueryString('__useport');
                  config.url = "http://".concat(useip, ":").concat(useport || 8085) + prefix + url;
                }

                kl_path = prefix + url;
              } else {
                parseUrlObj = new URL(url);
                kl_path = parseUrlObj.pathname;
              }

              config.data = option.formatData(config.data);
              kl_sign = '';
              headerMapKV = [['kl_path', kl_path], ['kl_trace_id', kl_trace_id], ['kl_token', kl_token], ['kl_device_id', kl_device_id], ['kl_device_token', kl_device_token]];
              headerMapKV2 = [];
              headerMapKV.map(function (item) {
                if (!item[1]) {
                  delete customHeader[item[0]];
                  return;
                }

                headerMapKV2.push(item);
              });
              headerMap = new Map(headerMapKV2);

              if (config.data && config.data.kl_data) {
                signData = config.data.kl_data;
              }

              try {
                kl_sign = encryption.sign(kl_t, signData, headerMap);
              } catch (e) {
                console.log(e);
              }

              customHeader['kl_sign'] = kl_sign;
              config.headers.common = Object.assign({}, config.headers.common, customHeader);
              return _context.abrupt("return", config);

            case 54:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[26, 32]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }()],
  responseInterceptor: [function (response, option, cancel) {
    var data = response.data;
    var status = response.status;
    var formatErr = option.formatErr;
    var formatRes = option.formatRes;
    var newError = {
      type: mySentry.ERROR_TYPE.Xhr,
      level: mySentry.ERROR_LEVEL.Info,
      ConfirmReport: response.config && response.config.ConfirmReport || null
    };

    if (status !== 200 && status !== 304) {
      newError.ConfirmReport = true;
      newError.extra = response;
      newError.message = response.message || response.msg || '网络异常';
      return Promise.reject(formatErr(newError));
    }

    if (response.config.skipFilter) {
      return data;
    }

    if (data && data.success) {
      return formatRes(data);
    }

    if (data && (data.code === 301 || data.code === 302)) {
      // 未登录 或 token过期
      // skipLogin是在请求函数中作为第三个参数传递进来的
      if (!response.config.skipLogin) {
        option.cbFor401(data);
      }

      newError.payload = data;
      newError.message = '未登录'; // return new Promise((resolve, reject) => {
      //     setTimeout(() => {
      //         reject(formatErr(newError));
      //     }, 3000);
      // });

      return Promise.reject(formatErr(newError));
    }

    newError.payload = data;
    newError.message = data.message || "\u670D\u52A1\u7AEF\u5F02\u5E38\uFF1A".concat(data.code);
    return Promise.reject(formatErr(newError));
  }, function (err, option) {
    var msg = '';

    if (err && err.response && ERR_MSGS[err.response.status]) {
      msg = ERR_MSGS[err.response.status];
    }

    err.ConfirmReport = true;
    mySentry.logError(err);
    return Promise.reject(option.formatErr(_objectSpread$1(_objectSpread$1({}, err), {}, {
      message: AXIOS_ERR_MSGS[err.message] || err.message || msg
    })));
  }],
  formatRes: function formatRes(res) {
    return res.data;
  },
  formatData: function formatData(data) {
    if (data) return {
      kl_data: JSON.stringify(data)
    }; // if (data) return { kl_data: data };
  },
  getToken: baseSdkTokenManager.getToken
};

var httpClientInstance = new HttpClient(option);
var initSource = httpClientInstance.initSource;
var cancel = httpClientInstance.cancel;
var ver = JSON.stringify(window.ENCRYPT_KEY || {
  none: 111
});
var httpBaseInstance = httpClientInstance.httpBaseInstance;

exports.cancel = cancel;
exports.default = httpClientInstance;
exports.initSource = initSource;
exports.kl_request = httpClientInstance;
exports.kl_request_base = httpBaseInstance;
exports.ver = ver;
