import 'core-js/modules/es.array.concat';
import 'core-js/modules/es.array.filter';
import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.array.index-of';
import 'core-js/modules/es.array.sort';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.object.keys';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'core-js/modules/es.regexp.constructor';
import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.regexp.to-string';
import 'core-js/modules/es.string.split';
import 'core-js/modules/web.dom-collections.for-each';
import 'regenerator-runtime/runtime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import { ua, fn } from '@wanwu/base-fn';
import hdp from '@wanwu/hdp';
import WxSdk from '@wanwu/wx-sdk';
import { addReferRtp } from '@wanwu/base-logger';
import RS from '@wanwu/resource-center';
import { isApiDev } from '@wanwu/env-utils';
import CallApp from '@wanwu/callapp';
import wLocation from '@wanwu/w-location';

var PREVENTCODE = {
  xcxPrevent: 'xcx_prevent',
  appPrevent: 'app_prevent',
  appVersionPrevent: 'version_prevent',
  h5Prevent: 'h5_prevent',
  callappPrevent: 'callapp_prevent'
};
var PREVENTMSG = {
  jumpApp: '跳转APP',
  jumpXcx: '跳转小程序',
  jumpXcxPrevent: '跳转小程序失败',
  jumpAppPrevent: '跳转APP失败',
  jumpAppVersionPrevent: '版本过低',
  jumpH5Prevent: '跳转H5失败',
  callappPrevent: '唤起app失败'
};
var defaultRules = [{
  rule: '/home/index',
  xcx: '/home/index',
  callback: function callback(to) {
    var query = to.query;
    to.path = 'zdwh://wwdz/main';
    to.query = Object.assign({}, query, {
      position: query.type,
      type: 0
    });
    return to;
  }
}, {
  rule: '/virtual/liveRoom',
  xcx: '/live/room',
  h5Prevent: true,
  callback: function callback(to) {
    to.pluginName = 'PluginNavigation';
    to.functionName = 'pageLivePlayer';
    return to;
  }
}, {
  rule: '/im/support',
  h5Prevent: true,
  callback: function callback(to) {
    var query = to.query;
    to.path = 'zdwh://wwdz/customer7';
    to.query = {
      param: JSON.stringify(query)
    };
    return to;
  }
}, {
  rule: '/good/upload',
  h5Prevent: true,
  callback: function callback(to) {
    if (ua.isIOSApp() && fn.compareVersion(ua.getAppVersion(), '2.2.9') === 0) {
      // Vue.toast('请前往【拍卖管理】发布拍卖活动商品');
      throw makeError(PREVENTCODE.appVersionPrevent, PREVENTMSG.jumpAppVersionPrevent, {
        rule: '/good/upload',
        h5Prevent: true
      }, to);
    } else {
      return to;
    }
  }
}];

function isAppPath(path) {
  return /^zdwh:\/\/wwdz\/\w*/.test(path);
} // 跳转H5，失败则抛出错误


var callLib = new CallApp();

function jumpH5(_x, _x2, _x3, _x4, _x5) {
  return _jumpH.apply(this, arguments);
} // 国风好物小程序跳转到底部三个tab页需要用switchTab


function _jumpH() {
  _jumpH = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, prevent, sourceError, emitEvent, options) {
    var callAppTo;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return convertUrlFromH5ToH5(to);

          case 3:
            to = _context.sent;

            if (!(!ua.isApp() && !ua.isWechatMiniProgram() && options.callApp)) {
              _context.next = 17;
              break;
            }

            _context.prev = 5;
            _context.next = 8;
            return convertUrlFromH5ToCallapp(fn.clone(to), options);

          case 8:
            callAppTo = _context.sent;

            if (!callAppTo.path) {
              _context.next = 12;
              break;
            }

            callLib.open(callAppTo);
            return _context.abrupt("return", prevent(PREVENTMSG.callappPrevent));

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](5);
            console.log(_context.t0); // TODO:转callapp失败后如何处理？

          case 17:
            return _context.abrupt("return", to);

          case 20:
            _context.prev = 20;
            _context.t1 = _context["catch"](0);
            return _context.abrupt("return", prevent(sourceError || _context.t1, true));

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 20], [5, 14]]);
  }));
  return _jumpH.apply(this, arguments);
}

function switchTab(_x6) {
  return _switchTab.apply(this, arguments);
} // 小程序内，尝试跳到小程序页面，如果失败，跳H5


function _switchTab() {
  _switchTab = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              window.wx.miniProgram.switchTab({
                url: url,
                success: function success(res) {
                  resolve(res);
                },
                fail: function fail(res) {
                  reject(res);
                }
              });
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _switchTab.apply(this, arguments);
}

function jumpXcx(_x7, _x8, _x9, _x10) {
  return _jumpXcx.apply(this, arguments);
} // App内，尝试跳转到app，如果失败，则跳到H5


function _jumpXcx() {
  _jumpXcx = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(to, prevent, emitEvent, options) {
    var _to, path, query;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return convertUrlFromH5ToXcx(to);

          case 3:
            to = _context3.sent;
            _to = to, path = _to.path, query = _to.query; // 国风好物小程序由于使用小程序默认tab跳转底部三个页面的方式要改成switchTab的方式

            if (!(window.hidewwdz && (path.indexOf('/home/index') !== -1 || path.indexOf('/personal/center') !== -1 || path.indexOf('/news/index') !== -1))) {
              _context3.next = 10;
              break;
            }

            _context3.next = 8;
            return switchTab(path);

          case 8:
            _context3.next = 17;
            break;

          case 10:
            if (!(options && options.closeWebview)) {
              _context3.next = 15;
              break;
            }

            _context3.next = 13;
            return WxSdk.wxMiniProgramRedirectTo(fn.stringifyUrl(path, query));

          case 13:
            _context3.next = 17;
            break;

          case 15:
            _context3.next = 17;
            return WxSdk.wxMiniProgramNavigateTo(fn.stringifyUrl(path, query));

          case 17:
            _context3.next = 22;
            break;

          case 19:
            _context3.prev = 19;
            _context3.t0 = _context3["catch"](0);
            return _context3.abrupt("return", jumpH5(to, prevent, _context3.t0));

          case 22:
            emitEvent('beforeNavigate', to);
            return _context3.abrupt("return", prevent(PREVENTMSG.jumpXcx));

          case 24:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 19]]);
  }));
  return _jumpXcx.apply(this, arguments);
}

function jumpApp(_x11, _x12, _x13) {
  return _jumpApp.apply(this, arguments);
} // 将H5或者app链接转换为App链接，error表示转换失败，还是跳H5


function _jumpApp() {
  _jumpApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(to, prevent, emitEvent) {
    var _to2, path, query, pluginName, functionName;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return convertUrlFromH5ToApp(to);

          case 3:
            to = _context4.sent;
            _to2 = to, path = _to2.path, query = _to2.query, pluginName = _to2.pluginName, functionName = _to2.functionName;

            if (!(pluginName && functionName)) {
              _context4.next = 10;
              break;
            }

            _context4.next = 8;
            return hdp.exec(pluginName, functionName, query);

          case 8:
            _context4.next = 12;
            break;

          case 10:
            _context4.next = 12;
            return hdp.exec('PluginRouter', 'jumpApp', {
              linkUrl: fn.stringifyUrl(path, query)
            });

          case 12:
            _context4.next = 17;
            break;

          case 14:
            _context4.prev = 14;
            _context4.t0 = _context4["catch"](0);
            return _context4.abrupt("return", jumpH5(to, prevent, _context4.t0));

          case 17:
            emitEvent('beforeNavigate', to);
            return _context4.abrupt("return", prevent(PREVENTMSG.jumpApp));

          case 19:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 14]]);
  }));
  return _jumpApp.apply(this, arguments);
}

function convertUrlFromH5ToApp(_x14) {
  return _convertUrlFromH5ToApp.apply(this, arguments);
} // 将H5或者app链接转换为小程序链接，error表示转换失败，还是跳H5


function _convertUrlFromH5ToApp() {
  _convertUrlFromH5ToApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(to) {
    var query, ruleList, rule, accordMinList, accordMaxList, _rule, appUrl, queryRule, pluginName, functionName, queryValueMap, h5;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!isAppPath(to.path)) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt("return", to);

          case 2:
            query = to.query;
            _context5.next = 5;
            return getH5RuleList(to);

          case 5:
            _context5.t0 = _context5.sent;

            if (_context5.t0) {
              _context5.next = 8;
              break;
            }

            _context5.t0 = [];

          case 8:
            ruleList = _context5.t0;

            if (!(ruleList.length > 0)) {
              _context5.next = 19;
              break;
            }

            accordMinList = ruleList.filter(checkMinVersion);

            if (!(accordMinList.length > 0)) {
              _context5.next = 16;
              break;
            }

            accordMaxList = accordMinList.filter(checkMaxVersion);
            rule = accordMaxList[0] || {};
            _context5.next = 17;
            break;

          case 16:
            throw makeError(PREVENTCODE.appVersionPrevent, PREVENTMSG.jumpAppVersionPrevent, rule, to);

          case 17:
            _context5.next = 20;
            break;

          case 19:
            rule = {};

          case 20:
            _rule = rule, appUrl = _rule.appUrl, queryRule = _rule.queryRule, pluginName = _rule.pluginName, functionName = _rule.functionName, queryValueMap = _rule.queryValueMap;
            h5 = rule.h5 || rule.rule;

            if (!h5) {
              _context5.next = 38;
              break;
            }

            if (!(typeof rule.callback === 'function')) {
              _context5.next = 27;
              break;
            }

            return _context5.abrupt("return", rule.callback(to));

          case 27:
            if (!appUrl) {
              _context5.next = 33;
              break;
            }

            to.path = 'zdwh://wwdz' + appUrl;
            to.query = processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(query)));
            return _context5.abrupt("return", to);

          case 33:
            if (!(pluginName && functionName)) {
              _context5.next = 38;
              break;
            }

            to.pluginName = pluginName;
            to.functionName = functionName;
            to.query = processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(query)));
            return _context5.abrupt("return", to);

          case 38:
            throw new Error('not found rule for h5 convert to app');

          case 39:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _convertUrlFromH5ToApp.apply(this, arguments);
}

function convertUrlFromH5ToXcx(_x15) {
  return _convertUrlFromH5ToXcx.apply(this, arguments);
} // 将H5或者app链接转换为H5链接，error表示转换失败，阻止跳转


function _convertUrlFromH5ToXcx() {
  _convertUrlFromH5ToXcx = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(to) {
    var rule, xcx, _rule2, _xcx;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!isAppPath(to.path)) {
              _context6.next = 16;
              break;
            }

            _context6.next = 3;
            return getAppRule(to);

          case 3:
            _context6.t0 = _context6.sent;

            if (_context6.t0) {
              _context6.next = 6;
              break;
            }

            _context6.t0 = {};

          case 6:
            rule = _context6.t0;
            xcx = rule.xcx;

            if (!xcx) {
              _context6.next = 13;
              break;
            }

            to.path = '/pages' + xcx;
            return _context6.abrupt("return", to);

          case 13:
            throw makeError(PREVENTCODE.appPrevent, PREVENTMSG.jumpApp, rule, to);

          case 14:
            _context6.next = 28;
            break;

          case 16:
            _context6.next = 18;
            return getH5Rule(to);

          case 18:
            _rule2 = _context6.sent;

            if (!_rule2) {
              _context6.next = 27;
              break;
            }

            _xcx = _rule2.xcx;

            if (!_xcx) {
              _context6.next = 26;
              break;
            }

            to.path = '/pages' + _xcx;
            return _context6.abrupt("return", to);

          case 26:
            throw makeError(PREVENTCODE.xcxPrevent, PREVENTMSG.jumpXcx, _rule2, to);

          case 27:
            throw new Error('not support');

          case 28:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _convertUrlFromH5ToXcx.apply(this, arguments);
}

function convertUrlFromH5ToH5(_x16) {
  return _convertUrlFromH5ToH.apply(this, arguments);
} // 将H5链接转换为callapp对象，error表示转换失败，阻止跳转


function _convertUrlFromH5ToH() {
  _convertUrlFromH5ToH = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(to) {
    var rule, preventH5Jump, ruleBase, h5, _rule3, _preventH5Jump;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!isAppPath(to.path)) {
              _context7.next = 19;
              break;
            }

            _context7.next = 3;
            return getAppRule(to);

          case 3:
            _context7.t0 = _context7.sent;

            if (_context7.t0) {
              _context7.next = 6;
              break;
            }

            _context7.t0 = {};

          case 6:
            rule = _context7.t0;
            preventH5Jump = rule.preventH5Jump, ruleBase = rule.base;

            if (!preventH5Jump) {
              _context7.next = 12;
              break;
            }

            throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, rule, to);

          case 12:
            h5 = rule.h5 || rule.rule;
            to.path = h5;
            to.base = ruleBase || '/mall-web';
            to.origin = location.origin;
            return _context7.abrupt("return", to);

          case 17:
            _context7.next = 28;
            break;

          case 19:
            _context7.next = 21;
            return getH5Rule(to);

          case 21:
            _context7.t1 = _context7.sent;

            if (_context7.t1) {
              _context7.next = 24;
              break;
            }

            _context7.t1 = {};

          case 24:
            _rule3 = _context7.t1;
            _preventH5Jump = _rule3.preventH5Jump;

            if (!_preventH5Jump) {
              _context7.next = 28;
              break;
            }

            throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, _rule3, to);

          case 28:
            if (!isAppPath(to.path)) {
              _context7.next = 30;
              break;
            }

            throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, {}, to);

          case 30:
            return _context7.abrupt("return", to);

          case 31:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _convertUrlFromH5ToH.apply(this, arguments);
}

function convertUrlFromH5ToCallapp(_x17, _x18) {
  return _convertUrlFromH5ToCallapp.apply(this, arguments);
} // 获取h5链接规则列表


function _convertUrlFromH5ToCallapp() {
  _convertUrlFromH5ToCallapp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(to, options) {
    var rule, appUrl, queryRule, queryValueMap, jumpUrl, res;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return getH5Rule(to);

          case 2:
            _context8.t0 = _context8.sent;

            if (_context8.t0) {
              _context8.next = 5;
              break;
            }

            _context8.t0 = {};

          case 5:
            rule = _context8.t0;
            appUrl = rule.appUrl, queryRule = rule.queryRule, queryValueMap = rule.queryValueMap;

            if (appUrl) {
              jumpUrl = fn.stringifyUrl('zdwh://wwdz' + appUrl, processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(to.query))));
            } else {
              jumpUrl = fn.stringifyUrl("".concat(to.origin || '').concat(to.base && to.base !== '/' ? to.base : '').concat(to.path || ''), to.query) + (to.hash ? "#".concat(to.hash) : '');
            }

            res = {
              path: 'openApp',
              param: {
                jumpUrl: encodeURIComponent(jumpUrl),
                referUrl: encodeURIComponent(location.href)
              }
            };

            if (!options.forcedDownload) {
              res.callback = function () {
                wLocation.push(options.redirectUrl || to);
              };
            }

            return _context8.abrupt("return", res);

          case 11:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _convertUrlFromH5ToCallapp.apply(this, arguments);
}

function getH5RuleList(_x19) {
  return _getH5RuleList.apply(this, arguments);
} // 获取h5链接规则列表的第一项


function _getH5RuleList() {
  _getH5RuleList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(to) {
    var path, base, rules, h5Result, rulersKey, ruleList;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            path = to.path, base = to.base;
            _context9.next = 3;
            return getRouterRules();

          case 3:
            rules = _context9.sent;
            h5Result = rules.h5Result; // 处理path带有时间戳的匹配不到的问题；

            if (path && /(.*)\/(\d{13})$/.test(path)) {
              path = RegExp.$1;
            }

            rulersKey = (base || '') + path;
            ruleList = h5Result[rulersKey];
            return _context9.abrupt("return", ruleList);

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _getH5RuleList.apply(this, arguments);
}

function getH5Rule(_x20) {
  return _getH5Rule.apply(this, arguments);
} // 获取app规则


function _getH5Rule() {
  _getH5Rule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(to) {
    var ruleList;
    return regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return getH5RuleList(to);

          case 2:
            _context10.t0 = _context10.sent;

            if (_context10.t0) {
              _context10.next = 5;
              break;
            }

            _context10.t0 = [];

          case 5:
            ruleList = _context10.t0;
            return _context10.abrupt("return", ruleList[0]);

          case 7:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _getH5Rule.apply(this, arguments);
}

function getAppRule(_x21) {
  return _getAppRule.apply(this, arguments);
}

function _getAppRule() {
  _getAppRule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(to) {
    var rules, appResult, key, rule;
    return regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return getRouterRules();

          case 2:
            rules = _context11.sent;
            appResult = rules.appResult;
            key = to.path; // 对flutter路由特殊处理

            if (to.path === 'zdwh://wwdz/flutter/page') {
              key = fn.stringifyUrl(to.path, {
                routeUrl: to.query.routeUrl
              });
            }

            rule = appResult[key];
            return _context11.abrupt("return", rule);

          case 8:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  return _getAppRule.apply(this, arguments);
}

var _routerRulesCache;

function getRouterRules() {
  return _getRouterRules.apply(this, arguments);
} // 根据最低版本号比较 sort比较函数


function _getRouterRules() {
  _getRouterRules = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
    return regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (!_routerRulesCache) {
              _routerRulesCache = RS.getList(isApiDev() ? 468 : 81, false).then(function (res) {
                return res.concat(defaultRules);
              })["catch"](function (err) {
                console.log(err);
                _routerRulesCache = null;
                return [].concat(defaultRules);
              }).then(function (res) {
                var h5Result = {};
                var appResult = {};
                res.forEach(function (item) {
                  var h5Rule = item.h5 || item.rule;
                  var ruleBase = item.base || '/mall-web';
                  var key = ruleBase + h5Rule;

                  if (!h5Result[key]) {
                    h5Result[key] = [];
                  }

                  h5Result[key].push(item); // 默认mall-web的跳转映射，兼容写法，新项目中不应该用到它，否则认为是有问题的

                  var defaultKey = '/mall-web' + h5Rule;

                  if (key !== defaultKey) {
                    if (!h5Result[defaultKey]) {
                      h5Result[defaultKey] = [];
                    }

                    h5Result[defaultKey].push(item);
                  }

                  if (item.appUrl) {
                    var appKey = "zdwh://wwdz".concat(item.appUrl);
                    if (!appResult[appKey]) appResult[appKey] = item;
                  }
                });
                Object.keys(h5Result).filter(function (key) {
                  return h5Result[key].length > 1;
                }).forEach(function (key) {
                  var item = h5Result[key];
                  item.sort(function (a, b) {
                    var res = sortByMinVersion(a, b);

                    if (res === 0) {
                      return sortByMaxVersion(a, b);
                    }

                    return res;
                  });
                });
                return {
                  h5Result: h5Result,
                  appResult: appResult
                };
              });
            }

            return _context12.abrupt("return", _routerRulesCache);

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _getRouterRules.apply(this, arguments);
}

function sortByMinVersion(a, b) {
  var aMinVersion = getMinVersion(a);
  var bMinVersion = getMinVersion(b);
  return -fn.compareVersion(aMinVersion, bMinVersion);
} // 根据最高版本号比较 sort比较函数


function sortByMaxVersion(a, b) {
  var aMaxVersion = getMaxVersion(a);
  var bMaxVersion = getMaxVersion(b);
  return fn.compareVersion(aMaxVersion, bMaxVersion);
} // 获取规则最低版本号


function getMinVersion(rule) {
  var isAndroidApp = ua.isAndroidApp();
  return rule.minVersion || (isAndroidApp ? rule.androidVersion : rule.iosVersion) || '0.0.0';
} // 获取规则最高版本号


function getMaxVersion(rule) {
  var isAndroidApp = ua.isAndroidApp();
  return rule.maxVersion || (isAndroidApp ? rule.androidMaxVersion : rule.iosMaxVersion) || '9999.9999.9999';
} // TODO: 处理app query转h5
// 处理query参数转换h5转app


function processMappingQuery(queryKeyRule, queryValueMap, query) {
  var newQuery = fn.clone(query);

  if (queryKeyRule) {
    var ruleList = queryKeyRule.split(';');
    ruleList.forEach(function (rule) {
      if (rule) {
        var kv = rule.split(':');
        var k = kv[0];
        var v = kv[1];

        if (query[k]) {
          newQuery[v] = query[k];
        }
      }
    });
  }

  if (queryValueMap) {
    queryValueMap.split(';').forEach(function (keyMap) {
      if (!keyMap) return;
      var keyMapList = keyMap.split('::');
      var key = keyMapList[0];
      var map = {};
      if (!keyMapList[1]) return;
      keyMapList[1].split(',').forEach(function (mapStr) {
        var kv = mapStr.split(':');
        var k = kv[0];
        var v = kv[1];
        map[k] = v;
      });

      if (newQuery[key]) {
        var value = newQuery[key];

        if (map[value]) {
          newQuery[key] = map[value];
        }
      }
    });
  }

  return newQuery;
} // 比较app版本是否符合规则最低版本限制


function checkMinVersion(config) {
  return fn.compareVersion(ua.getAppVersion(), getMinVersion(config)) >= 0;
} // 比较app版本是否符合规则最高版本限制


function checkMaxVersion(config) {
  return fn.compareVersion(ua.getAppVersion(), getMaxVersion(config)) <= 0;
}

function makeError(code, message, config, to) {
  var error = new Error(message);
  error.code = code;
  error.config = config;
  error.to = to;
  return error;
}

getRouterRules();
/**
 *  四端跳转插件
 * @param {WLocation} to 目标路由对象
 * @param {WLocation} from 当前路由对象
 * @param {Function} prevent 生成阻止跳转的返回值
 * @param {EventEmitter} eventCenter 事件中心（插件和location直接交互信息）
 * @param {Object} options 配置项
 * @param {boolean} options.callApp h5内跳转目标页是否要打开app
 * @param {String} options.redirectUrl 唤起失败的回跳地址，默认跳转到目标路由
 * @param {boolean} options.forcedDownload 此次跳转是否强制下载app（不下载不能打开目标页面）
 * @param {boolean} options.jumpH5 此次强制跳转h5页面
 */

function replace(to, from, prevent, eventCenter, options) {
  if (options.jumpH5) {
    return jumpH5(to, prevent, null, emitEvent, options);
  }

  if (ua.isApp()) {
    return jumpApp(to, prevent, emitEvent, options);
  } else if (ua.isWechatMiniProgram() || WxSdk._isMiniProgram) {
    return jumpXcx(to, prevent, emitEvent, options);
  } else {
    return jumpH5(to, prevent, null, emitEvent, options);
  }

  function emitEvent(event, to) {
    eventCenter.$emit(event, to, from);
  }
}

export default replace;
export { PREVENTCODE };
