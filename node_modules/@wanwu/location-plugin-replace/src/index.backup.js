
// import Vue from 'vue';
import {
    fn, ua,
} from '@wanwu/base-fn';
import hdp from '@wanwu/hdp';
import {
    addReferRtp,
} from '@wanwu/base-logger';
import request from '@wanwu/base-request';
import WxSdk from '@wanwu/wx-sdk';
let cache;

const PREVENTMSG = {
    jumpApp: '跳转APP',
    jumpXcx: '跳转小程序',
    jumpXcxPrevent: '跳转小程序失败',
    jumpAppPrevent: '跳转APP失败',
    jumpAppVersionPrevent: '版本过低',
    jumpH5Prevent: '跳转H5失败',
};

export const PREVENTCODE = {
    xcxPrevent: 'xcx_prevent',
    appPrevent: 'app_prevent',
    appVersionPrevent: 'version_prevent',
    h5Prevent: 'h5_prevent',
};

const defaultReplacePath = [
    {
        rule: '/home/index',
        app: (query) => {
            const {
                type = 1,
            } = query;
            // app 内跳转采用如下规则
            // type: 首页0；分类1；玩家2；我的3。
            // position: 关注0，推荐1，直播2
            const linkUrl = fn.stringifyUrl('zdwh://wwdz/main', transformQuery(Object.assign({}, query, {
                position: type,
                type: 0,
            })));

            return [
                'PluginRouter',
                'jumpApp',
                {
                    linkUrl,
                },
            ];
        },
        xcx: (query) => {
            return fn.stringifyUrl('/pages/home/index', transformQuery(query));
        },
    },
    {
        rule: '/virtual/liveRoom',
        app: (query) => {
            return [
                'PluginNavigation',
                'pageLivePlayer',
                query,
            ];
        },
        xcx: (query) => {
            return fn.stringifyUrl('/pages/live/room', transformQuery(query));
        },
    },
    {
        rule: '/im/support',
        app: (query) => {
            return [
                'PluginRouter',
                'jumpApp',
                {
                    linkUrl: `zdwh://wwdz/customer7?param=${JSON.stringify(query)}`,
                },
            ];
        },
        h5: () => {
            return false;
        },
    },
    {
        rule: '/good/upload',
        app: (query) => {
            if (ua.isIOSApp() && fn.compareVersion(ua.getAppVersion(), '2.2.9') === 0) {
                // Vue.toast('请前往【拍卖管理】发布拍卖活动商品');
                return false;
            }
            return [
                'PluginRouter',
                'jumpApp',
                {
                    linkUrl: fn.stringifyUrl('zdwh://wwdz/good/upload', query),
                },
            ];
        },
        h5: (query) => {
            return false;
        },
    },
];

export default async (to, form, prevent) => {
    const replacePath = await getRouterMap();
    console.log(to, form, replacePath);
    const giveFromPath = location.href;
    const query = to.query;
    const path = to.path;

    if (/^zdwh:\/\/wwdz\/\w*/.test(path)) {
        const giveFromPath = location.href;
        const referRtpQuery = addReferRtp(giveFromPath, fn.clone(query));
        hdp.exec('PluginRouter', 'jumpApp', Object.assign({
            linkUrl: fn.stringifyUrl(path, referRtpQuery),
        }, referRtpQuery));
        return prevent(PREVENTMSG.jumpApp);
    }
    for (let i = 0; i < replacePath.length; i++) {
        const item = replacePath[i];
        let rule = item.rule;

        if (!(rule instanceof RegExp)) {
            rule = new RegExp(`/mall-web${rule}(\\?|$)`);
        }
        const referRtpQuery = addReferRtp(giveFromPath, fn.clone(query));

        if (rule.test(to.base + to.path)) {
            if (ua.isApp() && typeof item.app === 'function') {
                // 添加埋点链路需要的参数
                const EXEC_ARGS = item.app(referRtpQuery);
                if (!EXEC_ARGS) {
                    return prevent({
                        message: PREVENTMSG.jumpAppPrevent,
                        code: PREVENTCODE.appPrevent,
                        to,
                        config: item.config,
                    }, true);
                }
                if (EXEC_ARGS === PREVENTCODE.appVersionPrevent) {
                    return prevent({
                        message: PREVENTMSG.jumpAppVersionPrevent,
                        code: PREVENTCODE.appVersionPrevent,
                        to,
                        config: item.config,
                    }, true);
                }
                EXEC_ARGS.splice(2, 1, Object.assign({}, EXEC_ARGS[2], referRtpQuery));
                hdp.exec(...EXEC_ARGS);
                return prevent(PREVENTMSG.jumpApp);
            } else if ((ua.isWechatMiniProgram() || WxSdk._isMiniProgram) && typeof item.xcx === 'function') {
                // 添加埋点链路需要的参数
                const XCX_PAGES_PATH = item.xcx(referRtpQuery);
                if (!XCX_PAGES_PATH) {
                    return prevent({
                        message: PREVENTMSG.jumpXcxPrevent,
                        code: PREVENTCODE.xcxPrevent,
                        to,
                        config: item.config,
                    }, true);
                }
                return WxSdk.wxMiniProgramNavigateTo(XCX_PAGES_PATH).then(() => {
                    return prevent(PREVENTMSG.jumpXcx);
                }).catch(() => {
                    return to;
                    // resolve();
                });
            } else if (typeof item.h5 === 'function') {
                const H5_PAGES_PATH = item.h5(query);
                if (!H5_PAGES_PATH) {
                    return prevent({
                        message: PREVENTMSG.jumpH5Prevent,
                        code: PREVENTCODE.h5Prevent,
                        to,
                        config: item.config,
                    }, true);
                }
                return H5_PAGES_PATH;
            } else {
                return to;
            }
        }
    }

    return to;
};

getRouterMap();



function transformQuery(query = {}) {
    return fn.omit(query, 'token');
}

async function getRouterMap() {
    if (!cache) {
        cache = await request.get('https://api.wanwudezhi.com/api/activity/page/resource/detail', {
            params: {
                resourceIds: '81',
            },
        }).then(makeRouterMap);
    }
    return cache;
}


function makeRouterMap(res) {
    // const res = await getRouterMap();
    const configList = (fn.getObjDeepValue(res, '0.detail') || []).map(config => {
        let app, xcx, h5;
        if (config.appUrl) {
            app = (query) => {
                if (!checkVersion(config)) {
                    return PREVENTCODE.appVersionPrevent;
                }
                query = processQuery(query, config);
                const linkUrl = fn.stringifyUrl(`zdwh://wwdz${config.appUrl}`, transformQuery(Object.assign({}, query)));
                return [
                    'PluginRouter',
                    'jumpApp',
                    {
                        linkUrl,
                    },
                ];
            };
        } else if (config.pluginName && config.functionName) {
            app = (query) => {
                if (!checkVersion(config)) {
                    return PREVENTCODE.appVersionPrevent;
                }
                query = processQuery(query, config);
                return [
                    config.pluginName,
                    config.functionName,
                    query,
                ];
            };
        }
        if (config.xcx) {
            xcx = (query) => {
                return fn.stringifyUrl(`/pages${config.xcx}`, transformQuery(query));
            };
        }
        if (config.preventH5Jump) {
            h5 = (query) => {
                return false;
            };
        }
        return {
            rule: config.rule,
            app,
            xcx,
            h5,
            config,
        };
    });
    const replacePath = [
        ...defaultReplacePath,
        ...configList,
    ];
    return replacePath;
}

function checkVersion(config) {
    if (ua.isAndroidApp()) {
        return config.androidVersion ? fn.compareVersion(ua.getAppVersion(), config.androidVersion) > 0 : true;
    } else {
        return config.iosVersion ? fn.compareVersion(ua.getAppVersion(), config.iosVersion) > 0 : true;
    }
}

function processQuery(query, config) {
    if (config.queryRule) {
        const ruleList = config.queryRule.split(';');
        ruleList.forEach(rule => {
            if (rule) {
                const kv = rule.split(':');
                const k = kv[0];
                const v = kv[1];
                query[v] = query[k];
            }
        });
    }
    return query;
}
