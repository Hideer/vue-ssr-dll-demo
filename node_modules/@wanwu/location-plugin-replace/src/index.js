import { fn, ua } from '@wanwu/base-fn';
import hdp from '@wanwu/hdp';
import WxSdk from '@wanwu/wx-sdk';
import { addReferRtp } from '@wanwu/base-logger';
import RS from '@wanwu/resource-center';
import { isApiDev } from '@wanwu/env-utils';
import CallApp from '@wanwu/callapp';
import wLocation from '@wanwu/w-location';
export const PREVENTCODE = {
    xcxPrevent: 'xcx_prevent',
    appPrevent: 'app_prevent',
    appVersionPrevent: 'version_prevent',
    h5Prevent: 'h5_prevent',
    callappPrevent: 'callapp_prevent',
};

const PREVENTMSG = {
    jumpApp: '跳转APP',
    jumpXcx: '跳转小程序',
    jumpXcxPrevent: '跳转小程序失败',
    jumpAppPrevent: '跳转APP失败',
    jumpAppVersionPrevent: '版本过低',
    jumpH5Prevent: '跳转H5失败',
    callappPrevent: '唤起app失败',

};

const defaultRules = [
    {
        rule: '/home/index',
        xcx: '/home/index',
        callback(to) {
            const {
                query,
            } = to;
            to.path = 'zdwh://wwdz/main';
            to.query = Object.assign({}, query, {
                position: query.type,
                type: 0,
            });
            return to;
        },
    },
    {
        rule: '/virtual/liveRoom',
        xcx: '/live/room',
        h5Prevent: true,
        callback(to) {
            to.pluginName = 'PluginNavigation';
            to.functionName = 'pageLivePlayer';
            return to;
        },
    },
    {
        rule: '/im/support',
        h5Prevent: true,
        callback(to) {
            const {
                query,
            } = to;
            to.path = 'zdwh://wwdz/customer7';
            to.query = {
                param: JSON.stringify(query),
            };
            return to;
        },
    },
    {
        rule: '/good/upload',
        h5Prevent: true,
        callback(to) {
            if (ua.isIOSApp() && fn.compareVersion(ua.getAppVersion(), '2.2.9') === 0) {
                // Vue.toast('请前往【拍卖管理】发布拍卖活动商品');
                throw makeError(PREVENTCODE.appVersionPrevent, PREVENTMSG.jumpAppVersionPrevent, {
                    rule: '/good/upload',
                    h5Prevent: true,
                }, to);
            } else {
                return to;
            }
        },
    },
];

function isAppPath(path) {
    return /^zdwh:\/\/wwdz\/\w*/.test(path);
}
// 跳转H5，失败则抛出错误
const callLib = new CallApp();
async function jumpH5(to, prevent, sourceError, emitEvent, options) {
    try {
        to = await convertUrlFromH5ToH5(to);
        if (!ua.isApp() && !ua.isWechatMiniProgram() && options.callApp) {
            try {
                const callAppTo = await convertUrlFromH5ToCallapp(fn.clone(to), options);
                if (callAppTo.path) {
                    callLib.open(callAppTo);
                    return prevent(PREVENTMSG.callappPrevent);
                }
            } catch (error) {
                console.log(error);
                // TODO:转callapp失败后如何处理？
            }
        }
        return to;
    } catch (error) {
        return prevent(sourceError || error, true);
    }
}
// 国风好物小程序跳转到底部三个tab页需要用switchTab
async function switchTab(url) {
    return new Promise((resolve, reject) => {
        window.wx.miniProgram.switchTab({
            url,
            success(res) {
                resolve(res);
            },
            fail(res) {
                reject(res);
            },
        });
    });
}
// 小程序内，尝试跳到小程序页面，如果失败，跳H5
async function jumpXcx(to, prevent, emitEvent, options) {
    try {
        to = await convertUrlFromH5ToXcx(to);
        const {
            path, query,
        } = to;
        // 国风好物小程序由于使用小程序默认tab跳转底部三个页面的方式要改成switchTab的方式
        if (window.hidewwdz && (path.indexOf('/home/index') !== -1 || path.indexOf('/personal/center') !== -1 || path.indexOf('/news/index') !== -1)) {
            await switchTab(path);
        } else {
            if (options && options.closeWebview) {
                await WxSdk.wxMiniProgramRedirectTo(fn.stringifyUrl(path, query));
            } else {
                await WxSdk.wxMiniProgramNavigateTo(fn.stringifyUrl(path, query));
            }
        }
    } catch (error) {
        return jumpH5(to, prevent, error);
    }
    emitEvent('beforeNavigate', to);
    return prevent(PREVENTMSG.jumpXcx);
}

// App内，尝试跳转到app，如果失败，则跳到H5
async function jumpApp(to, prevent, emitEvent) {
    try {
        to = await convertUrlFromH5ToApp(to);
        const {
            path, query, pluginName, functionName,
        } = to;
        if (pluginName && functionName) {
            await hdp.exec(pluginName, functionName, query);
        } else {
            await hdp.exec('PluginRouter', 'jumpApp', {
                linkUrl: fn.stringifyUrl(path, query),
            });
        }
    } catch (error) {
        return jumpH5(to, prevent, error);
    }
    emitEvent('beforeNavigate', to);
    return prevent(PREVENTMSG.jumpApp);
}

// 将H5或者app链接转换为App链接，error表示转换失败，还是跳H5
async function convertUrlFromH5ToApp(to) {
    if (isAppPath(to.path)) {
        return to;
    }
    const {
        query,
    } = to;

    const ruleList = (await getH5RuleList(to)) || [];
    let rule;
    if (ruleList.length > 0) {
        const accordMinList = ruleList.filter(checkMinVersion);
        if (accordMinList.length > 0) {
            const accordMaxList = accordMinList.filter(checkMaxVersion);
            rule = accordMaxList[0] || {};
        } else { throw makeError(PREVENTCODE.appVersionPrevent, PREVENTMSG.jumpAppVersionPrevent, rule, to); }
    } else {
        rule = {};
    }
    const {
        appUrl, queryRule, pluginName, functionName, queryValueMap,
    } = rule;
    const h5 = rule.h5 || rule.rule;
    if (h5) {
        if (typeof rule.callback === 'function') {
            return rule.callback(to);
        } else if (appUrl) {
            to.path = 'zdwh://wwdz' + appUrl;
            to.query = processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(query)));
            return to;
        } else if (pluginName && functionName) {
            to.pluginName = pluginName;
            to.functionName = functionName;
            to.query = processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(query)));
            return to;
        }
    }
    throw new Error('not found rule for h5 convert to app');
}

// 将H5或者app链接转换为小程序链接，error表示转换失败，还是跳H5
async function convertUrlFromH5ToXcx(to) {
    if (isAppPath(to.path)) {
        const rule = (await getAppRule(to)) || {};
        const {
            xcx,
        } = rule;
        if (xcx) {
            to.path = '/pages' + xcx;
            return to;
        } else {
            throw makeError(PREVENTCODE.appPrevent, PREVENTMSG.jumpApp, rule, to);
        }
    } else {
        const rule = await getH5Rule(to);
        if (rule) {
            const {
                xcx,
            } = rule;
            if (xcx) {
                to.path = '/pages' + xcx;
                return to;
            } else {
                throw makeError(PREVENTCODE.xcxPrevent, PREVENTMSG.jumpXcx, rule, to);
            }
        }
        throw new Error('not support');
    }
}

// 将H5或者app链接转换为H5链接，error表示转换失败，阻止跳转
async function convertUrlFromH5ToH5(to) {
    if (isAppPath(to.path)) {
        const rule = (await getAppRule(to)) || {};
        const {
            preventH5Jump, base: ruleBase,
        } = rule;
        if (preventH5Jump) {
            throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, rule, to);
        } else {
            const h5 = rule.h5 || rule.rule;
            to.path = h5;
            to.base = ruleBase || '/mall-web';
            to.origin = location.origin;
            return to;
        }
    } else {
        const rule = (await getH5Rule(to)) || {};
        const {
            preventH5Jump,
        } = rule;
        if (preventH5Jump) {
            throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, rule, to);
        }
    }
    if (isAppPath(to.path)) {
        throw makeError(PREVENTCODE.h5Prevent, PREVENTMSG.jumpH5Prevent, {}, to);
    }
    return to;
}

// 将H5链接转换为callapp对象，error表示转换失败，阻止跳转
async function convertUrlFromH5ToCallapp(to, options) {
    const rule = (await getH5Rule(to)) || {};
    const {
        appUrl, queryRule, queryValueMap,
    } = rule;
    let jumpUrl;
    if (appUrl) {
        jumpUrl = fn.stringifyUrl('zdwh://wwdz' + appUrl, processMappingQuery(queryRule, queryValueMap, addReferRtp(location.href, fn.clone(to.query))));
    } else {
        jumpUrl = fn.stringifyUrl(`${to.origin || ''}${(to.base && to.base !== '/') ? to.base : ''}${to.path || ''}`, to.query) + (to.hash ? `#${to.hash}` : '');
    }
    const res = {
        path: 'openApp',
        param: {
            jumpUrl: encodeURIComponent(jumpUrl),
            referUrl: encodeURIComponent(location.href),
        },
    };
    if (!options.forcedDownload) {
        res.callback = () => {
            wLocation.push(options.redirectUrl || to);
        };
    }
    return res;
}

// 获取h5链接规则列表
async function getH5RuleList(to) {
    let {
        path, base,
    } = to;
    const rules = await getRouterRules();
    const h5Result = rules.h5Result;
    // 处理path带有时间戳的匹配不到的问题；
    if (path && /(.*)\/(\d{13})$/.test(path)) {
        path = RegExp.$1;
    }
    const rulersKey = (base || '') + path;
    const ruleList = h5Result[rulersKey];
    return ruleList;
}

// 获取h5链接规则列表的第一项
async function getH5Rule(to) {
    const ruleList = (await getH5RuleList(to)) || [];
    return ruleList[0];
}

// 获取app规则
async function getAppRule(to) {
    const rules = await getRouterRules();
    const appResult = rules.appResult;
    let key = to.path;
    // 对flutter路由特殊处理
    if (to.path === 'zdwh://wwdz/flutter/page') {
        key = fn.stringifyUrl(to.path, {
            routeUrl: to.query.routeUrl,
        });
    }
    const rule = appResult[key];
    return rule;
}

let _routerRulesCache;

async function getRouterRules() {
    if (!_routerRulesCache) {
        _routerRulesCache = RS.getList(isApiDev() ? 468 : 81, false).then(res => {
            return res.concat(defaultRules);
        }).catch(err => {
            console.log(err);
            _routerRulesCache = null;
            return [].concat(defaultRules);
        }).then(res => {
            const h5Result = {};
            const appResult = {};
            res.forEach(item => {
                const h5Rule = item.h5 || item.rule;
                const ruleBase = item.base || '/mall-web';
                const key = ruleBase + h5Rule;
                if (!h5Result[key]) {
                    h5Result[key] = [];
                }

                h5Result[key].push(item);

                // 默认mall-web的跳转映射，兼容写法，新项目中不应该用到它，否则认为是有问题的
                const defaultKey = '/mall-web' + h5Rule;
                if (key !== defaultKey) {
                    if (!h5Result[defaultKey]) {
                        h5Result[defaultKey] = [];
                    }
                    h5Result[defaultKey].push(item);
                }
                if (item.appUrl) {
                    const appKey = `zdwh://wwdz${item.appUrl}`;
                    if (!appResult[appKey]) appResult[appKey] = item;
                }
            });
            Object.keys(h5Result).filter(key => h5Result[key].length > 1).forEach(key => {
                const item = h5Result[key];
                item.sort((a, b) => {
                    const res = sortByMinVersion(a, b);
                    if (res === 0) {
                        return sortByMaxVersion(a, b);
                    }
                    return res;
                });
            });
            return {
                h5Result,
                appResult,
            };
        });
    }
    return _routerRulesCache;
}

// 根据最低版本号比较 sort比较函数
function sortByMinVersion(a, b) {
    const aMinVersion = getMinVersion(a);
    const bMinVersion = getMinVersion(b);
    return -fn.compareVersion(aMinVersion, bMinVersion);
}

// 根据最高版本号比较 sort比较函数
function sortByMaxVersion(a, b) {
    const aMaxVersion = getMaxVersion(a);
    const bMaxVersion = getMaxVersion(b);
    return fn.compareVersion(aMaxVersion, bMaxVersion);
}

// 获取规则最低版本号
function getMinVersion(rule) {
    const isAndroidApp = ua.isAndroidApp();
    return (rule.minVersion || (isAndroidApp ? rule.androidVersion : rule.iosVersion) || '0.0.0');
}

// 获取规则最高版本号
function getMaxVersion(rule) {
    const isAndroidApp = ua.isAndroidApp();
    return (rule.maxVersion || (isAndroidApp ? rule.androidMaxVersion : rule.iosMaxVersion) || '9999.9999.9999');
}
// TODO: 处理app query转h5
// 处理query参数转换h5转app
function processMappingQuery(queryKeyRule, queryValueMap, query) {
    const newQuery = fn.clone(query);
    if (queryKeyRule) {
        const ruleList = queryKeyRule.split(';');
        ruleList.forEach(rule => {
            if (rule) {
                const kv = rule.split(':');
                const k = kv[0];
                const v = kv[1];
                if (query[k]) {
                    newQuery[v] = query[k];
                }
            }
        });
    }
    if (queryValueMap) {
        queryValueMap.split(';').forEach(keyMap => {
            if (!keyMap) return;
            const keyMapList = keyMap.split('::');
            const key = keyMapList[0];
            const map = {};
            if (!keyMapList[1]) return;
            keyMapList[1].split(',').forEach(mapStr => {
                const kv = mapStr.split(':');
                const k = kv[0];
                const v = kv[1];
                map[k] = v;
            });
            if (newQuery[key]) {
                const value = newQuery[key];
                if (map[value]) {
                    newQuery[key] = map[value];
                }
            }
        });
    }
    return newQuery;
}

// 比较app版本是否符合规则最低版本限制
function checkMinVersion(config) {
    return fn.compareVersion(ua.getAppVersion(), getMinVersion(config)) >= 0;
}

// 比较app版本是否符合规则最高版本限制
function checkMaxVersion(config) {
    return fn.compareVersion(ua.getAppVersion(), getMaxVersion(config)) <= 0;
}

function makeError(code, message, config, to) {
    const error = new Error(message);
    error.code = code;
    error.config = config;
    error.to = to;
    return error;
}

getRouterRules();

/**
 *  四端跳转插件
 * @param {WLocation} to 目标路由对象
 * @param {WLocation} from 当前路由对象
 * @param {Function} prevent 生成阻止跳转的返回值
 * @param {EventEmitter} eventCenter 事件中心（插件和location直接交互信息）
 * @param {Object} options 配置项
 * @param {boolean} options.callApp h5内跳转目标页是否要打开app
 * @param {String} options.redirectUrl 唤起失败的回跳地址，默认跳转到目标路由
 * @param {boolean} options.forcedDownload 此次跳转是否强制下载app（不下载不能打开目标页面）
 * @param {boolean} options.jumpH5 此次强制跳转h5页面
 */
export default function replace(to, from, prevent, eventCenter, options) {
    if (options.jumpH5) {
        return jumpH5(to, prevent, null, emitEvent, options);
    }
    if (ua.isApp()) {
        return jumpApp(to, prevent, emitEvent, options);
    } else if (ua.isWechatMiniProgram() || WxSdk._isMiniProgram) {
        return jumpXcx(to, prevent, emitEvent, options);
    } else {
        return jumpH5(to, prevent, null, emitEvent, options);
    }
    function emitEvent(event, to) {
        eventCenter.$emit(event, to, from);
    }
}
