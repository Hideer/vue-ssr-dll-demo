// import * as Sentry from '@sentry/browser'
// import { Event, Response, TransportOptions } from '@sentry/types'
// import * as Integrations from '@sentry/integrations'
import { types, env, IOption, IErrorOpt, IConfig, IUserOrTag } from './types'
import { ERROR_TYPE, ERROR_LEVEL } from './utils'
import MyError from './errorClass'
// import { logR } from '@wanwu/base-logger'

// const xcxClass = (option: IOption) => {
//     return class SentryTransport extends Sentry.Transports.BaseTransport {
//         constructor(props: TransportOptions) {
//             super(props)
//         }
//         // @ts-ignore
//         sendEvent(event: Event): PromiseLike<Response> {
//             return this._buffer.add(
//                 new Promise(
//                     (
//                         resolve: (arg0: { status: Sentry.Status }) => void,
//                         reject: { (arg0: any): void; (arg0: any): void },
//                     ) => {
//                         option.wx.request({
//                             url: this.url,
//                             data: JSON.stringify(event),
//                             dataType: 'json',
//                             method: 'POST',
//                             success(res: any) {
//                                 if (res.statusCode === 200) {
//                                     resolve({
//                                         status: Sentry.Status.fromHttpCode(res.statusCode),
//                                     })
//                                 } else {
//                                     reject(res)
//                                 }
//                             },
//                             fail(error: any) {
//                                 reject(error)
//                             },
//                         })
//                     },
//                 ),
//             )
//         }
//     }
// }

const wanwuSentry = () => {
    let myEnv: env
    const ignoreRules = [
        // https://sentry2.maka.im/maka/store3-web/issues/1183/
        /Blocked a frame with origin/g,
        // https://sentry2.maka.im/maka/store3-web/issues/1027/
        /vivoNewsDetailPage.getNewsReadStatus4Vivo/g,
        /未登录/g,
        /hdp:环境不是容器/g,
        /JSCallBackMethodManager/g,
        /支付失败，请重新支付/g,
        /wwdzBridge/g,
        /token is nil/g,
        /wwdzBridge.successCallback_/g,
        /Custom Object/,
        /Failed to execute 'setItem' on 'Storage'/g,
        /QuotaExceededError/g,
    ]

    /**
     * 低版本不支持的浏览器不上报
     */
    const captureExceptionFilterForBrowser = () => {
        const ua: any = window.navigator.userAgent.toLowerCase()
        const browser: any = {}
        let s
        /* eslint-disable */
        if ((s = ua.match(/rv:([\d.]+)\) like gecko/))) {
            browser.name = 'ie'
            browser.version = Number(s[1])
        } else if ((s = ua.match(/msie ([\d.]+)/))) {
            browser.name = 'ie'
            browser.version = Number(s[1])
        }
        /* tslint-disable */
        if (browser.name === 'ie' && browser.version < 11) {
            return true
        } else {
            return false
        }
    }
    /**
     * 过滤错误
     * @param value
     */
    const isMatchedIgnoreRules = (value: any, arr: RegExp[] | undefined) => {
        if (!value) {
            return false
        }
        let ignoreArr: RegExp[] = ignoreRules
        if (arr) {
            ignoreArr = ignoreArr.concat(arr)
        }
        /* tslint-disable*/
        for (let i = 0; i < ignoreArr.length; i++) {
            if (ignoreArr[i].test(value)) {
                return true
            }
        }
        /* tslint-disable*/
        return false
    }
    /**
     * 初始化sentry
     * @param option
     */
    const init = (option: IOption) => {
        // myEnv = option.env
        // if (!myEnv) {
        //     throw new Error('请指明运行环境xcx|vue|javascript')
        // }

        // const baseOpt = {
        //     dsn: option.dsn,
        //     environment: option.environment,
        //     beforeBreadcrumb(breadcrumb: Sentry.Breadcrumb, hint: any) {
        //         if (option.beforeBreadcrumb) {
        //             breadcrumb = option.beforeBreadcrumb(breadcrumb, hint)
        //         }
        //         return breadcrumb
        //     },
        //     beforeSend(event: Sentry.Event, hint: any) {
        //         if (option.beforeSend) {
        //             event = option.beforeSend(event, hint)
        //         } else {
        //             const values: any = event.exception ? event.exception.values : undefined
        //             const tags = event.tags ? event.tags : {}
        //             const shouldIgnore =
        //                 values &&
        //                 values.some((value: any) => {
        //                     return (
        //                         value.type === 'UnhandledRejection' ||
        //                         isMatchedIgnoreRules(value.value, option.ignoreErrors)
        //                     )
        //                 })
        //             if (values && values[0]) {
        //                 const type = values[0].type
        //                 const value = values[0].value
        //                 switch (type) {
        //                     case 'RangeError':
        //                         tags.errType = '数值变量或参数超出其有效范围'
        //                         tags.newLevel = ERROR_LEVEL.Error
        //                         setErrorLevel(ERROR_LEVEL.Error)
        //                         break
        //                     case 'ReferenceError':
        //                         tags.errType = '无效引用'
        //                         tags.newLevel = ERROR_LEVEL.Warning
        //                         setErrorLevel(ERROR_LEVEL.Warning)
        //                         break
        //                     case 'SyntaxError':
        //                         tags.errType = 'eval()解析错误'
        //                         tags.newLevel = ERROR_LEVEL.Error
        //                         setErrorLevel(ERROR_LEVEL.Error)
        //                         break
        //                     case 'TypeError':
        //                         tags.errType = '变量或参数不属于有效类型'
        //                         tags.newLevel = ERROR_LEVEL.Warning
        //                         setErrorLevel(ERROR_LEVEL.Warning)
        //                         break
        //                     case 'URIError':
        //                         tags.errType = 'URI处理错误'
        //                         tags.newLevel = ERROR_LEVEL.Error
        //                         setErrorLevel(ERROR_LEVEL.Error)
        //                         break
        //                     default:
        //                         tags.errType = '未知错误'
        //                         tags.newLevel = ERROR_LEVEL.Info
        //                         setErrorLevel(ERROR_LEVEL.Info)
        //                 }
        //                 // 方便阅读
        //                 values[0].type = value
        //                 values[0].value = type
        //             }
        //             if (shouldIgnore || captureExceptionFilterForBrowser()) {
        //                 return null
        //             }
        //             // @ts-ignore
        //             const errorInfo = {
        //                 event_id: event.event_id,
        //                 // @ts-ignore
        //                 message: event.exception.values[0].type,
        //                 // @ts-ignore
        //                 sdk: event.sdk.packages[0].name + event.sdk.packages[0].version,
        //                 // @ts-ignore
        //                 type: event.exception.values[0].value,
        //                 // @ts-ignore
        //                 level: event.tags.newLevel,
        //             }
        //             logR('sentry', 1, errorInfo, ['event_id', 'message', 'sdk', 'type', 'level'])
        //             return event
        //         }
        //         return event
        //     },
        // }
        // Sentry.onLoad(() => {
            // if (myEnv === 'vue' && option.vue) {
            //     const vueOpt = {
            //         ...baseOpt,
            //         integrations: [
            //             new Integrations.Vue({
            //                 Vue: option.vue,
            //                 attachProps: true,
            //             }),
            //             new Sentry.Integrations.InboundFilters({
            //                 ignoreErrors: option.ignoreErrors || [],
            //                 blacklistUrls: option.blacklistUrls || [],
            //                 whitelistUrls: option.whitelistUrls || [],
            //             }),
            //         ],
            //     }
            //     Sentry.init(vueOpt)
            //     setConfig({
            //         vue: option.vue,
            //         env: option.env,
            //         window: option.window,
            //     })
            // } else if (myEnv === 'xcx' && option.wx) {
            //     const SentryTransport = xcxClass(option)
            //     const xcxOpt = {
            //         ...baseOpt,
            //         transport: SentryTransport,
            //         integrations: [
            //             new Sentry.Integrations.InboundFilters({
            //                 ignoreErrors: option.ignoreErrors || [],
            //                 blacklistUrls: option.blacklistUrls || [],
            //                 whitelistUrls: option.whitelistUrls || [],
            //             }),
            //         ],
            //     }
            //     // @ts-ignore
            //     Sentry.init(xcxOpt)
            //     setConfig({
            //         env: option.env,
            //         wx: option.wx,
            //     })
            // } else {
            //     const javascriptOpt = {
            //         ...baseOpt,
            //         integrations: [
            //             new Sentry.Integrations.InboundFilters({
            //                 ignoreErrors: option.ignoreErrors,
            //                 blacklistUrls: option.blacklistUrls,
            //                 whitelistUrls: option.whitelistUrls,
            //             }),
            //         ],
            //     }
            //     Sentry.init(javascriptOpt)
            //     setConfig({
            //         window: option.window,
            //         env: option.env,
            //     })
            // }

            // if (option.callback) {
            //     option.callback()
            // }
        // })
    }

    /**
     * 全局捕获上报错误类型
     * @param err
     */
    const setError = (err: any) => {
        return
        // if (!err.ConfirmReport && err.errorType === ERROR_TYPE.Xhr) {
        //     return
        // }
        // Sentry.withScope(scope => {
        //     if (err.errorType) {
        //         scope.setTag('errorType', err.errorType)
        //     }
        //     Sentry.captureException(err)
        // })
    }

    /**
     * 设置错误等级
     * @param err
     */
    const setErrorLevel = (level: any) => {
        // Sentry.withScope(scope => {
        //     scope.setLevel(level)
        // })
    }

    /**
     * 对外暴露的上报错误API
     * @param err
     */
    const logError = (err: any) => {
        setError(err)
    }

    // 设置上自己的错误类型
    const setMySentryError = (opt: IErrorOpt) => {
        const cError: any = new MyError(opt)
        return cError
    }

    // 全局捕获的错误API
    const fnErrorTrap = (err: any) => {
        setError(err)
    }

    // 设置用户相关
    const setUserOrTag = (opt: IUserOrTag) => {
        // const { user, tags, tag, content } = opt
        // if (user) {
        //     Sentry.setUser(user)
        // }
        // if (tags) {
        //     Sentry.setTags(tags)
        // }
        // if (tag) {
        //     Sentry.setTag(tag.key, tag.value)
        // }
        // if (content) {
        //     Sentry.setContext(content.key, content.value)
        // }
    }

    // 设置配置
    const setConfig = (opt: IConfig) => {
        const { wx, window, vue } = opt
        if (myEnv === 'vue' && vue) {
            vue.config.errorHandler = fnErrorTrap
            if (window) {
                window.onerror = fnErrorTrap
            }
        } else if (myEnv === 'xcx') {
            if (wx.canIUse && wx.canIUse('onError')) {
                wx.onerror = fnErrorTrap
            }
        } else {
            if (window) {
                window.onerror = fnErrorTrap
            }
        }
    }

    return {
        init,
        logError,
        setMySentryError,
        setUserOrTag,
        ERROR_TYPE,
        ERROR_LEVEL,
    }
}

export default wanwuSentry()
