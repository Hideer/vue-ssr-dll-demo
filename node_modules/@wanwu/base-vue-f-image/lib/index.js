'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.function.name');
require('core-js/modules/es.array.concat');
require('core-js/modules/es.array.includes');
require('core-js/modules/es.array.index-of');
require('core-js/modules/es.number.constructor');
require('core-js/modules/es.number.to-fixed');
require('core-js/modules/es.parse-float');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.string.includes');
require('core-js/modules/es.string.replace');
require('core-js/modules/es.string.split');
var baseVueDirectiveLazy = require('@wanwu/base-vue-directive-lazy');
var numToRem = _interopDefault(require('@wanwu/base-vue-filters-num-to-rem'));
var vueRuntimeHelpers = require('@wanwu/vue-runtime-helpers');

var lazy = baseVueDirectiveLazy.getLazyFn({
  loading: 'https://cdn.wanwudezhi.com/seller-admin/image/MTU1NDk2MjkxNzI2Nw==.png',
  error: 'https://cdn.wanwudezhi.com/seller-admin/image/MTU1NDk2Mjk3MzczMw==.png'
});
var script = {
  name: 'FImage',
  directives: {
    lazy: lazy
  },
  props: {
    // 图片裁剪尺寸宽度
    cutWidth: {
      type: [Number, String],
      "default": 0,
      validator: function validator(val) {
        return !isNaN(Number(val));
      }
    },
    // 图片裁剪尺寸高度
    cutHeight: {
      type: [Number, String],
      "default": 0,
      validator: function validator(val) {
        return !isNaN(Number(val));
      }
    },
    // 图片裁剪尺寸宽度
    width: {
      type: [Number, String],
      "default": '',
      validator: function validator(val) {
        return !isNaN(Number(val));
      }
    },
    // 图片裁剪尺寸高度
    height: {
      type: [Number, String],
      "default": '',
      validator: function validator(val) {
        return !isNaN(Number(val));
      }
    },
    // 图片地址
    src: {
      type: String,
      "default": ''
    },
    // 图片描述文本
    alt: {
      type: String,
      "default": ''
    },
    // 图片格式
    format: {
      type: String,
      "default": ''
    },
    // 水印（使用水印后图片的基础处理imageView2无效）
    watermarkString: {
      type: String,
      "default": ''
    },
    // 是否支持渐进显示 取值范围：1 支持渐进显示，0不支持渐进显示(默认为0) 适用jpg目标格式
    interlace: {
      type: Number,
      "default": 1
    },
    // 生成图片的质量：1-100，适用jpg目标格式
    quality: {
      type: Number,
      "default": 75
    },
    // 是否开启懒加载
    lazyLoad: {
      type: Boolean,
      "default": true
    }
  },
  data: function data() {
    return {
      isSupportWebP: false,
      baseWidth: 375,
      // 默认基础屏幕尺寸
      styleWidth: 0,
      styleHeight: 0,
      remRatio: 1,
      cdnUrlPattern: /^http(s?):\/\/cdn\.wanwudezhi\.com/
    };
  },
  computed: {
    Dpr: function Dpr() {
      var DPR = Math.max(2, window.devicePixelRatio);
      return DPR ? Math.ceil(DPR) : 3;
    },
    imageSrc: function imageSrc() {
      if (this.getImageUrl) {
        if (this.watermarkString) {
          var originUrl = this.getOriginImage(this.getImageUrl);
          return "".concat(originUrl, "?").concat(this.watermarkString);
        }

        return this.getImageUrl;
      } else {
        return '';
      }
    },
    imgStyle: function imgStyle() {
      return {
        width: numToRem(this.width),
        height: numToRem(this.height)
      };
    },
    // 尺寸处理
    getSize: function getSize() {
      // 若使用用户传入的尺寸，先转换为1倍，然后根据baseWidth确定是以414为标准还是375位标准；
      var _width = (this.cutWidth || this.width) / 2 * (this.baseWidth / 375);

      var _height = (this.cutHeight || this.height) / 2 * (this.baseWidth / 375); // 若通过style中读取，用读取值乘以remRatio的倒数进行处理，保证和用户传入的数据保持一致；


      var _styleWidth = this.styleWidth * (1 / this.remRatio);

      var _styleHeight = this.styleHeight * (1 / this.remRatio); // 以用户传入的width和height作为最高准则，若没有则兼容style的尺寸；


      return {
        width: Math.ceil((_width || _styleWidth) * this.Dpr),
        height: Math.ceil((_height || _styleHeight) * this.Dpr)
      };
    },
    getImageUrl: function getImageUrl() {
      // 通过判断避免加载两次图片
      var noSize = !this.cutWidth && !this.cutHeight && !this.height && !this.width && !this.styleWidth && !this.styleHeight;
      if (noSize || !this.src) return; // const width = parseInt(((this.cutWidth / 2 * this.remRatio) || this.styleWidth) * this.Dpr);
      // const height = parseInt(((this.cutHeight / 2 * this.remRatio) || this.styleHeight) * this.Dpr);

      var cutWidth = this.getSize.width;
      var cutHeight = this.getSize.height;
      var suffix = this.src.replace(/^.*\.(\w+)$/, '$1');
      var format = 'webp'; // 处理ios新版手机的新的图片格式的问题

      if (suffix.toUpperCase() === 'HEIC' || suffix.toUpperCase() === 'HEIF') {
        format = 'jpg';
      } else {
        if (this.format === 'webp' || !this.format) {
          format = this.isSupportWebP ? 'webp' : suffix || 'jpg';
        } else {
          format = this.format;
        }
      }

      var imageQuery = ''; // // 减少不同尺寸的图片的格式；以50为间隔进行处理
      // cutWidth = Math.ceil(cutWidth / 50) * 50;
      // cutHeight = Math.ceil(cutHeight / 50) * 50;
      // 之前处理过的图片 或 base64的 不在处理
      // const originUrl = this.getOriginImage(this.src);

      var base64Reg = /^data:image\/\w+;base64,.+$/;

      if (this.src.includes('imageView2') || base64Reg.test(this.src)) {
        return this.src;
      }

      if (cutWidth && cutHeight) {
        imageQuery = "imageView2/1/w/".concat(cutWidth, "/h/").concat(cutHeight, "/format/").concat(format);
      } else if (cutWidth) {
        imageQuery = "imageView2/2/w/".concat(cutWidth, "/format/").concat(format);
      } else if (cutHeight) {
        imageQuery = "imageView2/2/h/".concat(cutHeight, "/format/").concat(format);
      } // 渐进显示和图片质量控制


      if (suffix === 'jpg') {
        imageQuery = "".concat(imageQuery, "/interlace/").concat(this.interlace, "/q/").concat(this.quality);
      } // if (!this.styleWidth && !this.styleHeight) return null;


      return "".concat(this.src, "?").concat(imageQuery);
    },
    hasSetSize: function hasSetSize() {
      return this.cutWidth && this.cutHeight || this.width && this.height;
    }
  },
  created: function created() {
    // 避免同一个页面过多使用querySelector影响性能，通过挂载window的方式减少querySelector访问；
    if (window.__remRatio__) {
      this.remRatio = window.__remRatio__;
    } else {
      // 最大的remRatio限制为2；
      this.remRatio = Math.min(window.innerWidth, 750) / this.baseWidth || 1;
      window.__remRatio__ = this.remRatio;
    } // 判断浏览器是否支持webp格式(缓存挂载window上)


    if (window.__supportWebP__) {
      this.isSupportWebP = window.__supportWebP__;
    } else {
      try {
        this.isSupportWebP = document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') === 0;
      } catch (err) {
        this.isSupportWebP = false;
      }

      window.__supportWebP__ = this.isSupportWebP;
    }
  },
  mounted: function mounted() {
    !this.cutWidth && !this.cutHeight && !this.width && !this.height && this.getStyle();
  },
  methods: {
    getStyle: function getStyle() {
      // this.$nextTick(() => {
      var ele = this.$refs.__imgCompontent__;

      var _window$getComputedSt = window.getComputedStyle(ele),
          _window$getComputedSt2 = _window$getComputedSt.width,
          width = _window$getComputedSt2 === void 0 ? 0 : _window$getComputedSt2,
          _window$getComputedSt3 = _window$getComputedSt.height,
          height = _window$getComputedSt3 === void 0 ? 0 : _window$getComputedSt3;

      this.styleWidth = Number(parseFloat(width).toFixed(2));
      this.styleHeight = Number(parseFloat(height).toFixed(2));
      if (!this.styleWidth && !this.styleHeight) console.error('获取图片尺寸失败！！'); // });
    },
    checkIsCdnUrl: function checkIsCdnUrl(url) {
      return this.cdnUrlPattern.test(url);
    },
    getOriginImage: function getOriginImage(url) {
      if (!this.checkIsCdnUrl(url)) {
        return url;
      }

      return url && url.split('?')[0] || '';
    },
    imgClick: function imgClick() {
      // 点击图片的回调
      this.$emit('click', this.imageSrc);
    }
  }
};

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _vm.lazyLoad && _vm.hasSetSize ? _c('img', {
    directives: [{
      name: "lazy",
      rawName: "v-lazy:[{width:(cutWidth||width),height:(cutHeight||height)}]",
      value: _vm.imageSrc,
      expression: "imageSrc",
      arg: {
        width: _vm.cutWidth || _vm.width,
        height: _vm.cutHeight || _vm.height
      }
    }],
    ref: "__imgCompontent__",
    staticClass: "component__UnifyImage",
    style: _vm.imgStyle,
    attrs: {
      "alt": _vm.alt
    },
    on: {
      "click": _vm.imgClick
    }
  }) : _vm.lazyLoad && !_vm.hasSetSize ? _c('img', {
    directives: [{
      name: "lazy",
      rawName: "v-lazy",
      value: _vm.imageSrc,
      expression: "imageSrc"
    }],
    ref: "__imgCompontent__",
    staticClass: "component__UnifyImage",
    style: _vm.imgStyle,
    attrs: {
      "alt": _vm.alt
    },
    on: {
      "click": _vm.imgClick
    }
  }) : !_vm.lazyLoad ? _c('img', {
    ref: "__imgCompontent__",
    staticClass: "component__UnifyImage",
    style: _vm.imgStyle,
    attrs: {
      "src": _vm.imageSrc,
      "alt": _vm.alt
    },
    on: {
      "click": _vm.imgClick
    }
  }) : _vm._e();
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = "data-v-0ff13b34";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
};

exports.default = __vue_component__;
