/*
 * @Descripttion:
 * @version: 0.0.0
 * @Author: fenghe
 * @Date: 2019-12-16 15:11:51
 * @LastEditors: Please set LastEditors
 */
import Axios from './http';
import {
    ua, fn,
} from '@wanwu/base-fn';
// import {
//     encrypt,
// } from '@wanwu/crypto';
import webConfig, {
    getConstID,
    getUUID,
    getWebUmidToken,
} from '@wanwu/mall-web-config';
import md5 from 'md5';
import {
    getToken,
} from '@wanwu/base-sdk-token-manager';

let AppVersion = '2.0.0';

const protocol = location.protocol;
const axios = new Axios({
    requestInterceptor: [
        async (config, option, source) => {
            if (!config.withoutCancelToken) {
                config.cancelToken = source.token;
            } else {
                config.cancelToken = null;
            }
            const {
                url, data,
            } = config;

            const token = option.getToken();
            let deviceinfo = 'h5';
            if (ua.isIOSApp()) deviceinfo = 'iOS';
            if (ua.isAndroidApp()) deviceinfo = 'Android';
            if (ua.isWechatMiniProgram()) deviceinfo = 'xcx';
            const appversion = ua.getAppVersion() || AppVersion;
            const systemversion = '1.0.0';
            const timestamp = parseInt(Date.now() / 1000);
            const requestTime = Date.now();
            const salt = 'zdwhH5#!@';
            const sign = md5(
                [
                    deviceinfo,
                    appversion,
                    systemversion,
                    timestamp,
                    salt,
                ].join('-'),
            ).toUpperCase();
            const deviceNum = await getUUID() || '';
            const customHeader = {
                deviceinfo,
                appversion,
                systemversion,
                timestamp,
                requestTime,
                sign,
                deviceNum,
            };

            if (config.fingerprint) {
                try {
                    customHeader['deviceToken'] = await getWebUmidToken();
                } catch (error) {
                    customHeader['deviceToken'] = '';
                    console.log(error);
                }
            }
            config.headers.common = Object.assign({}, config.headers.common, customHeader);

            if (token && !config.withoutToken) {
                config.headers.common[webConfig.AuthorizationKey] = token;
            }

            // if (config.encrypt) {
            //     if (typeof data !== 'undefined') {
            //         const originText = JSON.stringify(data);
            //         const cipherText = encrypt(originText);
            //         config.data = {
            //             cipherText,
            //         };
            //     }
            // }

            const __env = fn.getQueryString('__env');

            if (!/^http(s)?:\/\//.test(url)) {
                let prefix;
                if (/^api\//.test(url)) {
                    // `api/`开头
                    prefix = '/';
                } else if (/^\//.test(url)) {
                    // `/`开头
                    prefix = '';
                } else {
                    prefix = '/api/v1/mall/';
                }

                if (__env === 'useip') {
                    const useip = fn.getQueryString('__useip');
                    const useport = fn.getQueryString('__useport');
                    config.url = `http://${useip}:${useport || 8085}` + prefix + url;
                } else if (__env === 'dev') {
                    config.url = 'http://mall-portal-dev2.wanwudezhi.com' + prefix + url;
                } else if (__env === 'dev3') {
                    // 测试环境3
                    config.url = 'http://mall-portal-dev3.wanwudezhi.work' + prefix + url;
                } else if (__env === 'develop') {
                    // 测试环境（日常环境）
                    config.url = 'http://gitlab.wanwudezhi.com' + prefix + url;
                } else if (__env === 'pre') {
                    // 预发环境
                    config.url = protocol + '//pre-portal.wanwudezhi.com' + prefix + url;
                } else {
                    // 生产环境
                    config.url = 'https://api.wanwudezhi.com' + prefix + url;
                }
                // config.url = 'http://192.168.0.30:8085' + prefix + url;
            }
            return config;
        },
    ],
    formatRes: res => res.result,
    getToken: getToken,
});

function setAppVersion(version) {
    AppVersion = version;
}

export const initSource = axios.initSource;
export const cancel = axios.cancel;

// 兼容原先写法....
// export default {
//     get: function (url, {
//         params,
//         ...config
//     } = {},config) {
//         return axios.sendAxios('get', url, params, config);
//     },
//     delete: function (url, {
//         params,
//         ...config
//     } = {}) {
//         return axios.sendAxios('delete', url, params, config);
//     },
//     post: function (url, params, config) {
//         return axios.sendAxios('post', url, params, config);
//     },
//     put: function (url, params, config) {
//         return axios.sendAxios('put', url, params, config);
//     },
// };

const instance = axios.instance;
instance.sendAxios = axios.sendAxios;
instance.sendAxios.get = (url, params, config) => instance.sendAxios('get', url, params, config);
instance.sendAxios.delete = (url, params, config) => instance.sendAxios('delete', url, params, config);
instance.sendAxios.post = (url, params, config) => instance.sendAxios('post', url, params, config);
instance.sendAxios.put = (url, params, config) => instance.sendAxios('put', url, params, config);
export {
    axios, setAppVersion,
};
export default instance;
