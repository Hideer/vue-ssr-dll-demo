import axios from 'axios'
import Axios from './http';
import { Message, Loading } from 'element-ui'
import * as KEYS from './apiKeys'
import router from '../router/index'
import env from './env' // 当前环境配置
import { deepCopy, ssoLogin } from './utils'
import qs from 'qs'
import store from '../store'

let loadingInstance = null // element loading
const pc_request = new Axios({
    base: { dataType: 'json' },
    requestInterceptor: [
        config => {
            const { notNeedLoading = false } = config
            if (!notNeedLoading) {
                loadingInstance = Loading.service({ fullscreen: true })
            }
            let token = window.storage.getItem(window.storage.keys.USER_TOKEN).token
            if (token) {
                config.headers['Authorization'] = token // 让每个请求携带自定义token 请根据实际情况自行修改
            }
            let Permission = store.state.login.permission
            if (Permission) {
                config.headers['Permission'] = Permission
            }
            return config
        },
        error => {
            loadingInstance && loadingInstance.close()
            // Do something with request error
            Promise.reject(error)
        }
    ]
})
// 响应拦截 -- 接口请求错误处理
_axios.interceptors.response.use(async res => {
  const { config = {} } = res
  const { loadingDelay = 0 } = config
  await new Promise(resolve => {
    setTimeout(() => {
      loadingInstance && loadingInstance.close()
      resolve()
    }, loadingDelay)
  })
  let code
  let message
  if (res.data.code) {
    code = res.data.code
    message = res.data.message
  } else {
    code = (res && res.data && res.data.status && res.data.status.code) || ''
    message = (res && res.data && res.data.status && res.data.status.message) || ''
  }
  // 过滤数字和布尔值
  let filterNumberBoolean = (arg) => {
    let result = arg
    if (typeof arg === 'number' || typeof arg === 'boolean' || arg) {
      result = arg
    } else {
      result = true
    }
    return result
  }
  const successCode = [1001, '1001'] // 成功code
  const warningCode = [5009, 5012] // 警告code
  const noAuthCode = [4001] // 无权限code
  const ssoNoAuthCode = [40010] // sso无权限code
  const errorCode = [5004, 5006, 5007, 50018, 50017, 50019, 50028] // 错误code

  if (successCode.includes(code)) {
    return filterNumberBoolean(res.data.result)
  } else {
    if (warningCode.includes(code)) {
      Message.warning(message || '')
    } else if (errorCode.includes(code)) {
      Message.error(res.data.result || message)
    } else if (noAuthCode.includes(code)) {
      Message.error(message || '登录信息失效，请重新登录')
      window.storage.removeItem(window.storage.keys.USER_INFO)
      window.storage.removeItem(window.storage.keys.USER_TOKEN)
      router.push({ name: 'login' }) // 暂时跳转老的
      // ssoLogin() // 统一跳转sso
    } else if (ssoNoAuthCode.includes(code)) {
      Message.error(message || 'sso登录信息失效，请重新登录')
      ssoLogin()
    } else {
      Message.error(message || `请求错误(${code})`)
    }
    return Promise.reject((res && res.data) || { message: message || `请求错误(${code})` })
  }
}, error => {
  loadingInstance.close()
  if (error.response) {
    switch (error.response.status) {
      case 502:
        console.log('接口异常:' + error.response.status)
        Message.error(`${error.response.status} | 网络错误`)
        break
      case 500:
        console.log('接口异常:' + error.response.status)
        Message.error(`${error.response.status} | 服务器错误`)
        break
      case 400:
        console.log('接口异常:' + error.response.status)
        Message.error(`${error.response.status} | 服务器错误`)
        break
      default :
        Message.error('服务器错误')
    }
  } else {
    Message.error('服务器错误')
  }
  return Promise.reject(error)
})
// 类型转换
const toType = (obj) => {
  return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
}

// 参数trim过滤
const filterNull = (o) => {
  // delete o.total
  for (let key in o) {
    if (o[key] === null) {
      delete o[key]
    }
    if (toType(o[key]) === 'string') {
      o[key] = o[key].trim()
    }
  }
  return o
}

// 封装axios方法
const apiAxios = (method, url, params, option) => {
  const reg = /^\/mock-prefix/g
  const moduleReg = /^[a-zA-z]*::/g // 接口分模块域名可能不同匹配
  let moduleName = ''
  if (moduleReg.test(url)) {
    let urlArr = url.split('::')
    moduleName = urlArr[0]
    url = urlArr[1]
  }
  if (!reg.test(url)) url = (/^http(s)?:\/\//.test(url) ? '' : env.apiDomain(moduleName)) + url
  params = deepCopy(params)
  if (params) {
    params = filterNull(params)
  }
  // const token = window.storage.getItem(window.storage.keys.USER_TOKEN)
  let urlData = option === true ? url + params.id : url
  if (option === true) delete params.id
  let headers = {}
  if (option === 'qs') {
    params = qs.stringify(params)
    headers = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'
      }
    }
  }
  let axiosConfig = {
    method: method,
    url: urlData,
    data: method === 'POST' || method === 'PUT' || method === 'PATCH' ? params : null,
    params: method === 'GET' || method === 'DELETE' ? params : null,
    // 额外配置
    ...option,
    ...headers
  }
  return _axios(axiosConfig)
}

const exportObj = {
  get: (url, params, option) => {
    return apiAxios('GET', url, params, option)
  },
  post: (url, params, option) => {
    return apiAxios('POST', url, params, option)
  },
  put: (url, params, option) => {
    return apiAxios('PUT', url, params, option)
  },
  patch: (url, params, option) => {
    return apiAxios('PATCH', url, params, option)
  },
  delete: (url, params, option) => {
    return apiAxios('DELETE', url, params, option)
  },
  keys: KEYS
}

export default exportObj
