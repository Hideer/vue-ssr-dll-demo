import 'core-js/modules/es.array.includes';
import 'core-js/modules/es.function.bind';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'regenerator-runtime/runtime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import axios$1 from 'axios';
import merge from 'lodash.merge';
import 'core-js/modules/es.string.includes';
import mySentry from '@wanwu/sentry';
import 'core-js/modules/es.array.concat';
import 'core-js/modules/es.array.join';
import 'core-js/modules/es.date.now';
import 'core-js/modules/es.date.to-string';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.parse-int';
import { fn, ua } from '@wanwu/base-fn';
import { encrypt } from '@wanwu/crypto';
import webConfig, { getWebUmidToken, getUUID } from '@wanwu/mall-web-config';
import md5 from 'md5';
import { getToken } from '@wanwu/base-sdk-token-manager';
import * as baseSdkTokenManager from '@wanwu/base-sdk-token-manager';
export { baseSdkTokenManager as tokenManager };

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var baseOption = {
  base: {
    timeout: 100000,
    headers: {
      'Content-Type': 'application/json'
    }
  },
  getToken: function getToken() {
    return sessionStorage.getItem('token');
  },
  tokenKey: 'Authorization',
  successCode: [0, 1001],
  errToast: function errToast() {},
  cbFor401: function cbFor401() {},
  formatErr: function formatErr(err) {
    return err;
  },
  formatRes: function formatRes(data) {
    return data;
  },
  formatData: function formatData(data) {
    return data;
  },
  requestInterceptor: [function (config, option, source) {
    config.cancelToken = source.token;
    var token = option.getToken();
    var tokenKey = option.tokenKey || 'Authorization';

    if (token) {
      // 这里将token设置到headers中，header的key是token，这个key值根据你的需要进行修改即可
      config.headers[tokenKey] = token;
    }

    return config;
  }, function (err, option) {
    return Promise.reject(option.formatErr(err));
  }],
  responseInterceptor: [function (response, option, cancel) {
    var data = response.data;
    var status = response.status;
    var formatErr = option.formatErr;
    var formatRes = option.formatRes;
    var newError = {
      type: mySentry.ERROR_TYPE.Xhr,
      level: mySentry.ERROR_LEVEL.Info,
      ConfirmReport: response.config && response.config.ConfirmReport || null
    };

    if (status === 200 || status === 304) {
      if (response.config.skipFilter) {
        return data;
      } else if (data && (data.success || option.successCode.includes(data.code) || data.status && option.successCode.includes(data.status.code))) {
        // 请求成功
        // } else if (data && (data.success && data.code === 1001)) {
        return formatRes(data);
      } else if (data && data.code === 4001) {
        // 未登录
        // @ts-ignore
        // 这里的skipLogin是在请求函数中作为第三个参数传递进来的
        if (!response.config.skipLogin) {
          option.cbFor401(data);
        }

        newError.payload = data;
        newError.message = '未登录'; // return new Promise((resolve, reject) => {
        //     setTimeout(() => {
        //         reject(formatErr(newError));
        //     }, 3000);
        // });

        return Promise.reject(formatErr(newError));
      } else {
        newError.payload = data;
        newError.message = data.message || "\u670D\u52A1\u7AEF\u5F02\u5E38\uFF1A".concat(data.code);
        return Promise.reject(formatErr(newError));
      }
    } else {
      newError.ConfirmReport = true;
      newError.extra = response;
      newError.message = response.message || response.msg || '网络异常';
      return Promise.reject(formatErr(newError));
    }
  }, function (err, option) {
    // 对响应错误做点什么
    var msg = '';

    if (err && err.response) {
      switch (err.response.status) {
        case 400:
          msg = '请求错误(400)';
          break;

        case 401:
          msg = '未授权，请重新登录(401)';
          break;

        case 403:
          msg = '拒绝访问(403)';
          break;

        case 404:
          msg = '未找到此接口(404)';
          break;

        case 408:
          msg = '请求超时(408)';
          break;

        case 500:
          msg = '服务器错误(500)';
          break;

        case 501:
          msg = '服务未实现(501)';
          break;

        case 502:
          msg = '网络错误(502)';
          break;

        case 503:
          msg = '服务不可用(503)';
          break;

        case 504:
          msg = '网络超时(504)';
          break;

        case 505:
          msg = 'HTTP版本不受支持(505)';
          break;

        default:
          msg = "\u8FDE\u63A5\u51FA\u9519(".concat(err.response.status, ")!");
      }
    } else {
      msg = '连接服务器失败!';
    }

    err.ConfirmReport = true;
    mySentry.logError(err);
    return Promise.reject(option.formatErr(_objectSpread(_objectSpread({}, err), {}, {
      message: err.message || msg || '请求失败'
    })));
  }]
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// 解决中文乱码

var Request = /*#__PURE__*/function () {
  function Request(option) {
    _classCallCheck(this, Request);

    this.config = merge({}, baseOption, option);
    this.instance = null;
    this.CancelToken = axios$1.CancelToken;
    this.source = this.CancelToken.source();
    this.initAxios = this.initAxios.bind(this);
    this.initSource = this.initSource.bind(this);
    this.cancel = this.cancel.bind(this);
    this.sendAxios = this.sendAxios.bind(this);
    this.initAxios();
  }

  _createClass(Request, [{
    key: "setOption",
    value: function setOption(option) {
      this.config = merge({}, this.config, option);
      if (option.requestInterceptor || option.responseInterceptor) this.initAxios();
    }
  }, {
    key: "pushInterceptorsSuccess",
    value: function pushInterceptorsSuccess(fun) {
      if (typeof fun !== 'function') return;

      if (this.config.requestInterceptor[0] instanceof Array) {
        this.config.requestInterceptor[0].push(fun);
      } else {
        var originRequestInterceptor = this.config.requestInterceptor[0];
        this.config.requestInterceptor[0] = [originRequestInterceptor, fun];
      }

      this.initAxios();
    }
  }, {
    key: "initSource",
    value: function initSource() {
      this.source = this.CancelToken.source();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.source.cancel();
    }
  }, {
    key: "initAxios",
    value: function initAxios() {
      var _this = this;

      this.instance = axios$1.create(_objectSpread$1({}, this.config.base));
      this.instance.interceptors.request.use( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config) {
          var i, len, res;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;

                  if (!(_this.config.requestInterceptor[0] instanceof Array)) {
                    _context.next = 13;
                    break;
                  }

                  i = 0, len = _this.config.requestInterceptor[0].length;

                case 3:
                  if (!(i < len)) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 6;
                  return _this.config.requestInterceptor[0][i](config, _this.config, _this.source);

                case 6:
                  config = _context.sent;

                case 7:
                  i++;
                  _context.next = 3;
                  break;

                case 10:
                  return _context.abrupt("return", config);

                case 13:
                  _context.next = 15;
                  return _this.config.requestInterceptor[0](config, _this.config, _this.source);

                case 15:
                  res = _context.sent;
                  return _context.abrupt("return", res);

                case 17:
                  _context.next = 23;
                  break;

                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](0);
                  console.log(_context.t0);
                  return _context.abrupt("return", config);

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 19]]);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.requestInterceptor[1](err, _this.config);
      });
      this.instance.interceptors.response.use( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
          var res;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.config.responseInterceptor[0](config, _this.config, _this.source.cancel);

                case 2:
                  res = _context2.sent;
                  return _context2.abrupt("return", res);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }(), function (err) {
        return _this.config.responseInterceptor[1](err, _this.config, _this.source.cancel);
      });
    }
  }, {
    key: "setConfig",
    value: function setConfig(option) {
      this.config = merge({}, this.config, option);
    }
  }, {
    key: "getAxiosInstance",
    value: function getAxiosInstance() {
      return this.instance;
    }
  }, {
    key: "sendAxios",
    value: function sendAxios(method, url, data) {
      var _this2 = this;

      var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var params = this.config.formatData(data);
      return new Promise(function (resolve, reject) {
        if (['post', 'put', 'patch'].includes(method)) {
          _this2.instance[method](url, params, _objectSpread$1(_objectSpread$1({}, config), {}, {
            cancelToken: _this2.source.token
          })).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else if (['get', 'delete', 'head'].includes(method)) {
          _this2.instance[method](url, _objectSpread$1({
            params: params,
            cancelToken: _this2.source.token
          }, config)).then(function (res) {
            resolve(res);
          })["catch"](function (error) {
            _this2.config.errToast(error);

            reject(error);
          });
        } else {
          reject(new Error('请求方法不正确!'));
        }
      });
    }
  }]);

  return Request;
}();

var AppVersion = '2.0.0';
var protocol = location.protocol;
var axios = new Request({
  requestInterceptor: [/*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, option, source) {
      var url, data, token, deviceinfo, appversion, systemversion, timestamp, requestTime, salt, sign, deviceNum, customHeader, originText, cipherText, __env, prefix, useip, useport;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!config.withoutCancelToken) {
                config.cancelToken = source.token;
              } else {
                config.cancelToken = null;
              }

              url = config.url, data = config.data;
              token = option.getToken();
              deviceinfo = 'h5';
              if (ua.isIOSApp()) deviceinfo = 'iOS';
              if (ua.isAndroidApp()) deviceinfo = 'Android';
              if (ua.isWechatMiniProgram()) deviceinfo = 'xcx';
              appversion = ua.getAppVersion() || AppVersion;
              systemversion = '1.0.0';
              timestamp = parseInt(Date.now() / 1000);
              requestTime = Date.now();
              salt = 'zdwhH5#!@';
              sign = md5([deviceinfo, appversion, systemversion, timestamp, salt].join('-')).toUpperCase();
              _context.next = 15;
              return getUUID();

            case 15:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 18;
                break;
              }

              _context.t0 = '';

            case 18:
              deviceNum = _context.t0;
              customHeader = {
                deviceinfo: deviceinfo,
                appversion: appversion,
                systemversion: systemversion,
                timestamp: timestamp,
                requestTime: requestTime,
                sign: sign,
                deviceNum: deviceNum
              };

              if (!config.fingerprint) {
                _context.next = 31;
                break;
              }

              _context.prev = 21;
              _context.next = 24;
              return getWebUmidToken();

            case 24:
              customHeader['deviceToken'] = _context.sent;
              _context.next = 31;
              break;

            case 27:
              _context.prev = 27;
              _context.t1 = _context["catch"](21);
              customHeader['deviceToken'] = '';
              console.log(_context.t1);

            case 31:
              config.headers.common = Object.assign({}, config.headers.common, customHeader);

              if (token && !config.withoutToken) {
                config.headers.common[webConfig.AuthorizationKey] = token;
              }

              if (config.encrypt) {
                if (typeof data !== 'undefined') {
                  originText = JSON.stringify(data);
                  cipherText = encrypt(originText);
                  config.data = {
                    cipherText: cipherText
                  };
                }
              }

              __env = fn.getQueryString('__env');

              if (!/^http(s)?:\/\//.test(url)) {
                if (/^api\//.test(url)) {
                  // `api/`开头
                  prefix = '/';
                } else if (/^\//.test(url)) {
                  // `/`开头
                  prefix = '';
                } else {
                  prefix = '/api/v1/mall/';
                }

                if (__env === 'useip') {
                  useip = fn.getQueryString('__useip');
                  useport = fn.getQueryString('__useport');
                  config.url = "http://".concat(useip, ":").concat(useport || 8085) + prefix + url;
                } else if (__env === 'dev') {
                  config.url = 'http://mall-portal-dev2.wanwudezhi.com' + prefix + url;
                } else if (__env === 'dev3') {
                  // 测试环境3
                  config.url = 'http://mall-portal-dev3.wanwudezhi.work' + prefix + url;
                } else if (__env === 'develop') {
                  // 测试环境（日常环境）
                  config.url = 'http://gitlab.wanwudezhi.com' + prefix + url;
                } else if (__env === 'pre') {
                  // 预发环境
                  config.url = protocol + '//pre-portal.wanwudezhi.com' + prefix + url;
                } else {
                  // 生产环境
                  config.url = 'https://api.wanwudezhi.com' + prefix + url;
                } // config.url = 'http://192.168.0.30:8085' + prefix + url;

              }

              return _context.abrupt("return", config);

            case 37:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[21, 27]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }()],
  formatRes: function formatRes(res) {
    return res.result;
  },
  getToken: getToken
});

function setAppVersion(version) {
  AppVersion = version;
}

var initSource = axios.initSource;
var cancel = axios.cancel; // 兼容原先写法....
// export default {
//     get: function (url, {
//         params,
//         ...config
//     } = {},config) {
//         return axios.sendAxios('get', url, params, config);
//     },
//     delete: function (url, {
//         params,
//         ...config
//     } = {}) {
//         return axios.sendAxios('delete', url, params, config);
//     },
//     post: function (url, params, config) {
//         return axios.sendAxios('post', url, params, config);
//     },
//     put: function (url, params, config) {
//         return axios.sendAxios('put', url, params, config);
//     },
// };

var instance = axios.instance;
instance.sendAxios = axios.sendAxios;

instance.sendAxios.get = function (url, params, config) {
  return instance.sendAxios('get', url, params, config);
};

instance.sendAxios["delete"] = function (url, params, config) {
  return instance.sendAxios('delete', url, params, config);
};

instance.sendAxios.post = function (url, params, config) {
  return instance.sendAxios('post', url, params, config);
};

instance.sendAxios.put = function (url, params, config) {
  return instance.sendAxios('put', url, params, config);
};

export default instance;
export { Request as Axios, axios, cancel, instance as h5_axios, initSource, setAppVersion };
