'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('core-js/modules/es.array.for-each');
require('core-js/modules/es.array.is-array');
require('core-js/modules/es.array.slice');
require('core-js/modules/es.object.assign');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.string.search');
require('core-js/modules/web.dom-collections.for-each');
var baseFn = require('@wanwu/base-fn');

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var throughParams = ['__env', 'inviteCode', 'token', '__debug', '__useip', '__useport', 'shareUserId', 'shareTime', '__source_channel', '__miniprogramType', 'source', '__proxy', 'kl_debug_params'];
/**
 *  获取穿透参数列表，拷贝对象，修改无效
 * @returns {string[]}
 */

function getThroughParams() {
  return baseFn.fn.clone(throughParams);
}
/**
 *  增加穿透参数
 * @param {string} key 增加穿透参数的key
 * @returns {number}
 */

function addThroughParams(key) {
  return throughParams.push(key);
}
/**
 *  删除穿透参数
 * @param {string|string[]} keys 删除穿透参数的key列表
 * @returns {string[]}
 */

function removeThroughParams() {
  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (baseFn.fn.getTypeof(keys) === 'string') {
    keys = [keys];
  }

  keys.forEach(function (key) {
    return baseFn.fn.ArrayRemove(throughParams, key);
  });
  return getThroughParams();
}
/**
 *  将来源的query参数中的穿透参数合并到目标路由上
 * @param {string} url 目标url
 * @param {Object} params 来源url的参数对象
 * @returns {string}
 */

function getRouteLocation(url, params) {
  var urlSearch = location.search.slice(1);
  var urlParams = baseFn.fn.parse(urlSearch);
  var pickParams = baseFn.fn.pick(urlParams, throughParams); // stringifyUrl: 将对象作为search参数，拼装成url

  return baseFn.fn.stringifyUrl(url, Object.assign({}, pickParams, params));
}
/**
 * 将来源的query参数中的穿透参数合并到目标路由对象上
 * @param {wlocation} to 目标url对象
 * @param {wlocation} from 来源url对象
 * @returns {wlocation.query}
 */

function getRouteQuery(to, from) {
  var fromQuery = from.query;
  var toQuery = to.query; // 进行从原对象中过滤需要的属性，返回过滤的对象

  var pickedParams = baseFn.fn.pick(fromQuery, throughParams);

  if (toQuery.inviteCode && Array.isArray(toQuery.inviteCode)) {
    var _iterator = _createForOfIteratorHelper(toQuery.inviteCode),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (item) {
          toQuery.inviteCode = item;
          break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return Object.assign({}, toQuery, pickedParams);
}
/**
 *  路由参数穿透插件
 * @param {wlocation} to 目标url对象
 * @param {wlocation} from 来源url对象
 * @returns {wlocation}
 */

function index (to, from) {
  to.query = getRouteQuery(to, from);
  return to;
}

exports.addThroughParams = addThroughParams;
exports.default = index;
exports.getRouteLocation = getRouteLocation;
exports.getRouteQuery = getRouteQuery;
exports.getThroughParams = getThroughParams;
exports.removeThroughParams = removeThroughParams;
