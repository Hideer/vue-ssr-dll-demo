/**
 * 路由参数透传插件
 * @module @wanwu/location-plugin-through-params
 */

/**
 * @typedef {Object} wlocation 路由对象
 * @property {String} origin - 路由的域名
 * @property {String} [base] - 路由的基础路径
 * @property {String} path - 路由的路径
 * @property {Object} [query] - 路由query参数
 * @property {Object} [params] - 路由params（vue）参数
 */

import {
    fn,
} from '@wanwu/base-fn';

const throughParams = [
    '__env',
    'inviteCode',
    'token',
    '__debug',
    '__useip',
    '__useport',
    'shareUserId',
    'shareTime',
    '__source_channel',
    '__miniprogramType',
    'source',
    '__proxy',
    'kl_debug_params',
];
/**
 *  获取穿透参数列表，拷贝对象，修改无效
 * @returns {string[]}
 */
export function getThroughParams() {
    return fn.clone(throughParams);
}

/**
 *  增加穿透参数
 * @param {string} key 增加穿透参数的key
 * @returns {number}
 */
export function addThroughParams(key) {
    return throughParams.push(key);
}

/**
 *  删除穿透参数
 * @param {string|string[]} keys 删除穿透参数的key列表
 * @returns {string[]}
 */
export function removeThroughParams(keys = []) {
    if (fn.getTypeof(keys) === 'string') {
        keys = [
            keys,
        ];
    }
    keys.forEach(key => fn.ArrayRemove(throughParams, key));
    return getThroughParams();
}
/**
 *  将来源的query参数中的穿透参数合并到目标路由上
 * @param {string} url 目标url
 * @param {Object} params 来源url的参数对象
 * @returns {string}
 */
export function getRouteLocation(url, params) {
    const urlSearch = location.search.slice(1);
    const urlParams = fn.parse(urlSearch);
    const pickParams = fn.pick(urlParams, throughParams);
    // stringifyUrl: 将对象作为search参数，拼装成url
    return fn.stringifyUrl(url, Object.assign({}, pickParams, params));
}
/**
 * 将来源的query参数中的穿透参数合并到目标路由对象上
 * @param {wlocation} to 目标url对象
 * @param {wlocation} from 来源url对象
 * @returns {wlocation.query}
 */
export function getRouteQuery(to, from) {
    const fromQuery = from.query;
    const toQuery = to.query;
    // 进行从原对象中过滤需要的属性，返回过滤的对象
    const pickedParams = fn.pick(fromQuery, throughParams);
    if (toQuery.inviteCode && Array.isArray(toQuery.inviteCode)) {
        for (const item of toQuery.inviteCode) {
            if (item) {
                toQuery.inviteCode = item;
                break;
            }
        }
    }
    return Object.assign({}, toQuery, pickedParams);
}

/**
 *  路由参数穿透插件
 * @param {wlocation} to 目标url对象
 * @param {wlocation} from 来源url对象
 * @returns {wlocation}
 */
export default function (to, from) {
    to.query = getRouteQuery(to, from);
    return to;
}
