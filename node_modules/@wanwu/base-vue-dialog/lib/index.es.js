import 'core-js/modules/es.function.name';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import 'core-js/modules/es.number.constructor';
import popup from '@wanwu/base-vue-popup';
import '@wanwu/base-style';
import { normalizeComponent, createInjector } from '@wanwu/vue-runtime-helpers';
import Vue from 'vue';
import { vmBindEvents, vmUnbindEvents } from '@wanwu/event-utils';

var script = {
  name: 'Dialog',
  components: {
    popup: popup
  },
  props: {
    value: {
      type: Boolean,
      "default": false
    },
    title: {
      type: String
    },
    message: {
      type: String
    },
    showConfirmButton: {
      type: Boolean,
      "default": true
    },
    showCancelButton: {
      type: Boolean,
      "default": false
    },
    cancelButtonText: {
      type: String,
      "default": '取消'
    },
    cancelButtonColor: {
      type: String,
      "default": '#737373'
    },
    confirmButtonText: {
      type: String,
      "default": '知道了' /// /////////

    },
    confirmButtonColor: {
      type: String,
      "default": '#007aff'
    },
    overlay: {
      type: Boolean,
      "default": true
    },
    closeOnClickOverlay: {
      type: Boolean,
      "default": false
    },
    beforeClose: {
      type: Function
    },
    width: {
      type: Number
    },
    offsetTop: {
      type: Number
    },
    titleStyle: {
      type: [Object, String]
    },
    messageStyle: {
      type: [Object, String]
    }
  },
  data: function data() {
    return {};
  },
  watch: {
    value: function value(val) {
      if (val) {
        this.$emit('show');
      } else {
        this.$emit('close');
      }
    }
  },
  methods: {
    onClosed: function onClosed() {
      this.$emit('closed');
    },
    onPopInput: function onPopInput(val) {
      this.$emit('input', val);
    },
    clickOverlay: function clickOverlay() {
      this.$emit('click-overlay');
    },
    confirm: function confirm() {
      this.$emit('confirm');

      if (this.onConfirm) {
        this.onConfirm();
      }

      if (this.beforeClose) {
        this.beforeClose('confirm', this.close);
      } else {
        this.close();
      }
    },
    cancel: function cancel() {
      this.$emit('cancel');

      if (this.onCancel) {
        this.onCancel();
      }

      if (this.beforeClose) {
        this.beforeClose('cancel', this.close);
      } else {
        this.close();
      }
    },
    close: function close(isColse) {
      if (isColse !== false) {
        this.$emit('input', false);

        if (this.onClose) {
          this.onClose();
        }
      }
    }
  }
};

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('popup', {
    staticClass: "component__dialog dialog",
    attrs: {
      "value": _vm.value,
      "overlay": _vm.overlay,
      "close-on-click-overlay": _vm.closeOnClickOverlay
    },
    on: {
      "input": _vm.onPopInput,
      "click-overlay": _vm.clickOverlay,
      "closed": _vm.onClosed
    }
  }, [_c('div', {
    staticClass: "content",
    style: {
      width: _vm.width / 100 + 'rem',
      marginBottom: _vm.offsetTop && _vm.offsetTop / 50 + 'rem'
    }
  }, [_vm._t("title", [_vm.title ? _c('div', {
    staticClass: "title",
    style: _vm.titleStyle,
    domProps: {
      "textContent": _vm._s(_vm.title)
    }
  }) : _vm._e()]), _vm._v(" "), _vm._t("default", [_c('div', {
    staticClass: "message",
    style: _vm.messageStyle,
    domProps: {
      "textContent": _vm._s(_vm.message)
    }
  })]), _vm._v(" "), _vm._t("footer", [_c('div', {
    staticClass: "footer flex"
  }, [_vm.showCancelButton ? _c('button', {
    staticClass: "btn footer__btn f-fg-1",
    style: {
      color: _vm.cancelButtonColor
    },
    on: {
      "click": _vm.cancel
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.cancelButtonText) + "\n                ")]) : _vm._e(), _vm._v(" "), _vm.showConfirmButton ? _c('button', {
    staticClass: "btn footer__btn footer__btn--confirm f-fg-1",
    style: {
      color: _vm.confirmButtonColor
    },
    on: {
      "click": _vm.confirm
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.confirmButtonText) + "\n                ")]) : _vm._e()])])], 2)]);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-6309b8ba_0", {
    source: ".component__dialog .content[data-v-6309b8ba]{width:5.6rem;background:#fafafa;border-radius:.2rem;padding-top:.54rem}.component__dialog .title[data-v-6309b8ba]{font-size:.34rem;font-weight:400;color:#030303;line-height:.48rem;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.component__dialog .message[data-v-6309b8ba]{font-size:.26rem;font-weight:400;color:#4a4a4a;line-height:.4rem;text-align:center;margin-top:.08rem;min-height:.76rem;margin-bottom:.38rem;padding:0 .6rem;white-space:pre-wrap}.component__dialog .footer[data-v-6309b8ba]{border-top:.02rem solid #eee}.component__dialog .footer__btn[data-v-6309b8ba]{font-size:.32rem;font-weight:400;line-height:.88rem;width:100%;padding:0 .2rem;white-space:nowrap}.component__dialog .footer__btn[data-v-6309b8ba]:not(:first-child){border-left:.02rem solid #eee}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-6309b8ba";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, undefined, undefined);

var DialogConstructor = Vue.extend(__vue_component__);
var instance;
var cacheEvents;

var initInstance = function initInstance() {
  if (!instance) {
    instance = new DialogConstructor().$mount();
    instance.$on('input', function (val) {
      instance.value = val;
    });
    instance.$on('closed', function () {
      vmUnbindEvents(instance, cacheEvents);
      cacheEvents = null;
      Dialog.remove();
    });
    document.body.appendChild(instance.$el);
  }
};

var Dialog = /*#__PURE__*/function () {
  function Dialog() {
    _classCallCheck(this, Dialog);
  }

  _createClass(Dialog, null, [{
    key: "alert",
    value: function alert(options) {
      initInstance();
      var defaultOptions = {
        message: '',
        title: '',
        confirmButtonText: '知道了',
        value: false,
        showConfirmButton: true,
        showCancelButton: false,
        cancelButtonText: '取消',
        cancelButtonColor: '#737373',
        confirmButtonColor: '#007aff',
        overlay: true,
        closeOnClickOverlay: false,
        beforeClose: null,
        width: 560,
        offsetTop: null
      };
      return new Promise(function (resolve) {
        Object.assign(instance, defaultOptions);

        if (options) {
          if (typeof options === 'string') {
            Object.assign(instance, {
              message: options
            });
          } else if (options.props) {
            Object.assign(instance, options.props);
          } else {
            Object.assign(instance, options);
          }

          if (options.events) {
            cacheEvents = options.events;
            vmBindEvents(instance, cacheEvents);
          }
        }

        instance.$once('confirm', function () {
          resolve();
        });
        instance.value = true;
      });
    }
  }, {
    key: "confirm",
    value: function confirm(options) {
      initInstance();
      var defaultOptions = {
        message: '',
        title: '',
        confirmButtonText: '确认',
        value: false,
        showConfirmButton: true,
        showCancelButton: true,
        cancelButtonText: '取消',
        cancelButtonColor: '#737373',
        confirmButtonColor: '#007aff',
        overlay: true,
        closeOnClickOverlay: false,
        beforeClose: null,
        width: 560,
        offsetTop: null
      };
      return new Promise(function (resolve, reject) {
        if (typeof options === 'string') {
          Object.assign(instance, defaultOptions, {
            message: options
          });
        } else if (options.props) {
          Object.assign(instance, defaultOptions, options.props);
        } else {
          Object.assign(instance, defaultOptions, options);
        }

        if (options.events) {
          cacheEvents = options.events;
          vmBindEvents(instance, cacheEvents);
        }

        instance.$once('confirm', function () {
          resolve();
        });
        instance.$once('cancel', function () {
          reject(new Error('弹窗组件取消'));
        });
        instance.value = true;
      });
    }
  }, {
    key: "remove",
    value: function remove() {
      if (instance) {
        var parent = instance.$el.parentNode;

        if (parent) {
          parent.removeChild(instance.$el);
        }

        instance.$destroy();
      }

      instance = null;
    }
  }, {
    key: "close",
    value: function close() {
      if (instance) {
        instance.value = false;
      }
    }
  }]);

  return Dialog;
}();

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
  Vue.prototype.$dialog = Dialog;
  Vue.dialog = Dialog;
};

export default __vue_component__;
export { Dialog };
