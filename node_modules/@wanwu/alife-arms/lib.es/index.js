// @ts-ignore
const BrowserLogger = require('alife-logger');
import User from '@wanwu/base-user';
import { ua } from '@wanwu/base-fn';
const screenWidth = window ? window.screen.width : 0;
let isSendPerf = true;
const DateObj = new Date();
if (DateObj.toFormattedString) {
    const SEND_TIMES_KEY = 'perf_times_' + DateObj.toFormattedString('yyyyMMdd');
    let sendTimes = Number(window.localStorage.getItem(SEND_TIMES_KEY) || 0);
    if (sendTimes > 30) {
        isSendPerf = false;
    }
    else {
        sendTimes += 1;
        window.localStorage.setItem(SEND_TIMES_KEY, sendTimes.toString());
    }
}
if (screenWidth > 1024) {
    isSendPerf = false;
}
// 随机上报4%的量
const isArmsDisabled = (Math.random() < 0.96);
const ignoreErrors = [
    "Cannot read property 'innerHTML' of null",
    "Cannot read property 'click' of undefined",
    'hdp',
    'wwdzBridge',
    'JSCallBackMethodManager',
    '1001',
    /^Script error\.?$/,
];
function isSafari() {
    return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
}
if (ua.isAndroid() && !ua.isApp() && !ua.isQQ() && !ua.isWeibo() && !ua.isWechat() && !ua.isWechatMiniProgram() && !isSafari()) {
    ignoreErrors.push("Cannot read property 'style' of null");
}
let baseConfig = {
    pid: 'jb9uyo9kzf@ea006526e822c92',
    appType: 'web',
    imgUrl: 'https://arms-retcode.aliyuncs.com/r.png?',
    sendResource: true,
    behavior: true,
    useFmp: true,
    disabled: isArmsDisabled,
    disableHook: true,
    autoSendPerf: isSendPerf,
    ignore: {
        ignoreUrls: [
            'empty/placeholder',
            function (str) {
                return !/^h5\.wanwudezhi\.com/.test(str);
            },
        ],
        ignoreErrors
    }
};
class Arms {
    constructor(config = {}) {
        this._isSetUid = false;
        const newConfig = Object.assign({}, baseConfig, config);
        const browserLogger = BrowserLogger.singleton(newConfig);
        this.browserLogger = browserLogger;
        this.setUid();
    }
    getBrowserLogger() {
        return this.browserLogger;
    }
    setUid(userInfo) {
        if (this._isSetUid)
            return;
        const _userInfo = userInfo || User.getUserInfo();
        if (_userInfo) {
            this.browserLogger.setConfig({
                uid: _userInfo.userId,
                setUsername() {
                    return _userInfo.unick;
                },
            });
            this._isSetUid = true;
        }
    }
}
export default Arms;
