"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var BrowserLogger = require('alife-logger');
var base_user_1 = require("@wanwu/base-user");
var base_fn_1 = require("@wanwu/base-fn");
var screenWidth = window ? window.screen.width : 0;
var isSendPerf = true;
var DateObj = new Date();
if (DateObj.toFormattedString) {
    var SEND_TIMES_KEY = 'perf_times_' + DateObj.toFormattedString('yyyyMMdd');
    var sendTimes = Number(window.localStorage.getItem(SEND_TIMES_KEY) || 0);
    if (sendTimes > 30) {
        isSendPerf = false;
    }
    else {
        sendTimes += 1;
        window.localStorage.setItem(SEND_TIMES_KEY, sendTimes.toString());
    }
}
if (screenWidth > 1024) {
    isSendPerf = false;
}
// 随机上报4%的量
var isArmsDisabled = (Math.random() < 0.96);
var ignoreErrors = [
    "Cannot read property 'innerHTML' of null",
    "Cannot read property 'click' of undefined",
    'hdp',
    'wwdzBridge',
    'JSCallBackMethodManager',
    '1001',
    /^Script error\.?$/,
];
function isSafari() {
    return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
}
if (base_fn_1.ua.isAndroid() && !base_fn_1.ua.isApp() && !base_fn_1.ua.isQQ() && !base_fn_1.ua.isWeibo() && !base_fn_1.ua.isWechat() && !base_fn_1.ua.isWechatMiniProgram() && !isSafari()) {
    ignoreErrors.push("Cannot read property 'style' of null");
}
var baseConfig = {
    pid: 'jb9uyo9kzf@ea006526e822c92',
    appType: 'web',
    imgUrl: 'https://arms-retcode.aliyuncs.com/r.png?',
    sendResource: true,
    behavior: true,
    useFmp: true,
    disabled: isArmsDisabled,
    disableHook: true,
    autoSendPerf: isSendPerf,
    ignore: {
        ignoreUrls: [
            'empty/placeholder',
            function (str) {
                return !/^h5\.wanwudezhi\.com/.test(str);
            },
        ],
        ignoreErrors: ignoreErrors
    }
};
var Arms = /** @class */ (function () {
    function Arms(config) {
        if (config === void 0) { config = {}; }
        this._isSetUid = false;
        var newConfig = Object.assign({}, baseConfig, config);
        var browserLogger = BrowserLogger.singleton(newConfig);
        this.browserLogger = browserLogger;
        this.setUid();
    }
    Arms.prototype.getBrowserLogger = function () {
        return this.browserLogger;
    };
    Arms.prototype.setUid = function (userInfo) {
        if (this._isSetUid)
            return;
        var _userInfo = userInfo || base_user_1.default.getUserInfo();
        if (_userInfo) {
            this.browserLogger.setConfig({
                uid: _userInfo.userId,
                setUsername: function () {
                    return _userInfo.unick;
                },
            });
            this._isSetUid = true;
        }
    };
    return Arms;
}());
exports.default = Arms;
