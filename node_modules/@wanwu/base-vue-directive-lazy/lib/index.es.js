import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.array.index-of';
import 'core-js/modules/es.array.map';
import 'core-js/modules/es.array.splice';
import 'core-js/modules/es.number.constructor';
import 'core-js/modules/es.object.keys';
import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.string.match';
import 'core-js/modules/es.string.split';
import 'core-js/modules/web.dom-collections.for-each';
import 'core-js/modules/web.timers';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { fn, WANWUConfig, ImageUtils } from '@wanwu/base-fn';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var throttle = fn.throttle;
var DEFAULT_EVENTS = ['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend', 'touchmove']; // 声明size

/**
 * 图片及尺寸信息
 * @typedef {Object} ImageSize
 * @property {number} width 宽度
 * @property {number} height 高度
 */

/**
 * 图片及尺寸信息
 * @typedef {Object} ImageInfo
 * @property {string} url 图片链接
 * @property {number} width 宽度
 * @property {number} height 高度
 */
// window事件绑定状态

var isWindowBind = false; // 需要进行监听的图片列表，还没有加载过的

var listenList = []; // 已经缓存好的图片列表

var imageCacheList = []; // 父容器列表

var contentList = []; // 默认图片
// const defaultImg = 'https://cdn.wanwudezhi.com/static/web-static/image/5dc5f4919f413689b14dcd58b48d81f9.png';
// Vue 图片懒加载，导出模块

var getLazyFn = function getLazyFn() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // preLoad 配置懒加载图片加载范围，数字类型，默认2，代表图片进入视窗的上下左右两屏范围内就开始加载
  options.preLoad = options.preLoad ? Number(options.preLoad) : 2;
  options.listenEvents = options.listenEvents || DEFAULT_EVENTS; // loadingImg预设图片的数组，不同尺寸的图片越多，适配越好

  var loadingImgMap = {
    wwdz: [// NOTE：统一风格
    // 'https://cdn.wanwudezhi.com/static/web-static/image/081fcc0378d010cc02e3b0ab52291a30_555x555.png',
    // 'https://cdn.wanwudezhi.com/static/web-static/image/bf902b6388fddec8b17139047ae05978_507x759.png',
    // 'https://cdn.wanwudezhi.com/static/web-static/image/1f4503d4c57799bc1e5c5067d54bb977_1125x411.png',
    'https://cdn.wanwudezhi.com/static/web-static/image/dce7fd206a6a8a429c338be06ba1c560_555x555.png', 'https://cdn.wanwudezhi.com/static/web-static/image/8a4b71aaebc621003d20d7e2c16c5958_507x759.png', 'https://cdn.wanwudezhi.com/static/web-static/image/bd05f1d3974dd67a2e8c49b47d7b74bb_1125x411.png'],
    common: ['https://cdn.wanwudezhi.com/static/web-static/image/c14bbc7cdc2c6d133aad71487b5a0b66_555x555.png', 'https://cdn.wanwudezhi.com/static/web-static/image/0299417d8599cbfc33fc8d0eb690e759_507x759.png', 'https://cdn.wanwudezhi.com/static/web-static/image/a2b0ab7ad66a84c5c61bef7cceb17a10_1125x411.png']
  };
  var loadingImgs = loadingImgMap.wwdz; // 将次优先级至于query中，option之后；即被覆盖的顺序为：wanwuConfig < query < options

  var wanwuConfig = new WANWUConfig();
  var imgKey_wanwuConfig = wanwuConfig.getConfig('base-vue-directive-lazy', 'imgKey');

  if (imgKey_wanwuConfig && loadingImgMap[imgKey_wanwuConfig]) {
    loadingImgs = loadingImgMap[imgKey_wanwuConfig];
  }

  if (fn.getQueryString('hidewwdz') === '1') {
    // 初始化时赋值到全局 给其他组件使用
    window.hidewwdz = true;
    loadingImgs = loadingImgMap.common;
  }

  if (loadingImgMap[options.imgKey]) {
    loadingImgs = loadingImgMap[options.imgKey];
  } // errorImgs预设图片的数组，不同尺寸的图片越多，适配越好


  var errorImgs = ['https://cdn.wanwudezhi.com/static/web-static/image/fdaa64918a5a15e53fc1a87c9d870e61_555x555.png']; // 默认加载图片

  var perchImg = {
    loading: loadingImgs[0],
    error: errorImgs[0]
  }; // loading图片的对象数组，包含URL和尺寸

  var loadingImgsObjList = loadingImgs.map(function (item) {
    var _getDefaultSize = getDefaultSize(item),
        width = _getDefaultSize.width,
        height = _getDefaultSize.height;

    return {
      url: item,
      width: width,
      height: height
    };
  }); // error图片的对象数组，包含URL和尺寸

  var errorImgsObjList = errorImgs.map(function (item) {
    var _getDefaultSize2 = getDefaultSize(item),
        width = _getDefaultSize2.width,
        height = _getDefaultSize2.height;

    return {
      url: item,
      width: width,
      height: height
    };
  });
  /**
   * 数组item remove方法
   * @param {*} item [数组要删除的item]
   */

  var ArrayRemove = function ArrayRemove(arr, item) {
    if (!arr.length) return [];
    var index = arr.indexOf(item);

    if (index > -1) {
      arr.splice(index, 1);
      return arr;
    }

    return arr;
  };
  /**
   * 判断是否已经加载过了
   * @param {*} imageSrc [图片src]
   */


  var isAlredyLoad = function isAlredyLoad(imageSrc) {
    if (imageCacheList.indexOf(imageSrc) > -1) {
      return true;
    } else {
      return false;
    }
  };
  /**
   * 检测图片是否可以加载，如果可以则进行加载
   * @param {*} item [图片对象]
   */


  var isCanShow = function isCanShow(item) {
    var ele = item.ele;
    var src = item.src; // 图片的rect对象

    var rect = ele.getBoundingClientRect(); // 页面可视区域的高度

    var windowHeight = window.innerHeight; // 页面可视区域的宽度

    var windowWidth = window.innerWidth; // 判断元素是否已经进入了可视区域

    var checkInView = typeof window !== 'undefined' && rect.top <= windowHeight * options.preLoad && rect.bottom >= 0 && rect.left <= windowWidth * options.preLoad && rect.right >= 0;

    if (checkInView) {
      var image = new Image();
      image.src = src;

      image.onload = function () {
        ele.src = src;
        imageCacheList.push(src);
        ArrayRemove(listenList, item); // console.log(item.vnode.context.initImg);

        if (item.vnode.context.initImg) {
          // console.log(123);
          item.vnode.context.initImg(image);
        }
      };

      image.onerror = function () {
        ele.src = item.error || src;
        ArrayRemove(listenList, item);
      };

      return true;
    } else {
      return false;
    }
  }; // 添加监听事件scroll


  var onScroll = throttle(function () {
    listenList.forEach(function (item) {
      isCanShow(item);
    });
  }, 150);
  /**
   * 绑定监听事件
   * @param {dom} containerEl 父容器
   */

  var onListenScroll = function onListenScroll(containerEl) {
    if (!isWindowBind) {
      options.listenEvents.forEach(function (evt) {
        window.addEventListener(evt, onScroll);
      });
      isWindowBind = true;
    }

    if (containerEl && contentList.indexOf(containerEl) === -1) {
      options.listenEvents.forEach(function (evt) {
        containerEl.addEventListener(evt, onScroll);
      });
      contentList.push(containerEl);
    }
  }; // addListener为Vue指令的具体实现功能函数，我们这里为所有使用v-lazyload的指令的元素添加监听
  // ele是dom元素，binding是绑定的具体值

  /**
   * Vue指令的具体实现功能函数
   * @param {*} ele [对应元素]
   * @param {*} binding [包含指令对应value的对象]
   */


  var addListener = function addListener(ele, binding, vnode) {
    // 绑定的图片地址
    var imageSrc;
    var arg; // const isElSrcOk = ele.src && !new RegExp(`(${options.loading}|${options.error})`).test(ele.src);

    var value = binding.value;

    if (typeof value === 'string') {
      imageSrc = binding.value;
    } else if (value instanceof Object) {
      arg = value;
      imageSrc = value.url;
    } // 已经加载的图片不重复加载


    if (ele.src === imageSrc) {
      return false;
    } // 容器选择器


    var container = Object.keys(binding.modifiers)[0];
    var containerEl = vnode.context.$refs[container];

    if (container) {
      containerEl = containerEl ? containerEl.$el || containerEl : document.getElementById(container);
    } // 如果已经加载过，则无需重新加载，直接将src赋值


    if (isAlredyLoad(imageSrc)) {
      ele.src = imageSrc;

      ele.onload = function () {
        vnode.context.$nextTick(function () {
          if (vnode.context.initImg) {
            vnode.context.initImg(ele);
          }
        });
      };

      return false;
    }

    var item = _objectSpread({
      ele: ele,
      src: imageSrc,
      vnode: vnode
    }, perchImg); // 把图片src设置到元素的属性上，方便排查错误


    ele.setAttribute('data-src', imageSrc); // 监听页面scroll事件

    onListenScroll(containerEl); // targetImgSize：从指令的arg或value或者从图片地址上解析的尺寸对象{width,height}

    var targetImgSize = binding.arg || arg || getDefaultSize(imageSrc);

    if (targetImgSize && targetImgSize.width && targetImgSize.height) {
      // 使用七牛cdn获取尺寸最接近的预设图片
      var loadingImgObj = getCloseToImgSizeObj(targetImgSize, loadingImgsObjList);

      var _getPrechImgSize = getPrechImgSize(targetImgSize, loadingImgObj),
          loadingWdith = _getPrechImgSize.width,
          loadingHeight = _getPrechImgSize.height;

      item.loading = ImageUtils.getRectangleImage(loadingImgObj.url, {
        cut: true,
        width: loadingWdith,
        height: loadingHeight
      });
      var errorImgObj = getCloseToImgSizeObj(targetImgSize, errorImgsObjList);

      var _getPrechImgSize2 = getPrechImgSize(targetImgSize, errorImgObj),
          errorWdith = _getPrechImgSize2.width,
          errorHeight = _getPrechImgSize2.height;

      item.error = ImageUtils.getRectangleImage(perchImg.error, {
        cut: true,
        width: errorWdith,
        height: errorHeight
      });
    }

    if (!imageSrc) {
      ele.src = item.error;
      return console.error('图片链接缺失');
    } else {
      ele.src = item.loading;
    } // 再看是否可以显示此图片


    if (isCanShow(item)) {
      return;
    } // 否则将图片地址和元素均放入监听的listenList


    listenList.push(item);
    setTimeout(function () {
      isCanShow(item);
    }, 100);
  };

  return {
    // bind: addListener,
    inserted: addListener,
    // updated: addListener,
    componentUpdated: addListener,
    unbind: function unbind() {
      // listenList = [];
      contentList = [];
    }
  };
};
var index = {
  install: function install(Vue, options) {
    var lazy = getLazyFn(options); // Vue自定义指令，lazy为指令的名称

    Vue.directive('lazy', lazy);
  }
};
/**
 *获取数组中最接近传入数字的值的index
 * @param {number} num 数字
 * @param {Array<number>} numList 数字数组
 * @returns {number} 数组下标
 */

function closeToNumIndex(num, numList) {
  // 返回值：数组最接近项的下标，默认值0
  var numIndex = 0; // 数字与数组每项的差当前最小值

  var minAbstand = -1; // 遍历数组

  for (var index in numList) {
    var item = numList[index]; // 得到当前项和目标数字的差

    var abstand = item < num ? num - item : item - num;

    if (minAbstand === -1) {
      // 如果是第一次遍历，最小差为默认的-1，则当前最小差为当前的差
      minAbstand = abstand;
      continue;
    } else if (abstand < minAbstand) {
      // 如果当前的差小于当前缓存的最小差，则把最小差换成当前的差，并且数组最接近项的下标赋值为当前下标
      minAbstand = abstand;
      numIndex = index;
    } //  如果当前的差大于当前缓存的最小差，则不处理

  }

  return numIndex;
}
/**
 * 从七牛图片链接中获取图片尺寸
 * @param {string} src 七牛图片链接
 * @returns {object} 图片宽高对象
 */


function getDefaultSize(src) {
  var origin = ImageUtils.getOriginImage(src);
  var reg = /^https?:\/\/cdn\.wanwudezhi\.com\/.*_(\d+x\d+)\.\w+/;

  if (reg.test(origin)) {
    var nums = (origin.match(reg)[1] || '').split('x');
    var width = nums[0];
    var height = nums[1];
    return {
      width: width,
      height: height
    };
  }
}
/**
 * 获取预设图片裁切尺寸对象
 * @param {{width:number,height:number}} arg 图片尺寸对象
 * @param {{width:number,height:number}} prechImgArg 预设图片尺寸对象
 * @returns {{width:number,height:number}} 预设图片裁切尺寸对象
 */


function getPrechImgSize(arg, prechImgArg) {
  var width;
  var height;

  if (getScale(arg) > getScale(prechImgArg)) {
    width = prechImgArg.width;
    height = Math.round(width / arg.width * arg.height);
  } else {
    height = prechImgArg.height;
    width = Math.round(height / arg.height * arg.width);
  }

  if (!(width && height)) {
    width = prechImgArg.width;
    height = prechImgArg.height;
  }

  return {
    width: width,
    height: height
  };
}
/**
 *获取尺寸接近的预设图对象
 * @param {{width:number,height:number}} targetImgObj 目标图片尺寸
 * @param {Array<{width:number,height:number,url:string}>} imgsObjList 预设图对象数组
 * @returns {{width:number,height:number,url:string}} 预设图对象
 */


function getCloseToImgSizeObj(targetImgObj, imgsObjList) {
  var scales = imgsObjList.map(getScale);
  var targetScale = getScale(targetImgObj);
  var index = closeToNumIndex(targetScale, scales);
  return imgsObjList[index];
}
/**
 *  获取宽高比例
 * @param {{width:number,height:number}} size
 * @returns {number}
 */


function getScale(size) {
  return size.width / size.height;
}

export default index;
export { getLazyFn };
