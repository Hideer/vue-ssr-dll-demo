/**
 * Create by changsheng on 2019-04-03 11:38
 */
export declare function isPlainObject(value: any): boolean;
export declare function isString(value: any): boolean;
export declare function isPromise(promise: any): boolean;
export declare const isEqualWithStack: (a: any, b: any, aStack?: any[], bStack?: any[]) => boolean;
/**
 * 判断变量是否相等
 * @param  {any} a     需要比较的变量
 * @param  {any} b     需要比较的变量
 * @return {Boolean}   变量是否相等
 */
export declare const isEqual: (a: any, b: any) => boolean;
/**
 * deep copy
 * @param value
 * @return {any}
 */
export declare function clone(value: any): any;
/**
 * deep merge
 * @param {{}} dest
 * @param sources
 * @return {{}}
 */
export declare function merge(dest?: {}, ...sources: any[]): {};
export declare function setAt(path: string, root: Object | any, data: any): void;
/**
 * 数组扁平化
 * @param array
 * @return {any}
 */
export declare function flatten(array: any): any;
/**
 * 从对象里取数据，返回取的对象
 * @param object
 * @param keys
 * @return {{}}
 */
export declare function pick(object: any, ...keys: any[]): {};
/**
 * 从多想去除数据，返回去除之后的对象
 * @param object
 * @param keys
 * @return {{}}
 */
export declare function omit(object: any, ...keys: any[]): {};
/**
 * 价格格式化
 * @param price
 * @return {string}
 */
export declare function formatPrice(price: any): string;
export declare function formatPriceDrawer(price: any, fractionDigits: number): string;
/**
 * 取原图地址
 * @param path
 * @return {any}
 */
export declare function getImageUrl(path: any): any;
/**
 * 解析query字符串，返回KV对象
 * @param queryString
 * @param decode
 * @return {{}}
 */
export declare function parse(queryString: any, decode?: boolean): {};
/**
 * 格式化对象，组成url的query，key=value&key1=value1
 * @param params
 * @param {boolean} encode
 * @return {string}
 */
export declare function stringify(params: any, encode?: boolean): string;
/**
 * 格式化URL，将对象拼到url上
 * @param url
 * @param params
 * @param {boolean} encode
 * @return {string}
 */
export declare function stringifyUrl(url: string, params?: {}, encode?: boolean): string;
export declare function parseUrl(url: string, params?: {}, decode?: boolean): {
    path: string;
    params: any;
    hash: string;
};
/**
 * @desc 获取链接参数的值
 * @param  {string} name - 参数名字
 * @param  {string} [url] - 链接url，为空的时候取location.search
 * @return {string} 参数
 */
export declare function getQueryString(name: string, url?: string): string;
/**
 * 设置链接参数
 * @param uri 要设置的链接
 * @param key 要设置的参数 key
 * @param value 要设置的值 value
 */
export declare function setQueryString(uri: string, key: string, value: any): string;
/**
 * 删除链接参数
 * @param uri
 * @param key
 */
export declare function removeQueryString(uri: string, key: string): string;
/**
 * 设置 cookie
 *
 * demo: M.setCookie('_ccna', 2, {expire: 1, path: '/'});
 * @desc 设置cookie值，只能设置二级域名，过期时间最多一天
 * @param {string} name - cookie name
 * @param {string} value - cookie value
 * @param {object} options
 *          options.expire: 过期时间，单位为天
 *          options.path:   cookie 存放路径
 */
export declare function setCookie(name: any, value: any, options?: any): void;
/**
 * 获取 cookie 值, 如果 cookie 取不到，返回 '';
 * @param  {string} name - cookie name
 * @return {string} cookie value
 */
export declare function getCookie(name: any): string;
/**
 * 删除 cookie
 */
export declare function removeCookie(name: any, options?: any): void;
/**
 * 获取格式化时间
 * @param  {Number} leftSecond 剩余时间
 * @param  {String} format      格式
 * @return {Object}             格式化映射对象
 */
export declare function getFormatTime(leftSecond: number, format: string): {
    dd: any;
    hh: any;
    mm: any;
    ss: any;
    zz: any;
    zzz: string | number;
    d: number;
    h: number;
    m: number;
    s: number;
    z: number;
};
/**
 * 时间格式化（非日期），如果没雨dd或者d，会将时间加到小时中，没有hh或者h，把时间加到分钟，以此类推
 * @param  {Number} timeStamp 时间
 * @param  {String} format    格式
 * @return {[type]}
 * @example   formatTimeStamp(60, 'mm分ss秒') === 01分00秒
 * @example   formatTimeStamp(60, 'ss秒') === 60秒
 */
export declare function formatTime(timeStamp: any, format?: string): string;
export declare function getFormatTimeArray(timeStamp: any, format?: string): {
    value: any;
    type: string;
}[];
/**
 * 节流函数，保证方法至少间隔wait时间执行一次
 * @param {(...args: any[]) => any} func
 * @param {number} wait
 * @param {{leading?: boolean; trailing?: boolean}} options
 * @return {(...args: any[]) => any}
 */
export declare function throttle(func: any, wait: any, options: any): any;
/**
 * 防抖函数，保证方法在上次调用之后wait时间之后执行
 * @param {(...args: any[]) => any} func
 * @param {number} wait
 * @param {boolean} immediate
 * @return {(...args: any[]) => any}
 */
export declare function debounce(func: any, wait: any, immediate: any): any;
/**
 * 语义化版本号比较
 * @param {string} v1
 * @param {string} v2
 * @return {number}
 */
export declare function compareVersion(v1: string, v2: string): 1 | 0 | -1;
export declare function getDebugCode(): string;
export declare function filter(data: object | any[], filterCallback: (item: any, key?: string | number) => boolean): any;
export declare function getTypeof(obj: any): "object" | "function" | "string" | "number" | "undefined" | "boolean" | "null" | "array" | "date" | "regExp";
/**
 * 判断各种js数据类型
 */
export declare const typeYalidator: {
    /**
     * 判断是否是字符串
     * @param value
     * @returns {boolean}
     */
    isString(value: any): boolean;
    /**
     * 判断是否是 number
     * @param value
     * @returns {boolean}
     */
    isNumber(value: any): boolean;
    /**
     * 判断是否是NaN
     * @param value
     * @returns {boolean}
     */
    isNaN(value: any): boolean;
    /**
     * 判断是否是整形数字
     * @param value
     * @returns {boolean}
     */
    isInt(value: any): boolean;
    /**
     * 判断是否浮点型数字
     * @param value
     * @returns {boolean}
     */
    isFloat(value: any): boolean;
    /**
     * 判断是否是bool型数据
     * @param value
     * @returns {boolean}
     */
    isBool(value: any): boolean;
    /**
     * 判断是否是 undefined
     * @param value
     * @returns {boolean}
     */
    isUndefined(value: any): boolean;
    /**
     * 判读是否是function
     * @param value
     * @returns {boolean}
     */
    isFunction(value: any): boolean;
    /**
     * 判断是否是数组
     * @param value
     * @returns {boolean}
     */
    isArray(value: any): boolean;
    /**
     * 判断是否是对象
     * @param value
     * @returns {boolean}
     */
    isObject(value: any): boolean;
    /**
     * 判断是否是null
     * @param value
     * @returns {boolean}
     */
    isNull(value: any): boolean;
    /**
     * 判断值是否为空
     * @param value
     * @return {boolean}
     */
    isEmpty(value: any): any;
};
/**
 *  获取对象或者数组的深值，避免空指针
 * @param obj 对象
 * @param valuePath exa:'detail.0.0' 对象值得路径
 */
export declare const getObjDeepValue: (obj: any, valuePath: any) => any;
/**
 * 数组item remove方法
 * @param {Array} arr
 * @param {*} item [数组要删除的item]
 */
export declare const ArrayRemove: (arr: any, item: any) => any;
export declare const isLargerThanAppVersion: (appVersion: string) => boolean;
/**
 * 2021-05-08 新增计算页面白屏时间方法 - 银时
 */
export declare const pageInitTime: () => number;
export declare const colorConvert: (color: any) => any;
export declare const clientColor2webColor: (color: any) => any;
