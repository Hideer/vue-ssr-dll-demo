/**
 * Create by changsheng on 2019-07-24 16:47
 */
export default class EventEmitter {
    constructor() {
        this._events = Object.create(null);
    }
    $on(event, callback) {
        if (!this._events[event]) {
            this._events[event] = [];
        }
        this._events[event].push(callback);
        return this;
    }
    $once(event, callback) {
        const on = (...args) => {
            this.$off(event, on);
            callback.apply(this, args);
        };
        return this.$on(event, on);
    }
    $off(event, callback) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            return this;
        }
        const callbacks = this._events[event];
        if (!callbacks) {
            return this;
        }
        if (arguments.length === 1) {
            this._events[event] = null;
            return;
        }
        for (let i = callbacks.length - 1; i >= 0; i--) {
            if (callbacks[i] === callback) {
                callbacks.splice(i, 1);
                break;
            }
        }
        return this;
    }
    $clear() {
        this._events = Object.create(null);
        return this;
    }
    $emit(event, ...args) {
        const callbacks = this._events[event];
        if (callbacks) {
            for (let i = 0, len = callbacks.length; i < len; i++) {
                try {
                    callbacks[i].apply(this, args);
                }
                catch (error) {
                    console.error('fail to execute event handler of', event, error.stack);
                }
            }
        }
        return this;
    }
}
;
