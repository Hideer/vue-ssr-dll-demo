/**
 * Create by changsheng on 2019-03-12 13:08
 */
const GlobalTickerCache = {};
export class Ticker {
    constructor(fps) {
        this.timer = null;
        this.timeoutCallbacks = Object.create(null);
        this.intervalCallbacks = Object.create(null);
        this.count = 0;
        this.timerId = 0;
        this.isRun = false;
        this.fps = fps;
    }
    /**
     * 开始计时
     */
    start() {
        this.startTime = new Date().getTime();
        this.count = 0;
        this.isRun = true;
        this.execute();
    }
    /**
     * 暂停
     */
    pause() {
        clearTimeout(this.timer);
        this.isRun = false;
    }
    /**
     * 停止
     */
    stop() {
        clearTimeout(this.timer);
        this.isRun = false;
    }
    /**
     * 恢复
     */
    resume() {
        this.start();
    }
    /**
     * 清除所有任务
     */
    clear() {
        this.timeoutCallbacks = Object.create(null);
        this.intervalCallbacks = Object.create(null);
    }
    /**
     * 定时执行，只执行一次
     * @param callback
     * @return {number}
     */
    setTimeout(callback) {
        this.timeoutCallbacks[++this.timerId] = callback;
        return this.timerId;
    }
    /**
     * 定时执行，会重复执行
     * @param callback
     * @return {number}
     */
    setInterval(callback) {
        this.intervalCallbacks[++this.timerId] = callback;
        return this.timerId;
    }
    /**
     * 移除定时器
     * @param timerId
     */
    clearTimeout(timerId) {
        delete this.timeoutCallbacks[timerId];
    }
    /**
     * 移除定时器
     * @param timerId
     */
    clearInterval(timerId) {
        delete this.intervalCallbacks[timerId];
    }
    execute() {
        clearTimeout(this.timer);
        this.tick();
        if (this.isRun) {
            this.lastTime = new Date().getTime();
            const nextFps = this.startTime + ++this.count * this.fps - this.lastTime;
            this.timer = setTimeout(this.execute.bind(this), nextFps);
        }
    }
    tick() {
        // 遍历timeout
        for (let timerId of Object.keys(this.timeoutCallbacks)) {
            const callback = this.timeoutCallbacks[timerId];
            try {
                typeof callback === 'function' && callback();
            }
            catch (error) {
                console.error(error);
            }
            delete this.timeoutCallbacks[timerId];
        }
        // 遍历interval
        for (let timerId of Object.keys(this.intervalCallbacks)) {
            const callback = this.intervalCallbacks[timerId];
            try {
                typeof callback === 'function' && callback();
            }
            catch (error) {
                console.error(error);
            }
        }
    }
}
export function createTicker(fps = 1000) {
    let ticker = GlobalTickerCache[fps];
    if (!ticker) {
        ticker = new Ticker(fps);
        GlobalTickerCache[fps] = ticker;
    }
    ticker.start();
    return ticker;
}
