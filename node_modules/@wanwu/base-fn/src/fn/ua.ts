/**
 * Create by changsheng on 2019-04-09 18:37
 */
import WANWUConfig from '../config';

export function getUserAgent() {
    return navigator.userAgent.toLowerCase();
}

export function isApp() {
    return getUserAgent().indexOf('wwdz') > -1;
}

/**
 * 用来从UA中获取当前环境的APP
 * @param {string} ua UA字符串，例：mozilla/5.0 (linux; android 11; redmi k30 pro build/rkq1.200826.002; wv) applewebkit/537.36 (khtml, like gecko) version/4.0 chromel 77.0.3865.120 mqqbrowser/6.2 tbs/ 045514 mobile safari/537.36; nettype =1 wwdz_b2b/1.1.01 wwdz/3.6.0 statusbarheight/96
 * @returns { string | undefined} wwdz_b2b标记“收藏集市”，wwdz标记“玩物得志”，undefined标记外app外
 */
export function getAppName(ua = getUserAgent()): string | undefined {
    if (/wwdz_b2b/.test(ua)) {
        return 'wwdz_b2b';
    } else if (/wwdz/.test(ua)) {
        return 'wwdz';
    }
    return undefined;
}

let isIOSCache = null;
export function isIOS() {
    if (isIOSCache === null) {
        isIOSCache = /iphone|ipad|ipod/.test(getUserAgent());
    }
    return isIOSCache;
}

let isAndroidCache = null;
export function isAndroid() {
    if (isAndroidCache === null) {
        isAndroidCache = getUserAgent().indexOf('android') > -1;
    }
    return isAndroidCache;
}

let isPCCache = null;
export function isPC() {
    if (isPCCache === null) {
        isPCCache = !/iphone|ipad|ipod|android|blackberry|iemobile|harmonyos/.test(getUserAgent());
    }
    return isPCCache;
}

export function isIOSApp() {
    return isIOS() && isApp();
}

export function isAndroidApp() {
    return isAndroid() && isApp();
}

export function isWechat() {
    return getUserAgent().indexOf('micromessenger') > -1;
}

export function isTieba() {
    return getUserAgent().indexOf('tieba') > -1;
}

// 抖音环境判断
export function isTikTok() {
    return getUserAgent().indexOf('aweme') > -1;
}

// 快手环境判断
export function isKuaiShou() {
    return getUserAgent().indexOf('KsWebView') > -1;
}

export function getAppVersion() {
    let reg = /.*wwdz\/(\d+\.\d+\.\d+).*/;
    // 兼容获取收藏集市app的版本号
    try {
        const wanwuConfig = new WANWUConfig();
        const appVersionReg = wanwuConfig.getConfig('base-fn', 'appVersionReg');
        if (appVersionReg) { reg = new RegExp(appVersionReg) };
        // const obj = JSON.parse(sessionStorage.getItem('__GlobalConfig__') || '{}');
        // if (obj.appVersionReg) { reg = new RegExp(obj.appVersionReg); }
    } catch (e) {}
    const ua = getUserAgent();
    if (reg.test(ua)) {
        return ua.replace(reg, '$1');
    } else {
        return '';
    }
}

export function isIPhoneX() {
    const screen = window.screen;
    return isIOS() && ((screen.height == 812 && screen.width == 375)||(screen.height == 896 && screen.width == 414)||(screen.height == 844 && screen.width == 390));
}

export function getAppPlatform() {
    if (isAndroidApp()) {
        return 'android';
    } else if (isIOSApp()) {
        return 'ios';
    } else if(isWechatMiniProgram()){
        return 'xcx'
    }else {
        return 'h5';
    }
}

export function isWechatMiniProgram() {
    return isWechat() && getUserAgent().indexOf('miniprogram') > -1;
}

export function isQQ() {
    return getUserAgent().indexOf('qq') > -1;
}

export function isQQBrowser() {
    return getUserAgent().indexOf('mqqbrowser') > -1;
}

export function isWeibo() {
    return getUserAgent().indexOf('weibo') > -1;
}

export function getAndroidSystemVersion () {
  return getAndroidSystemVersionString() && parseInt(getAndroidSystemVersionString().split('.')[0])
}

export function getIosSystemVersion ()  {
  return getIosSystemVersionString() && parseInt(getIosSystemVersionString().split('.')[0])
}

export function getIosSystemVersionString () {
  const reg = /os [\d._]+/ig;
  return isIOS() && getUserAgent().match(reg).toString().replace(/[^0-9|_.]/ig, '').replace(/_/ig, '.')
}

export function getAndroidSystemVersionString () {
  const reg = /android [\d._]+/ig;
  return isAndroid() && getUserAgent().match(reg).toString().replace(/[^0-9|_.]/ig, '').replace(/_/ig, '.')
}

let isLowVersionIOSCache = null
export function isLowVersionIOS() {
    if (isLowVersionIOSCache === null) {
        isLowVersionIOSCache = getIosSystemVersion() < 11;
    }
    return isLowVersionIOSCache;
}

let isLowVersionAndroidCache = null
export function isLowVersionAndroid() {
    if (isLowVersionAndroidCache === null) {
        isLowVersionAndroidCache = getAndroidSystemVersion() < 9;
    }
    return isLowVersionAndroidCache;
}

// 判断低版本设备 (非安卓/IOS系统会返回true)
export function isLowVersionDevice() {
    if (isIOS()) {
        return isLowVersionIOS();
    }
    if (isAndroid()) {
        return isLowVersionAndroid();
    }
    return true;
}
