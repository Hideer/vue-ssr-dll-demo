"use strict";
/**
 * Create by changsheng on 2019-07-24 16:47
 */
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this._events = Object.create(null);
    }
    EventEmitter.prototype.$on = function (event, callback) {
        if (!this._events[event]) {
            this._events[event] = [];
        }
        this._events[event].push(callback);
        return this;
    };
    EventEmitter.prototype.$once = function (event, callback) {
        var _this = this;
        var on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.$off(event, on);
            callback.apply(_this, args);
        };
        return this.$on(event, on);
    };
    EventEmitter.prototype.$off = function (event, callback) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            return this;
        }
        var callbacks = this._events[event];
        if (!callbacks) {
            return this;
        }
        if (arguments.length === 1) {
            this._events[event] = null;
            return;
        }
        for (var i = callbacks.length - 1; i >= 0; i--) {
            if (callbacks[i] === callback) {
                callbacks.splice(i, 1);
                break;
            }
        }
        return this;
    };
    EventEmitter.prototype.$clear = function () {
        this._events = Object.create(null);
        return this;
    };
    EventEmitter.prototype.$emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var callbacks = this._events[event];
        if (callbacks) {
            for (var i = 0, len = callbacks.length; i < len; i++) {
                try {
                    callbacks[i].apply(this, args);
                }
                catch (error) {
                    console.error('fail to execute event handler of', event, error.stack);
                }
            }
        }
        return this;
    };
    return EventEmitter;
}());
exports.default = EventEmitter;
;
