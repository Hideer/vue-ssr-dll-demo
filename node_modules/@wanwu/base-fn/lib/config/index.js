"use strict";
/**
 * Create by liugu on 2021-03-22 15:22
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WANConfig = void 0;
var CONFIG_KEY = '__WANWU_CONFIG__';
var WANConfig = /** @class */ (function () {
    /**
     * 构造函数
     * @param {object} initConfig 初始值
     * @param {object} param1 配置，replace标志是否全部替换，configKey标志window下配置的键值
     */
    function WANConfig(initConfig, _a) {
        if (initConfig === void 0) { initConfig = {}; }
        var _b = _a === void 0 ? {} : _a, _c = _b.replace, replace = _c === void 0 ? false : _c, _d = _b.configKey, configKey = _d === void 0 ? CONFIG_KEY : _d;
        /**
         * window下配置的键值
         */
        this.configKey = CONFIG_KEY;
        this.configKey = configKey || CONFIG_KEY;
        if (typeof window !== 'undefined') {
            if (replace) {
                window[this.configKey] = initConfig || {};
            }
            else {
                window[this.configKey] = window[this.configKey] || {};
                Object.assign(window[this.configKey], initConfig);
            }
            return;
        }
        throw new Error('不支持在window外注入配置');
    }
    /**
     * 设置某个依赖的具体某个配置的值
     * @param {string} dependencyName 依赖名称
     * @param {array} args 参数可接受1个或者2个
     */
    WANConfig.prototype.setConfig = function (dependencyName) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (window) {
            if (!window[this.configKey][dependencyName]) {
                window[this.configKey][dependencyName] = {};
            }
            if (args.length === 1) {
                Object.assign(window[this.configKey][dependencyName], args[0] || {});
            }
            else if (args.length > 1) {
                var key = args[0], value = args[1];
                Object.assign(window[this.configKey][dependencyName], (_a = {}, _a[key] = value, _a));
            }
            return;
        }
        throw new Error('不支持在window外注入配置');
    };
    /**
     * 重置某个依赖的真个体配置
     * @param {string} dependencyName 依赖名称
     * @param {object} nextConfig 需要替换的目标，缺省情况下进行替换
     * @returns
     */
    WANConfig.prototype.resetConfig = function (dependencyName, nextConfig) {
        if (window) {
            if (nextConfig) {
                window[this.configKey][dependencyName] = nextConfig;
            }
            else if (window[this.configKey][dependencyName]) {
                delete window[this.configKey][dependencyName];
            }
            return;
        }
        throw new Error('不支持在window外注入配置');
    };
    /**
     * 获取某个依赖的具体某个配置的值
     * @param {string} dependencyName 依赖名称
     * @param {string} key 某个具体配置的键值，可缺省
     * @returns 单个依赖单个配置的值，或者单个依赖整个配置的值
     */
    WANConfig.prototype.getConfig = function (dependencyName, key) {
        if (window) {
            if (!window[this.configKey]) {
                return undefined;
            }
            else if (!key) {
                return window[this.configKey][dependencyName];
            }
            else if (!window[this.configKey][dependencyName]) {
                return undefined;
            }
            else {
                return window[this.configKey][dependencyName][key];
            }
        }
        throw new Error('不支持在window外注入配置');
    };
    return WANConfig;
}());
exports.WANConfig = WANConfig;
;
exports.default = WANConfig;
