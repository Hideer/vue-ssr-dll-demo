/**
 * Create by liugu on 2021-03-22 15:22
 */
export declare class WANConfig {
    /**
     * window下配置的键值
     */
    private configKey;
    /**
     * 构造函数
     * @param {object} initConfig 初始值
     * @param {object} param1 配置，replace标志是否全部替换，configKey标志window下配置的键值
     */
    constructor(initConfig?: Record<string, any>, { replace, configKey }?: {
        replace?: boolean;
        configKey?: string;
    });
    /**
     * 设置某个依赖的具体某个配置的值
     * @param {string} dependencyName 依赖名称
     * @param {array} args 参数可接受1个或者2个
     */
    setConfig(dependencyName: string, ...args: [string, any] | [Record<string, any>]): void;
    /**
     * 重置某个依赖的真个体配置
     * @param {string} dependencyName 依赖名称
     * @param {object} nextConfig 需要替换的目标，缺省情况下进行替换
     * @returns
     */
    resetConfig(dependencyName: string, nextConfig?: Record<string, any>): void;
    /**
     * 获取某个依赖的具体某个配置的值
     * @param {string} dependencyName 依赖名称
     * @param {string} key 某个具体配置的键值，可缺省
     * @returns 单个依赖单个配置的值，或者单个依赖整个配置的值
     */
    getConfig(dependencyName: string, key?: string): any;
}
export default WANConfig;
