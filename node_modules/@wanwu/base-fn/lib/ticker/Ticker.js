"use strict";
/**
 * Create by changsheng on 2019-03-12 13:08
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTicker = exports.Ticker = void 0;
var GlobalTickerCache = {};
var Ticker = /** @class */ (function () {
    function Ticker(fps) {
        this.timer = null;
        this.timeoutCallbacks = Object.create(null);
        this.intervalCallbacks = Object.create(null);
        this.count = 0;
        this.timerId = 0;
        this.isRun = false;
        this.fps = fps;
    }
    /**
     * 开始计时
     */
    Ticker.prototype.start = function () {
        this.startTime = new Date().getTime();
        this.count = 0;
        this.isRun = true;
        this.execute();
    };
    /**
     * 暂停
     */
    Ticker.prototype.pause = function () {
        clearTimeout(this.timer);
        this.isRun = false;
    };
    /**
     * 停止
     */
    Ticker.prototype.stop = function () {
        clearTimeout(this.timer);
        this.isRun = false;
    };
    /**
     * 恢复
     */
    Ticker.prototype.resume = function () {
        this.start();
    };
    /**
     * 清除所有任务
     */
    Ticker.prototype.clear = function () {
        this.timeoutCallbacks = Object.create(null);
        this.intervalCallbacks = Object.create(null);
    };
    /**
     * 定时执行，只执行一次
     * @param callback
     * @return {number}
     */
    Ticker.prototype.setTimeout = function (callback) {
        this.timeoutCallbacks[++this.timerId] = callback;
        return this.timerId;
    };
    /**
     * 定时执行，会重复执行
     * @param callback
     * @return {number}
     */
    Ticker.prototype.setInterval = function (callback) {
        this.intervalCallbacks[++this.timerId] = callback;
        return this.timerId;
    };
    /**
     * 移除定时器
     * @param timerId
     */
    Ticker.prototype.clearTimeout = function (timerId) {
        delete this.timeoutCallbacks[timerId];
    };
    /**
     * 移除定时器
     * @param timerId
     */
    Ticker.prototype.clearInterval = function (timerId) {
        delete this.intervalCallbacks[timerId];
    };
    Ticker.prototype.execute = function () {
        clearTimeout(this.timer);
        this.tick();
        if (this.isRun) {
            this.lastTime = new Date().getTime();
            var nextFps = this.startTime + ++this.count * this.fps - this.lastTime;
            this.timer = setTimeout(this.execute.bind(this), nextFps);
        }
    };
    Ticker.prototype.tick = function () {
        // 遍历timeout
        for (var _i = 0, _a = Object.keys(this.timeoutCallbacks); _i < _a.length; _i++) {
            var timerId = _a[_i];
            var callback = this.timeoutCallbacks[timerId];
            try {
                typeof callback === 'function' && callback();
            }
            catch (error) {
                console.error(error);
            }
            delete this.timeoutCallbacks[timerId];
        }
        // 遍历interval
        for (var _b = 0, _c = Object.keys(this.intervalCallbacks); _b < _c.length; _b++) {
            var timerId = _c[_b];
            var callback = this.intervalCallbacks[timerId];
            try {
                typeof callback === 'function' && callback();
            }
            catch (error) {
                console.error(error);
            }
        }
    };
    return Ticker;
}());
exports.Ticker = Ticker;
function createTicker(fps) {
    if (fps === void 0) { fps = 1000; }
    var ticker = GlobalTickerCache[fps];
    if (!ticker) {
        ticker = new Ticker(fps);
        GlobalTickerCache[fps] = ticker;
    }
    ticker.start();
    return ticker;
}
exports.createTicker = createTicker;
