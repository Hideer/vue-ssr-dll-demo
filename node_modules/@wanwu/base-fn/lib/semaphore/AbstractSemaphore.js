"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BaseLock_1 = require("./BaseLock");
var Canstant_1 = require("./Canstant");
var AbstractSemaphore = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractSemaphore, _super);
    function AbstractSemaphore(name, fair) {
        if (name === void 0) { name = Canstant_1.DEFAULT_LOCKER_NAME; }
        if (fair === void 0) { fair = false; }
        var _this = _super.call(this) || this;
        _this.fair = fair;
        _this.name = name;
        return _this;
    }
    AbstractSemaphore.prototype.acquire = function (permits, index) {
        var _this = this;
        if (permits === void 0) { permits = 1; }
        if (index === void 0) { index = -1; }
        // @ts-ignore
        return new Promise(function (resolve, reject) {
            if (_this.fair) {
                _this.insertTask({ resolve: resolve, reject: reject, permits: permits }, index);
                _this.executeTaskQueue();
            }
            else {
                _this.acquireUnfair(permits, resolve, reject, index);
            }
        });
    };
    AbstractSemaphore.prototype.acquireUnfair = function (permits, resolve, reject, index) {
        var _this = this;
        this.doAcquire(permits).then(function (success) {
            if (success) {
                resolve(true);
            }
            else {
                _this.insertTask({ resolve: resolve, reject: reject, permits: permits }, index);
                // this.executeTaskQueue();
            }
        }).catch(function (error) {
            reject(error);
        });
    };
    AbstractSemaphore.prototype.release = function (permits) {
        var _this = this;
        if (permits === void 0) { permits = 1; }
        return this.doRelease(permits).then(function () {
            _this.executeTaskQueue();
            return true;
        });
    };
    AbstractSemaphore.prototype.tryAcquire = function (permits, timeout) {
        var _this = this;
        if (permits === void 0) { permits = 1; }
        // @ts-ignore
        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var endTime, success, _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 8, , 9]);
                        if (!(timeout > 0)) return [3 /*break*/, 5];
                        endTime = new Date().getTime() + timeout;
                        success = false;
                        _b.label = 1;
                    case 1: return [4 /*yield*/, this.doAcquire(permits)];
                    case 2:
                        success = _b.sent();
                        _b.label = 3;
                    case 3:
                        if (new Date().getTime() <= endTime && !success) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        resolve(success);
                        return [3 /*break*/, 7];
                    case 5:
                        _a = resolve;
                        return [4 /*yield*/, this.doAcquire(permits)];
                    case 6:
                        _a.apply(void 0, [_b.sent()]);
                        _b.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        error_1 = _b.sent();
                        reject(error_1);
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        }); });
    };
    AbstractSemaphore.prototype.executeTaskQueue = function () {
        // 按序执行之前缓存的任务
        if (this.getTaskLength() > 0) {
            var _a = this.shiftTask(), resolve = _a.resolve, reject = _a.reject, permits = _a.permits;
            this.acquireUnfair(permits, resolve, reject, 0);
        }
    };
    return AbstractSemaphore;
}(BaseLock_1.default));
exports.default = AbstractSemaphore;
