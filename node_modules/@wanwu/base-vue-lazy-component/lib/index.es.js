import 'core-js/modules/es.function.name';
import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.number.constructor';
import 'core-js/modules/es.object.keys';
import 'core-js/modules/web.dom-collections.for-each';
import 'core-js/modules/web.timers';
import 'core-js/modules/es.array.index-of';
import 'core-js/modules/es.array.join';
import 'core-js/modules/es.array.slice';
import 'core-js/modules/es.array.splice';
import 'core-js/modules/es.function.bind';
import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.string.split';
import { fn, ua } from '@wanwu/base-fn';
import { on } from '@wanwu/event-utils';
import { logE as logE$1 } from '@wanwu/base-logger';
import { normalizeComponent } from '@wanwu/vue-runtime-helpers';

var logE = logE$1;
var throttle = fn.throttle;
var DEFAULT_EVENTS = ['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend', 'touchmove']; // const preLoad = 1.3;
// window事件绑定状态

var isWindowBind = false; // 需要进行监听的组件列表，还没有加载过的

var exposureLsitObj = {};
var exposureMaxLength = 1;
var dataObj = {
  0: {
    listenList: [],
    showScope: {
      0: 0,
      1: 200
    }
  }
}; // let showScope = [0, 200];

var canshow = function canshow(obj) {
  var start = obj.showScope[0] - 50 || 0;
  var end = obj.showScope[1] + 50 || 200;
  var limitList = obj.listenList.slice(start > 0 ? start : 0, end); // if (JSON.stringify(obj.showScope) === '{}') {
  //     debugger;
  // }

  obj.showScope = {};
  limitList.forEach(function (listener, index) {
    listener.getRect();
    var catIn = listener.checkInView();

    if (catIn) {
      if (!obj.showScope[0]) {
        obj.showScope[0] = index + (start > 0 ? start : 0);
      } else {
        obj.showScope[1] = index + (start > 0 ? start : 0);
      }

      listener.load();
      canLog(listener);
    } else {
      if (!listener.noRecycle) {
        listener.recycle();
      }
    }
  });
};
/**
     * 检测组件是否可以加载，如果可以则进行加载
     * @param {*} item [组件数组]
     */


var isCanShow = function isCanShow() {
  Object.keys(dataObj).forEach(function (key) {
    dataObj[key] && canshow(dataObj[key]);
  });
}; // 添加监听事件scroll

var onScroll = throttle(isCanShow, 150);
var onListenScroll = function onListenScroll(vm) {
  // isCanShow();
  if (!isWindowBind) {
    DEFAULT_EVENTS.forEach(function (evt) {
      on(window, evt, onScroll, true); // window.addEventListener(evt, onScroll);
    });
    on(document, 'visibilitychange', onVisible);
    isWindowBind = true;
  } // if (containerEl && contentList.indexOf(containerEl) === -1) {
  //     DEFAULT_EVENTS.forEach(evt => {
  //         on(containerEl, evt, onScroll, true);
  //         // containerEl.addEventListener(evt, onScroll);
  //     });
  //     contentList.push(containerEl);
  // }

};

function onVisible() {
  if (document.hidden) {
    logExposureAll();
  }
}

function logExposure(filtersKey) {
  var vm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var filters = getFilterTexts(filtersKey);
  var exposureLsit = exposureLsitObj[filtersKey] || [];
  var cntLogE = vm.$logE && vm.$logE.bind(vm) || logE; // 每一项单独打点，不然请求数据太大

  exposureLsit.forEach(function (item) {
    // 老列表曝光打点
    if (item[10007]) {
      cntLogE(10007, {
        cur: filters,
        domain: [item[10007]]
      });
    } // 新曝光打点


    if (item.newExposureData) {
      var event = item.newExposureData.event || 'listShow';
      var _dataObj = {};

      if (event === 'listShow') {
        _dataObj = {
          domain: [item.newExposureData]
        };
      } else {
        _dataObj = fn.omit(item.newExposureData, 'event');
      }

      cntLogE(event, _dataObj);
    }
  });
  delete exposureLsitObj[filtersKey];
}
function logExposureAll() {
  Object.keys(exposureLsitObj).forEach(function (filtersKey) {
    logExposure(filtersKey);
  });
}
function addListerner(vm) {
  vm.getRect();
  var catIn = vm.checkInView();

  if (catIn) {
    vm.load();
    canLog(vm);
  }

  if (!dataObj[vm.type]) {
    dataObj[vm.type] = {
      listenList: [],
      showScope: vm.showScopeCache ? fn.clone(vm.showScopeCache) : {
        0: 0,
        1: 200
      }
    };
  }

  if (dataObj[vm.type].listenList.indexOf(vm) === -1) {
    dataObj[vm.type].listenList.push(vm);

    if (catIn) {
      dataObj[vm.type].showScope = vm.showScopeCache ? fn.clone(vm.showScopeCache) : {
        0: dataObj[vm.type].listenList.length - 50,
        1: dataObj[vm.type].listenList.length + 50
      };
    }
  }
}
function cacheShowScope(type) {
  var showScopeCache;

  if (dataObj[type]) {
    showScopeCache = fn.clone(dataObj[type].showScope);
  }

  delete dataObj[type];
  return showScopeCache;
}

function getFilterTextKey(filterTexts) {
  return filterTexts.join('-');
}

function getFilterTexts(filtersKey) {
  return filtersKey.split('-');
}

function canLog(listener) {
  if (listener.filterTexts && listener.filterTexts.length > 0) {
    var filtersKey = getFilterTextKey(listener.filterTexts);
    var isInRealView = listener.checkInRealView();

    if (isInRealView && !listener.state.isInRealView) {
      listener.setState({
        isInRealView: true
      });

      if (!exposureLsitObj[filtersKey]) {
        exposureLsitObj[filtersKey] = [];
      }

      exposureLsitObj[filtersKey].push({
        10007: listener.exposureData,
        newExposureData: listener.newExposureData
      });

      if (exposureLsitObj[filtersKey].length >= exposureMaxLength) {
        logExposure(filtersKey, listener);
      }
    } else if (!isInRealView) {
      listener.setState({
        isInRealView: false
      });
    }
  }
}

var script = {
  name: 'LazyComponent',
  components: {},
  props: {
    preLoad: {
      type: Number,
      // default: ua.isIOSApp() ? 6 : 2,
      // ios webview更换后不存在性能限制问题了，去除对ios的特殊处理
      "default": 2
    },
    height: {
      type: [Number],
      "default": function _default() {
        return 500;
      }
    },
    width: {
      type: [Number]
    },
    perchClass: {
      type: [String, Object]
    },
    type: {
      type: [Number, String],
      "default": 0
    },
    noRecycle: {
      type: Boolean
    },
    // 当前曝光数据
    exposureData: {
      type: Object
    },
    // 新的曝光数据
    newExposureData: {
      type: Object
    },
    // 筛选器文案
    filterTexts: {
      type: Array,
      "default": function _default() {
        return ['全部'];
      }
    }
  },
  data: function data() {
    return {
      el: null,
      state: {
        loaded: false,
        isInRealView: false
      },
      rect: {},
      show: false,
      realStyle: null,
      showScopeCache: null
    };
  },
  computed: {
    perchStyle: function perchStyle() {
      return {
        height: this.height ? this.height / 100 + 'rem' : null,
        width: this.width ? this.width / 100 + 'rem' : null
      };
    }
  },
  mounted: function mounted() {
    // if (ua.isIOSApp()) {
    //     this.show = true;
    //     return;
    // }
    this.el = this.$el;
    addListerner(this);
    onListenScroll();
  },
  activated: function activated() {
    var _this = this;

    if (!ua.isIOS()) {
      addListerner(this);
    } else {
      setTimeout(function () {
        addListerner(_this);
      }, 500);
    }
  },
  beforeDestroy: function beforeDestroy() {
    // if (ua.isIOSApp()) {
    //     return;
    // }
    // ArrayRemove(dataObj[this.type].listenList, this);
    this.showScopeCache = cacheShowScope(this.type);
    logExposureAll();
  },
  deactivated: function deactivated() {
    // if (ua.isIOSApp()) {
    //     return;
    // }
    // ArrayRemove(dataObj[this.type].listenList, this);
    this.showScopeCache = cacheShowScope(this.type);
    logExposureAll();
  },
  created: function created() {// listenList.push(this);
    // // isCanShow();
    // onListenScroll(this.viewport);
  },
  methods: {
    getRect: function getRect() {
      this.rect = this.$el.getBoundingClientRect();
    },
    checkInView: function checkInView() {
      return this.checkInWindow(this.preLoad);
    },
    checkInRealView: function checkInRealView() {
      return this.checkInWindow(1);
    },
    checkInWindow: function checkInWindow(preLoad) {
      return typeof window !== 'undefined' && this.rect.top <= window.innerHeight * preLoad && this.rect.bottom >= -window.innerHeight * (preLoad - 1) && this.rect.left <= window.innerWidth * preLoad && this.rect.right >= -window.innerWidth * (preLoad - 1);
    },
    setState: function setState(state) {
      var _this2 = this;

      if (state) {
        Object.keys(state).forEach(function (key) {
          _this2.$set(_this2.state, key, state[key]);
        });
      }
    },
    load: function load() {
      this.show = true; // this.state.loaded = true;

      this.setState({
        loaded: true
      });
      this.$emit('show', this);
    },
    recycle: function recycle() {
      this.getRect();
      this.realStyle = {};
      var height = this.rect.height > window.innerHeight ? window.innerHeight : this.rect.height;
      var width = this.rect.width > window.innerWidth ? window.innerWidth : this.rect.width;
      this.realStyle.height = height + 'px';
      this.realStyle.width = width + 'px';
      this.show = false;
      this.setState({
        loaded: false
      });
      this.$emit('recycle', this);
    }
  }
};

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('keep-alive', {
    attrs: {
      "max": 5
    }
  }, [_vm.show ? _c('div', {
    staticClass: "component__lazyComponent lazyComponent"
  }, [_vm._t("default")], 2) : _vm.$slots.skeleton ? _c('div', {
    staticClass: "component__lazyComponent lazyComponent"
  }, [_vm._t("skeleton")], 2) : _c('div', {
    staticClass: "component__lazyComponent lazyComponent",
    "class": _vm.perchClass,
    style: _vm.realStyle || _vm.perchStyle
  })]);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
};

export default __vue_component__;
