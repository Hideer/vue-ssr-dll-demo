import {
    fn,
} from '@wanwu/base-fn';
import {
    on,
} from '@wanwu/event-utils';
import {
    logE as NativeLogE,
} from '@wanwu/base-logger';
const logE = NativeLogE;
const {
    throttle,
} = fn;
const DEFAULT_EVENTS = [
    'scroll',
    'wheel',
    'mousewheel',
    'resize',
    'animationend',
    'transitionend',
    'touchmove',
];
// const preLoad = 1.3;
// window事件绑定状态
let isWindowBind = false;
// 需要进行监听的组件列表，还没有加载过的
// export let listenList = [];
// 父容器列表
export const contentList = [];
// 已经可以渲染的列表
export const canShowList = [];
// 元素曝光数据
export const exposureLsitObj = {};
const exposureMaxLength = 1;

export const dataObj = {
    0: {
        listenList: [],
        showScope: {
            0: 0,
            1: 200,
        },
    },
};

// let showScope = [0, 200];
/**
     * 数组item remove方法
     * @param {*} item [数组要删除的item]
     */
export const ArrayRemove = function (arr, item) {
    if (!arr.length) return;
    var index = arr.indexOf(item);
    if (index > -1) {
        arr.splice(index, 1);
        return arr;
    }
};
const canshow = (obj) => {
    const start = obj.showScope[0] - 50 || 0;
    const end = obj.showScope[1] + 50 || 200;
    const limitList = obj.listenList.slice(start > 0 ? start : 0, end);
    // if (JSON.stringify(obj.showScope) === '{}') {
    //     debugger;
    // }

    obj.showScope = {};
    limitList.forEach((listener, index) => {
        listener.getRect();
        const catIn = listener.checkInView();
        if (catIn) {
            if (!obj.showScope[0]) {
                obj.showScope[0] = index + (start > 0 ? start : 0);
            } else {
                obj.showScope[1] = index + (start > 0 ? start : 0);
            }
            listener.load();
            canLog(listener);
        } else {
            if (!listener.noRecycle) { listener.recycle(); }
        }
    });
};
/**
     * 检测组件是否可以加载，如果可以则进行加载
     * @param {*} item [组件数组]
     */
export const isCanShow = () => {
    Object.keys(dataObj).forEach(key => {
        dataObj[key] && canshow(dataObj[key]);
    });
};
    // 添加监听事件scroll
const onScroll = throttle(isCanShow, 150);
export const onListenScroll = vm => {
    // isCanShow();
    if (!isWindowBind) {
        DEFAULT_EVENTS.forEach(evt => {
            on(window, evt, onScroll, true);
            // window.addEventListener(evt, onScroll);
        });
        on(document, 'visibilitychange', onVisible);
        isWindowBind = true;
    }
    // if (containerEl && contentList.indexOf(containerEl) === -1) {
    //     DEFAULT_EVENTS.forEach(evt => {
    //         on(containerEl, evt, onScroll, true);
    //         // containerEl.addEventListener(evt, onScroll);
    //     });
    //     contentList.push(containerEl);
    // }
};
function onVisible() {
    if (document.hidden) { logExposureAll(); }
}

export function logExposure(filtersKey, vm = {}) {
    const filters = getFilterTexts(filtersKey);
    const exposureLsit = exposureLsitObj[filtersKey] || [];
    const cntLogE = ((vm.$logE && vm.$logE.bind(vm)) || logE);
    // 每一项单独打点，不然请求数据太大
    exposureLsit.forEach(item => {
        // 老列表曝光打点
        if (item[10007]) {
            cntLogE(10007, {
                cur: filters,
                domain: [
                    item[10007],
                ],
            });
        }
        // 新曝光打点
        if (item.newExposureData) {
            const event = item.newExposureData.event || 'listShow';
            let dataObj = {};
            if (event === 'listShow') {
                dataObj = {
                    domain: [
                        item.newExposureData,
                    ],
                };
            } else {
                dataObj = fn.omit(item.newExposureData, 'event');
            }
            cntLogE(event, dataObj);
        }
    });
    delete exposureLsitObj[filtersKey];
}

export function logExposureAll() {
    Object.keys(exposureLsitObj).forEach(filtersKey => {
        logExposure(filtersKey);
    });
}

export function addListerner(vm) {
    vm.getRect();
    const catIn = vm.checkInView();
    if (catIn) {
        vm.load();
        canLog(vm);
    }
    if (!dataObj[vm.type]) {
        dataObj[vm.type] = {
            listenList: [],
            showScope: vm.showScopeCache ? fn.clone(vm.showScopeCache) : {
                0: 0,
                1: 200,
            },
        };
    }
    if (dataObj[vm.type].listenList.indexOf(vm) === -1) {
        dataObj[vm.type].listenList.push(vm);
        if (catIn) {
            dataObj[vm.type].showScope = vm.showScopeCache ? fn.clone(vm.showScopeCache) : {
                0: dataObj[vm.type].listenList.length - 50,
                1: dataObj[vm.type].listenList.length + 50,
            };
        }
    }
}

export function cacheShowScope(type) {
    let showScopeCache;
    if (dataObj[type]) {
        showScopeCache = fn.clone(dataObj[type].showScope);
    }
    delete dataObj[type];
    return showScopeCache;
}

function getFilterTextKey(filterTexts) {
    return filterTexts.join('-');
}
function getFilterTexts(filtersKey) {
    return filtersKey.split('-');
}

function canLog(listener) {
    if (listener.filterTexts && listener.filterTexts.length > 0) {
        const filtersKey = getFilterTextKey(listener.filterTexts);
        const isInRealView = listener.checkInRealView();
        if (isInRealView && !listener.state.isInRealView) {
            listener.setState({
                isInRealView: true,
            });
            if (!exposureLsitObj[filtersKey]) {
                exposureLsitObj[filtersKey] = [];
            }
            exposureLsitObj[filtersKey].push({
                10007: listener.exposureData,
                newExposureData: listener.newExposureData,
            });
            if (exposureLsitObj[filtersKey].length >= exposureMaxLength) {
                logExposure(filtersKey, listener);
            }
        } else if (!isInRealView) {
            listener.setState({
                isInRealView: false,
            });
        }
    }
}
