/**
 * 绑定事件
 * @param {HTMLElement} target
 * @param {string} event
 * @param {EventHanlder} handler
 * @param {boolean} passive
 */
export function on(target, event, handler, passive = false) {
    target.addEventListener(event, handler, {
        capture: false,
        passive,
    });
}
/**
 * 取消绑定事件
 * @param {HTMLElement} target
 * @param {string} event
 * @param {EventHanlder} handler
 */
export function off(target, event, handler) {
    target.removeEventListener(event, handler);
}
/**
 * 阻止事件冒泡
 * @param {Event} event
 */
export function stop(event) {
    event.stopPropagation();
}
/**
 * 去下事件默认行为
 * @param {Event} event
 */
export function prevent(event) {
    event.preventDefault();
}
/**
 * vue实例批量绑定事件
 * @param {Vue instance} vm
 * @param {Events Object} events
 */
export function vmBindEvents(vm, events) {
    if (events instanceof Object) {
        Object.keys(events).forEach(key => {
            const eventFn = events[key];
            vm.$on(key, eventFn);
        });
    }
}

/**
 * vue实例批量解绑事件
 * @param {Vue instance} vm
 * @param {Events Object} events
 */
export function vmUnbindEvents(vm, events) {
    if (events instanceof Object) {
        Object.keys(events).forEach(key => {
            const eventFn = events[key];
            vm.$off(key, eventFn);
        });
    }
}
