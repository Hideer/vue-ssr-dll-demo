import axios from '@wanwu/http-request';
import {
    fn,
} from '@wanwu/base-fn';
let cache = {};
/**
 * 获取多个资源位的全部数据
 * @param {Array} resourceIds 资源位id数组
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */
export async function multiGet(resourceIds, options = {}) {
    if (typeof options === 'boolean') {
        options = {
            isProd: options,
        };
    }

    const {
        isProd = true,
    } = options || {};

    const {
        isCached = true,
    } = options || {};

    const resourceIdsStr = resourceIds.join(',');
    const resourceIdsStrKey = `${resourceIdsStr}${isProd ? '' : '-dev'}`;
    const api = '/resource/page/resource/detail';
    const prefix = isProd ? 'https://kunlun.wanwudezhi.com' : '';
    if (!cache[resourceIdsStrKey] || !isCached) {
        cache[resourceIdsStrKey] = axios.post(prefix + api, {
            resourceIdList: resourceIds,
        }, {
            withoutCancelToken: true,
            skipLogin: true,
        }).catch(err => {
            delete cache[resourceIdsStrKey];
            return Promise.reject(err);
        });
    }
    return cache[resourceIdsStrKey];
}

/**
 * 获取单个资源位的第一条数据
 * @param {String,Number}} resourceId 资源位id
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {any} res[0].detail[0] 如果没有，返回undefined或者null
 */
export function get(resourceId, options = {}) {
    return multiGet([
        resourceId,
    ], options).then(res => fn.getObjDeepValue(res, '0.detail.0'));
}
/**
 * 获取单个资源位的所有数据
 * @param {String,Number}} resourceId 资源位id
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {Array} res[0].detail 如果没有，返回undefined或者null
 */
export function getList(resourceId, options = {}) {
    return multiGet([
        resourceId,
    ], options).then(res => fn.getObjDeepValue(res, '0.detail'));
}

/**
 * 获取高分佣相关资源位 id 59
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */
export const highCommissionResource = async (isProd = true) => {
    return multiGet([
        59,
    ], isProd);
};

/**
 * 获取QQ图片社相关资源位 id 61
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */
export const qqtpsResource = async (isProd = true) => {
    return multiGet([
        61,
    ], isProd);
};

/**
 * 获取鉴宝首页资源位 id 82
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */
export const appraiserResource = (isProd = true) => {
    return multiGet([
        82,
    ], isProd);
};

/**
 * 获取全局相关配置 接口路径-/api/activity/client/get
 * @return {Promise}
 */
export const globalApiConfig = async () => {
    if (!cache.activeGoodsType) {
        cache.activeGoodsType = axios.post('/activity/client/get', {}, {
            withoutCancelToken: true,
            skipLogin: true,
        }).catch(err => {
            delete cache.activeGoodsType;
            return Promise.reject(err);
        });
    }
    return cache.activeGoodsType;
};
/**
 * 获取全局相关配置 接口路径-/api/activity/client/get
 * @return {Promise}
 */
export const activeGoodsType = globalApiConfig;
/**
 * 获取底部tab配置 接口路径-/api/resource/page/resource/bottom/xcx
 * @return {Promise}
 */
export const bottomResource = async () => {
    if (!cache.bottomResource) {
        cache.bottomResource = axios.post('/resource/page/resource/bottom/xcx', {}, {
            withoutCancelToken: true,
            skipLogin: true,
        }).catch(err => {
            delete cache.bottomResource;
            return Promise.reject(err);
        });
    }
    return cache.bottomResource;
};

export const clearCache = () => {
    cache = {};
};

export default {
    get,
    getList,
    multiGet,
    clearCache,
};
