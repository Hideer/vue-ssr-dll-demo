import 'core-js/modules/es.array.concat';
import 'core-js/modules/es.array.join';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'regenerator-runtime/runtime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import axios from '@wanwu/http-request';
import { fn } from '@wanwu/base-fn';

var cache = {};
/**
 * 获取多个资源位的全部数据
 * @param {Array} resourceIds 资源位id数组
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */

function multiGet(_x) {
  return _multiGet.apply(this, arguments);
}
/**
 * 获取单个资源位的第一条数据
 * @param {String,Number}} resourceId 资源位id
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {any} res[0].detail[0] 如果没有，返回undefined或者null
 */

function _multiGet() {
  _multiGet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(resourceIds) {
    var options,
        _ref5,
        _ref5$isProd,
        isProd,
        _ref6,
        _ref6$isCached,
        isCached,
        resourceIdsStr,
        resourceIdsStrKey,
        api,
        prefix,
        _args5 = arguments;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};

            if (typeof options === 'boolean') {
              options = {
                isProd: options
              };
            }

            _ref5 = options || {}, _ref5$isProd = _ref5.isProd, isProd = _ref5$isProd === void 0 ? true : _ref5$isProd;
            _ref6 = options || {}, _ref6$isCached = _ref6.isCached, isCached = _ref6$isCached === void 0 ? true : _ref6$isCached;
            resourceIdsStr = resourceIds.join(',');
            resourceIdsStrKey = "".concat(resourceIdsStr).concat(isProd ? '' : '-dev');
            api = '/resource/page/resource/detail';
            prefix = isProd ? 'https://kunlun.wanwudezhi.com' : '';

            if (!cache[resourceIdsStrKey] || !isCached) {
              cache[resourceIdsStrKey] = axios.post(prefix + api, {
                resourceIdList: resourceIds
              }, {
                withoutCancelToken: true,
                skipLogin: true
              })["catch"](function (err) {
                delete cache[resourceIdsStrKey];
                return Promise.reject(err);
              });
            }

            return _context5.abrupt("return", cache[resourceIdsStrKey]);

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _multiGet.apply(this, arguments);
}

function get(resourceId) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return multiGet([resourceId], options).then(function (res) {
    return fn.getObjDeepValue(res, '0.detail.0');
  });
}
/**
 * 获取单个资源位的所有数据
 * @param {String,Number}} resourceId 资源位id
 * @param {Object} options 相关操作选项
 * @param {Boolean} options.isProd 是否固定获取线上环境资源位，默认true
 * @param {number} options.isCached 是否缓存资源位请求结果，默认true
 * @return {Promise}
 * @return {Array} res[0].detail 如果没有，返回undefined或者null
 */

function getList(resourceId) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return multiGet([resourceId], options).then(function (res) {
    return fn.getObjDeepValue(res, '0.detail');
  });
}
/**
 * 获取高分佣相关资源位 id 59
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */

var highCommissionResource = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var isProd,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            isProd = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;
            return _context.abrupt("return", multiGet([59], isProd));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function highCommissionResource() {
    return _ref.apply(this, arguments);
  };
}();
/**
 * 获取QQ图片社相关资源位 id 61
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */

var qqtpsResource = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var isProd,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            isProd = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : true;
            return _context2.abrupt("return", multiGet([61], isProd));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function qqtpsResource() {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * 获取鉴宝首页资源位 id 82
 * @param {Boolean} isProd 是否固定获取线上环境资源位，默认true
 * @return {Promise}
 * @return {Array} res 如果没有，返回undefined或者null
 */

var appraiserResource = function appraiserResource() {
  var isProd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return multiGet([82], isProd);
};
/**
 * 获取全局相关配置 接口路径-/api/activity/client/get
 * @return {Promise}
 */

var globalApiConfig = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!cache.activeGoodsType) {
              cache.activeGoodsType = axios.post('/activity/client/get', {}, {
                withoutCancelToken: true,
                skipLogin: true
              })["catch"](function (err) {
                delete cache.activeGoodsType;
                return Promise.reject(err);
              });
            }

            return _context3.abrupt("return", cache.activeGoodsType);

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function globalApiConfig() {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * 获取全局相关配置 接口路径-/api/activity/client/get
 * @return {Promise}
 */

var activeGoodsType = globalApiConfig;
/**
 * 获取底部tab配置 接口路径-/api/resource/page/resource/bottom/xcx
 * @return {Promise}
 */

var bottomResource = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!cache.bottomResource) {
              cache.bottomResource = axios.post('/resource/page/resource/bottom/xcx', {}, {
                withoutCancelToken: true,
                skipLogin: true
              })["catch"](function (err) {
                delete cache.bottomResource;
                return Promise.reject(err);
              });
            }

            return _context4.abrupt("return", cache.bottomResource);

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function bottomResource() {
    return _ref4.apply(this, arguments);
  };
}();
var clearCache = function clearCache() {
  cache = {};
};
var index = {
  get: get,
  getList: getList,
  multiGet: multiGet,
  clearCache: clearCache
};

export default index;
export { activeGoodsType, appraiserResource, bottomResource, clearCache, get, getList, globalApiConfig, highCommissionResource, multiGet, qqtpsResource };
