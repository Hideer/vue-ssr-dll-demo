import 'core-js/modules/es.array.find';
import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.array.iterator';
import 'core-js/modules/es.function.bind';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.string.iterator';
import 'core-js/modules/es.string.split';
import 'core-js/modules/web.dom-collections.for-each';
import 'core-js/modules/web.dom-collections.iterator';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import 'regenerator-runtime/runtime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import { fn, ua } from '@wanwu/base-fn';
import request from '@wanwu/base-request';
import RC from '@wanwu/resource-center';
import inject from '@wanwu/inject-script';

var jweixinUrl = 'https://cdn.wanwudezhi.com/static/web-static/text/775529c69d2d5632895cc05e924780bb/jweixin-1.6.0.js';
var WxSdk = {
  wxAppId: 'wxb2de1255783f7c70',
  jsApiList: ['downloadImage', 'chooseWXPay', 'openAddress', 'updateAppMessageShareData', 'updateTimelineShareData', 'onMenuShareAppMessage', 'onMenuShareTimeline', 'hideAllNonBaseMenuItem', 'showAllNonBaseMenuItem', 'hideMenuItems', 'showMenuItems', 'previewImage', 'getNetworkType', 'closeWindow', 'scanQRCode', 'openLocation', 'chooseImage', 'wx-open-launch-weapp', 'startRecord', 'stopRecord', 'translateVoice'],
  openTagList: ['wx-open-launch-app', 'wx-open-launch-weapp'],
  _isWxReady: null,
  _isMiniProgram: false,
  configApi: 'https://doc.wanwudezhi.com/api/v1/wx/event/ticketNew',
  initializeConfig: function initializeConfig() {
    var _this = this;

    this.wxConfigBatch = fn.debounce(this.wxConfig.bind(this), 500, false); // iOS中只有验证失败的时候，需要重新验证

    if (ua.isIOS() && this._isWxReady !== null) {
      this._isWxReady.then(function () {
        window.wx.error(function () {
          _this.wxConfigBatch();
        });
      });

      return this._isWxReady;
    } // Android每次都进行重新验证


    if (ua.isWechat()) {
      this._isWxReady = this.wxConfig();
    } // 注入所有的微信Api方法


    this.jsApiList.forEach(function (key) {
      if (ua.isWechat()) {
        WxSdk[key] = function (options) {
          _this.wxReady().then(function () {
            window.wx[key] && window.wx[key](options);
          });
        };
      } else {
        WxSdk[key] = function (options) {
          options.fail && options.fail({
            errMsg: '请在微信中打开'
          });
        };
      }
    });
    return this._isWxReady;
  },
  getWxAppMap: function () {
    var _getWxAppMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var appIdMapList, domain;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return RC.getList(157);

            case 3:
              appIdMapList = _context.sent;
              domain = location.hostname;
              return _context.abrupt("return", appIdMapList.find(function (appIdMap) {
                return appIdMap.domain === domain;
              }) || {});

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", {});

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    function getWxAppMap() {
      return _getWxAppMap.apply(this, arguments);
    }

    return getWxAppMap;
  }(),
  getWxAppId: function () {
    var _getWxAppId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var appIdMap;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getWxAppMap();

            case 2:
              appIdMap = _context2.sent;
              return _context2.abrupt("return", appIdMap.appId || this.wxAppId);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getWxAppId() {
      return _getWxAppId.apply(this, arguments);
    }

    return getWxAppId;
  }(),
  getWxAppType: function () {
    var _getWxAppType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var appIdMap;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getWxAppMap();

            case 2:
              appIdMap = _context3.sent;
              return _context3.abrupt("return", appIdMap.appType || 4);

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getWxAppType() {
      return _getWxAppType.apply(this, arguments);
    }

    return getWxAppType;
  }(),
  injectWeiXinSDK: function injectWeiXinSDK() {
    if (!window.wx) {
      return inject(jweixinUrl);
    }
  },
  getWxConfigParams: function () {
    var _getWxConfigParams = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var url, wxAppId;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              url = window.location.href.split('#')[0];
              _context4.next = 3;
              return this.getWxAppId();

            case 3:
              wxAppId = _context4.sent;
              _context4.next = 6;
              return request.post(this.configApi, {
                url: url,
                app: wxAppId
              }, {
                withoutToken: true
              });

            case 6:
              return _context4.abrupt("return", _context4.sent);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getWxConfigParams() {
      return _getWxConfigParams.apply(this, arguments);
    }

    return getWxConfigParams;
  }(),
  wxConfig: function () {
    var _wxConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var _yield$Promise$all, _yield$Promise$all2, wxAppId, wxConfigParams, nonceStr, signature, timestamp;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return Promise.all([this.getWxAppId(), this.getWxConfigParams(), this.injectWeiXinSDK()]);

            case 2:
              _yield$Promise$all = _context5.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
              wxAppId = _yield$Promise$all2[0];
              wxConfigParams = _yield$Promise$all2[1];
              nonceStr = wxConfigParams.nonceStr, signature = wxConfigParams.signature, timestamp = wxConfigParams.timestamp;
              window.wx.config({
                debug: false,
                // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
                appId: wxAppId,
                // 必填，公众号的唯一标识
                timestamp: timestamp,
                // 必填，生成签名的时间戳
                nonceStr: nonceStr,
                // 必填，生成签名的随机串
                signature: signature,
                // 必填，签名
                jsApiList: this.jsApiList,
                // 必填，需要使用的JS接口列表
                openTagList: this.openTagList
              });

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function wxConfig() {
      return _wxConfig.apply(this, arguments);
    }

    return wxConfig;
  }(),
  wxReady: function () {
    var _wxReady = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var _this2 = this;

      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", new Promise(function (resolve, reject) {
                if (ua.isWechat()) {
                  _this2._isWxReady.then(function () {
                    window.wx.ready(function () {
                      resolve();
                    });
                    window.wx.error(function () {
                      if (ua.isIOS()) {
                        _this2.wxConfigBatch();
                      }
                    });
                  });
                } else {
                  reject(new Error('请在微信中打开'));
                }
              }));

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    function wxReady() {
      return _wxReady.apply(this, arguments);
    }

    return wxReady;
  }(),
  isMiniProgram: function isMiniProgram() {
    var _this3 = this;

    return new Promise(function (resolve, reject) {
      _this3.wxReady().then(function () {
        if (window.wx.miniProgram && window.wx.miniProgram.getEnv) {
          window.wx.miniProgram.getEnv(function (res) {
            _this3._isMiniProgram = res.miniprogram;
            resolve(res.miniprogram);
          });
        } else {
          _this3._isMiniProgram = false;
          resolve(false);
        }
      })["catch"](function () {
        _this3._isMiniProgram = false;
        resolve(false);
      });
    });
  },
  wxMiniProgramNavigateTo: function wxMiniProgramNavigateTo(url) {
    var _this4 = this;

    return new Promise(function (resolve, reject) {
      _this4.wxReady().then(function () {
        window.wx.miniProgram.navigateTo({
          url: url,
          success: function success(res) {
            resolve(res);
          },
          fail: function fail(res) {
            reject(res);
          }
        });
      });
    });
  },
  wxMiniProgramRedirectTo: function wxMiniProgramRedirectTo(url) {
    var _this5 = this;

    return new Promise(function (resolve, reject) {
      _this5.wxReady().then(function () {
        window.wx.miniProgram.redirectTo({
          url: url,
          success: function success(res) {
            resolve(res);
          },
          fail: function fail(res) {
            reject(res);
          }
        });
      });
    });
  },
  setWxAppId: function setWxAppId(wxAppId) {
    this.wxAppId = wxAppId;
  },
  setConfigApi: function setConfigApi(configApi) {
    this.configApi = configApi;
  }
}; // 初始化交给使用的人

export default WxSdk;
