/**
 * 分享弹窗
 * @module @wanwu/base-vue-share-dialog
 */
import comp, {
    getShortChain,
} from './index.vue';
import Vue from 'vue';
import {
    drawImage,
} from '@wanwu/canvas2image';
import hdp from '@wanwu/hdp';
import {
    vmUnbindEvents, vmBindEvents,
} from '@wanwu/event-utils';

import {
    fn,
    ua,
} from '@wanwu/base-fn';
const ShareDialogConstructor = Vue.extend(comp);
let instance;
let cacheEvents;
const defaultProps = getdefault(comp);
defaultProps.showTopShareImg = true;
// delete defaultProps.initCanvasConfig;
/**
 * @class ShareDialog
 * js调用分享弹窗类
 */
class ShareDialog {
    /**
     * js调用分享弹窗 shareDialog
     * @param {Object} options options可以直接是shareDialog的props，也可以是{props,events}的结构
     * @param {Object} options.props shareDialog组件的props
     * @param {Object} options.events shareDialog组件的events
     */
    showShare(options) {
        if (!instance) {
            instance = new ShareDialogConstructor().$mount();
            document.body.appendChild(instance.$el);
            instance.$on('input', (val) => {
                if (instance) {
                    instance.value = val;
                }
            });
            instance.$on('closed', () => {
                if (instance) {
                    setTimeout(() => {
                        vmUnbindEvents(instance, cacheEvents);
                        cacheEvents = null;
                    }, 0);
                }
            });
        }
        Object.assign(instance, defaultProps);
        if (options) {
        // 兼容shareBtn数据，xxx版本前为Object，xxx版本后传对应key
            if (options.props) {
                const {
                    showBtn = {},
                } = options.props;
                if (Array.isArray(showBtn)) {
                    const showBtnObj = {};
                    Object.keys(instance.showBtn).map((key, index) => {
                        if (showBtn[index] !== undefined) {
                            showBtnObj[key] = showBtn[index];
                        } else {
                            showBtnObj[key] = instance.showBtn[key];
                        }
                    });
                    showBtnObj['saveImg'] = ua.isApp();
                    options.props.showBtn = showBtnObj;
                }
                Object.assign(instance, options.props);
            } else {
                Object.assign(instance, options);
            }
            // 订阅事件
            if (options.events) {
                cacheEvents = options.events;
                vmBindEvents(instance, cacheEvents);
            }
        }
        instance.value = true;
    }

    /**
     * 关闭分享弹窗
     */
    close() {
        if (instance) { instance.value = false; }
    }

    /**
     * 删除分享弹窗组件实例和dom节点
     */
    remove() {
        if (instance) {
            const parent = instance.$el.parentNode;
            if (parent) {
                parent.removeChild(instance.$el);
            }
            instance.$destroy();
        }
        instance = null;
    }

    /**
     * 绘制分享海报
     * @param {Object} config 画图配置
     * @param {Object} config.canvasConfig canvas2image配置 文档查询：http://npm.wanwudezhi.com/package/@wanwu/canvas2image
     * @param {number} config.width canvas画布宽度
     * @param {number} config.height canvas画布高度
     * @returns {Promise<string>}
     */
    drawImg(config) {
        return drawImage(config);
    }

    /**
     * 保存图片
     * @param {string} image 图片地址或base64
     * @returns {Promise}
     */
    downloadImageByHdp(image) {
        return hdp.exec('PluginShare', 'photoSave', {
            imageData: image,
        });
    }

    /**
     * js调用分享弹窗 shareDialog(旧方法不推荐使用)
     * @param {Function} initCanvasConfig canvas图片配置函数，返回Promise对象
     * @param {Object|Number} showBtn 底部操作按钮
     * @param {boolean} showTopShareImg 顶部分享图片
     * @param {Object} shareObj 分现到微信的配置参数
     * @param {Object} events 订阅事件
     * @param {number} imageWitdh 顶部分享图片宽度
     * @param {Object} extraParams 额外的处理参数，通过该组件的$emit暴露出去（这里是为了应对多个弹窗实例缓存的数据不实时问题）
     * @param {boolean} showTip 是否显示引导提示
     * @param {string} tipText 引导提示文案
     */
    show(initCanvasConfig, showBtn, showTopShareImg, shareObj, events, imageWitdh, extraParams = {}, showTip, tipText, tipImg, dialogProps = {}) {
        const userOption = {
            initCanvasConfig,
            showBtn,
            showTopShareImg,
            shareObj,
            imageWitdh,
            extraParams,
            tipText,
            tipImg,
            showTip,
            ...dialogProps,
        };
        Object.keys(userOption).forEach(key => {
            const item = userOption[key];
            if (!item && item !== false) {
                delete userOption[key];
            }
        });
        this.showShare({
            props: userOption,
            events,
        });
    }
}

export const shareDialog = new ShareDialog();

comp.install = (Vue) => {
    Vue.component(comp.name, comp);
    Vue.prototype.$share = shareDialog;
    Vue.prototype.$shareDialog = shareDialog;
    Vue.share = shareDialog;
    Vue.shareDialog = shareDialog;
};
export {
    defaultProps as shareDialogDefaultProps,
    getShortChain,
};
export default comp;
function getdefault(compObj) {
    const Obj = {};
    const props = fn.getObjDeepValue(compObj, 'props');
    props && Object.keys(props).forEach(prop => {
        const prorDefault = fn.getObjDeepValue(props, prop + '.default');
        if (fn.typeYalidator.isFunction(prorDefault)) {
            Obj[prop] = prorDefault();
        } else {
            Obj[prop] = prorDefault;
        }
    });
    return Obj;
}
