// rtp.js 生成打点需要的rtp标识

import config from "../config";
import collect from "../util/collect";
import crossUtil from "../util/cross";
import hash from "../util/hash.js";
import helper from "../util/helper";
import { ua, fn } from "@wanwu/base-fn";
import hdp from "@wanwu/hdp";
import pageStayTime from '../pageStayTime';
// 生成rtp_cnt规范的a.b.c.d.e
// 获取业务字段a, 需要配置（如：玩物商城bw0，玩物原料:bw1，玩物后台等）

function getCntA() {
  return config.rtp_cnt_a;
}

// 获取站点字段b,可取预定义（如：h5，小程序，ios，安卓）
function getCntB() {
  const custom = config.rtp_cnt_b;
  if (custom) {
    return custom;
  }
  // 暴露站点设置
  if (ua.isIOSApp()) {
    return "mw0";
  } else if (ua.isAndroidApp()) {
    return "mw1";
  } else if (ua.isWechatMiniProgram()) {
    return "w1";
  } else {
    return "w0";
  }
}

const rtp = {
  // 获取新的基础数据
  refreshNewRtpInfoData(cur = location.href, ref = document.referrer) {
    if (!ref) {
      ref = document.referrer;
    }
    helper.mergeParams();
    let obj: any = {
      env: collect.getEnv(),
      timestamp: collect.getTime(),

      uuid: localStorage.getItem("uuid") || "",
      userId: collect.getUserInfo().userId || "",

      // os
      basic: {
        browser: navigator ? navigator.userAgent : "",
        os: ua.getAppPlatform(),
        rtpApplication: this.getRtpApplication(),
      },
      url: cur,
      refer: ref,
    };
    if (location && location.search) {
      let params = location.search.split("?");
      let pageParam = {};
      if (params && params.length > 0) {
        pageParam = fn.parse(params[1]);
        // 删除token
        if (pageParam.hasOwnProperty("token")) {
          delete pageParam["token"];
          // 将url的token删除掉
          obj.url = fn.removeQueryString(obj.url, "token");
        }
        // 删除rtpRefer
        if (pageParam.hasOwnProperty("rtpRefer")) {
          delete pageParam["rtpRefer"];
        }
        if (!obj.ext) obj.ext = {};
        obj.ext.pageParam = pageParam;
      }
    }
    return obj;
  },
  //跳转都可以上报
  jumpPageSetPageStayTime() {
    // 设置结束时间
    this.setEndTime();
    // 在app进行上报
    pageStayTime(true);
  },
  // 封装公共方法重置首页对象、开始时间、结束时间
  setPageStayTime() {
    // 设置结束时间
    this.setEndTime();
    // 在app进行上报
    if (ua && ua.isApp()) {
      // 进行埋点上报
      pageStayTime(true);
    }
  },
  // 上报H5页面
  setPageStayTimeH5() {
    // 在H5中进行上报
    if (ua && !ua.isApp()) {
      pageStayTime(true);
    }
  },
  // 设置上报的开始时间
  setPreStartTime(__logPreStartTime) {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    obj["loggerObj"]["__logPreStartTime"] = __logPreStartTime;
    crossUtil.setWindowName(obj);
    localStorage.setItem("__logPreStartTime", __logPreStartTime);
  },
  // 设置开始时间
  setStartTime() {
    let startTime: any = new Date().getTime();
    localStorage.setItem("__logStartTime", startTime);
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    obj["loggerObj"]["__logStartTime"] = startTime;
    crossUtil.setWindowName(obj);
  },
  // 设置结束时间
  setEndTime() {
    // 将startTime存储起来
    let startTime = this.getStartTime();
    this.setPreStartTime(startTime);
    // 设置最后时间
    let endTime: any = new Date().getTime();
    localStorage.setItem("__logEndTime", endTime);
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    obj["loggerObj"]["__logEndTime"] = endTime;
    crossUtil.setWindowName(obj);
  },
  // 将loggerInfo存储到缓存里面
  setLoggerInfo(loggerInfo) {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    obj["loggerObj"]["__loggerInfo"] = loggerInfo;
    crossUtil.setWindowName(obj);
    localStorage.setItem("__loggerInfo", JSON.stringify(loggerInfo));
  },
  // 获取上报上一个页面的开始时间
  getStartTime() {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    let preStartTime: any = obj["loggerObj"]["__logStartTime"] ? obj["loggerObj"]["__logStartTime"] : localStorage.getItem("__logStartTime") ? localStorage.getItem("__logStartTime") : 0;
    crossUtil.setWindowName(obj);
    return preStartTime;
  },
  // 获取上报上一个页面的开始时间
  getPreStartTime() {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    let preStartTime: any = obj["loggerObj"]["__logPreStartTime"] ? obj["loggerObj"]["__logPreStartTime"] : localStorage.getItem("__logPreStartTime") ? localStorage.getItem("__logPreStartTime") : 0;
    crossUtil.setWindowName(obj);
    return preStartTime;
  },
  // 获取本地缓存的loggerInfo
  getLoggerInfo() {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    let loggerInfo: any = obj["loggerObj"]["__loggerInfo"] ? obj["loggerObj"]["__loggerInfo"] : localStorage.getItem("__loggerInfo") ? JSON.parse(localStorage.getItem("__loggerInfo")) : {};
    crossUtil.setWindowName(obj);
    return loggerInfo;
  },
  // 获取上报上一个页面的开始时间
  getEndTime() {
    let obj = JSON.parse(crossUtil.getWindowName());
    if (!obj.hasOwnProperty("loggerObj")) obj["loggerObj"] = {};
    let endTime: any = obj["loggerObj"]["__logEndTime"] ? obj["loggerObj"]["__logEndTime"] : localStorage.getItem("__logEndTime") ? localStorage.getItem("__logEndTime") : 0;
    crossUtil.setWindowName(obj);
    return endTime;
  },
  // 设置app端需要的rtpRefer存储到桥接里
  setAppRtpReferData(key) {
    // 在app里面进行存储
    if (ua.isApp()) {
      hdp
        .execRequest("PluginStatistics", "setRtpRefer", { rtpRefer: key })
        .then((res) => { });
    }
  },
  // 设置rtpRefer
  resetRtpRefer(value) {
    sessionStorage.setItem("rtpRefer", value);
  },
  // 获取rtpRefer
  getRtpRefer() {
    return sessionStorage.getItem("rtpRefer");
  },
  // 获取rtpApplication
  getRtpApplication() {
    try {
      // 获取顺序 sessionStorage => url
      let rtpApplication;
      if (sessionStorage.getItem('rtpApplication')) {
        rtpApplication = sessionStorage.getItem('rtpApplication');
        return rtpApplication;
      }
      // url带参数是因为小程序池子不互通，顺便解决不同域名的数据共享问题
      if (fn.getQueryString('rtpApplication')) {
        rtpApplication = fn.getQueryString('rtpApplication');
        // 补充到sessionStorage
        sessionStorage.setItem('rtpApplication', fn.getQueryString('rtpApplication'));
        return rtpApplication;
      }
      // 生成rtpApplication
      let application;
      if (ua.isAndroidApp()) {
        application = 'Android'
      } else if (ua.isIOSApp()) {
        application = 'IOS'
      } else if (ua.isWechatMiniProgram()) {
        application = 'XCX'
      } else {
        application = 'H5'
      }
      rtpApplication = `${application}.${hash.rand(8)}`;
      // 初次赋值需要加入url 和 sessionStorage中
      sessionStorage.setItem("rtpApplication", rtpApplication);
      history.replaceState(null, null, fn.setQueryString(document.URL, 'rtpApplication', rtpApplication));
      return rtpApplication;
    } catch (err) {
      console.log(err)
    }
  },
  // 获取cnt与ref
  getHashCntOrRefer(key: any) {
    let res = [getCntA(), getCntB()];
    // 模拟当前数据
    let jsonData: any = (window as any).loggerData
      ? (window as any).loggerData
      : {};
    if (key) {
      let keys = key.split("-");
      if (keys && keys.length > 0) {
        res.push(
          keys && keys[0] && jsonData[keys[0]] ? jsonData[keys[0]] : "0"
        );
        res.push(
          keys && keys[1] && jsonData[keys[1]] ? jsonData[keys[1]] : "0"
        );
        res.push(hash.getHash(3));
      }
    } else {
      // 当key不存在是添加a.b.0.0.e
      res.push("0");
      res.push("0");
      res.push(hash.getHash(3));
    }
    return res.join(".") || "";
  },
  hashGet(key) {
    let jsonData: any = (window as any).loggerData;
    if (jsonData && jsonData.hasOwnProperty(key)) {
      return { hasKey: true, key: key };
    } else {
      return { hasKey: false, key: key };
    }
  },
  // 将传入href拼接生成新的href
  makeUrl(href, rtpCnt) {
    href = href.replace(/(#.+)$/, "");
    href = fn.setQueryString(href, "rtpRefer", rtpCnt);
    return href;
  },
  // 针对传入的对象进行兼容性处理
  makeObject(obj, rtpCnt) {
    obj.query = Object.assign({}, obj.query, { rtpRefer: rtpCnt });
    return obj;
  },
  // 针对传入的对象进行兼容性处理
  makeObjectTraceId(obj, TraceId) {
    obj.query = Object.assign({}, obj.query, { listClickTrace: TraceId });
    return obj;
  },
  // 跨域是否保存TraceId参数标志
  makeObjectTraceIdSaveFlag(obj, flag) {
    obj.query = Object.assign({}, obj.query, { traceIdSaveFlag: flag });
    return obj;
  },
};

export default rtp;
