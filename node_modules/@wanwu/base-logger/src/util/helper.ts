// helper.js 工具类
import uuid from './uuid/uuid';
import config from '../config';

const helper = {
    // 用户唯一标识
    createUuid(): string {
        // @ts-ignore
        return uuid();
    },

    // 保存uuid进session
    setUuid() {
        const uuidValue = localStorage.getItem('uuid');
        if (uuidValue) { return; }
        localStorage.setItem('uuid', this.createUuid());
    },
    extend(target: any, source: any, arg: any): object {
        const args = arguments;

        for (let i = 1; i < args.length; i++) {
            const sur = args[i];

            for (const p in sur) {
                if (sur.hasOwnProperty(p)) {
                    target[p] = sur[p];
                }
            }
        }

        return target;
    },
    registerEvent(elem, event, func) {
        // @ts-ignore
        if (window.attachEvent) {
            elem.attachEvent('on' + event, func);
        } else {
            elem.addEventListener(event, func, false);
        }
    },

    // 判断是否需要忽略的打点页面
    matchIgnorePage(url: string) {
        helper.mergeParams();
        let match = false;
        const { ignorePageRegExp } = config;
        ignorePageRegExp.forEach((regExp) => {
            if (regExp.test(url)) {
                match = true;
            }
        });
        return match;
    },
    // 判断是否有筛选器的页面
    matchHasFiltersPage(url: string) {
        helper.mergeParams();
        let tabs = null;
        const {filters} = config;
        if (filters.length > 0) {
            filters.forEach((filter) => {
                if (filter.path.indexOf(url) > -1) {
                    tabs = filter.tabs;
                }
            });
        }
        return tabs;
    },
    // 合并window上绑定的配置
    mergeParams() {
        // @ts-ignore
        if (window.RTP_PARAMS) {
            // @ts-ignore
            this.extend(config, window.RTP_PARAMS);
        }
    },
    // 检查当前元素是否在可视区域
    checkVisible(elm) {
        if (elm) {
            const rect = elm.getBoundingClientRect();
            // 获取当前浏览器的视口高度，不包括工具栏和滚动条
            const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
            // bottom top是相对于视口的左上角位置
            // bottom大于0或者top-视口高度小于0可见
            return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
        }
    }
};

export default helper;
