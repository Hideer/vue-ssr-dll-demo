let readyList = [];
let readyFired = false;
let readyEventHandlersInstalled = false;

function ready() {
    if (!readyFired) {
    // this must be set to true before we start calling callbacks
        readyFired = true;
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < readyList.length; i++) {
            readyList[i].fn.call(window, readyList[i].ctx);
        }
        // allow any closures held by these functions to free
        readyList = [];
    }
}

function readyStateChange() {
    if (document.readyState === 'complete') {
        ready();
    }
}
function readyFn(callback, context) {
    // if ready has already fired, then just schedule the callback
    // to fire asynchronously, but right away
    if (readyFired) {
        setTimeout(function () {
            callback(context);
        }, 1);
        return;
    } else {
    // add the function and context to the list
        readyList.push({
            fn: callback,
            ctx: context,
        });
    }
    // if document already ready to go, schedule the ready function to run
    // IE only safe when readyState is "complete", others safe when readyState is "interactive"
    // @ts-ignore
    if (document.readyState === 'complete' || (!document.attachEvent && document.readyState === 'interactive')) {
        setTimeout(ready, 1);
    } else if (!readyEventHandlersInstalled) {
    // otherwise if we don't have event handlers installed, install them
        if (document.addEventListener) {
            // first choice is DOMContentLoaded event
            document.addEventListener('DOMContentLoaded', ready, false);
            // backup is window load event
            window.addEventListener('load', ready, false);
        } else {
            // must be IE
            // @ts-ignore
            document.attachEvent('onreadystatechange', readyStateChange);
            // @ts-ignore
            window.attachEvent('onload', ready);
        }
        readyEventHandlersInstalled = true;
    }
}

export default readyFn;
