// send.js 所有日志发送逻辑

import config from '../config';
import { md5 } from './md5';
import request from '@wanwu/http-request';
import { WANWUConfig } from '@wanwu/base-fn';
const wanwuConfig = new WANWUConfig();
const send = {
    localStorageKey: '__log__event__tasks__',
    NewlocalStorageKey: '__new__log__event__tasks__',
    // 处理打点的验签格式
    createSign(task) {
        const { uuid, appVersion, timestamp, platform } = task;
        const sign = md5([uuid, appVersion, timestamp, platform].join('-'));
        task.sign = sign;
        task['__ua'] = navigator ? navigator.userAgent : '';
        return task;
    },
    // 格式化打点数据使用image的方式打点
    formatImageUrl(url, logs) {
        logs = JSON.stringify(logs);
        const data = encodeURIComponent(logs);
        if (url.indexOf('?') > -1) {
            url = url + '&' + 'data=' + data;
        } else {
            url = url + '?' + 'data=' + data;
        }
        return url;
    },
    // 废弃
    sendLogByImage(url, logs) {
        url = this.formatImageUrl(url, logs);
        const imgObject = new Image();
        imgObject.src = url;
    },
    // CORS
    sendLogByCORS(url: string, logs: [any], newLogFormat: boolean) {
        try {
            const param: any = {
                data: logs,
            };
            if (newLogFormat) {
                param.logsTore = wanwuConfig.getConfig('base-logger', 'logsTore') || 'wwdz_action_log';
                const projectName = wanwuConfig.getConfig('base-logger', 'projectName') || '';
                if (projectName) { param.projectName = projectName; }
            }
            return request.post(url, param).catch((err) => {
                // 发送失败，重新保存logInfo
                if (newLogFormat) {
                    logs.map((item) => {
                        this.saveNewLog(item);
                    })
                } else {
                    // 去掉老得打点
                    //this.saveLog(logs);
                }
                return err;
            });
        } catch (err) {
            console.log(err)
        }
    },
    /* -------------------------- 以下为新老打点的log方法数据 -------------------------- ***/
    // 前端发送打点数据接口
    sendLog(logs: any[]) {
        return this.sendLogByCORS(config.CORS__LogUrl, logs);
    },
    // 新的前端发送打点数据接口
    sendNewLog(logs: any[]) {
        const newLogFormat = true;
        return this.sendLogByCORS(config.NEW__CORS__LogUrl, logs, newLogFormat);
        // this.sendLogByImage(config.NewLogUrl, logs);
    },

    saveLog(log) {
        let logs = this.getLog();
        if (Array.isArray(log)) {
            logs = log;
        } else {
            logs.push(log);
        }
        localStorage.setItem(this.localStorageKey, JSON.stringify(logs));
    },
    saveNewLog(log) {
        let logs = this.getNewLog();
        if (Array.isArray(log)) {
            logs = log;
        } else {
            logs.push(log);
        }
        localStorage.setItem(this.NewlocalStorageKey, JSON.stringify(logs));
    },

    getLog() {
        // tslint:disable-next-line:variable-name
        const log__tasks: string = localStorage.getItem(this.localStorageKey) || '[]';
        return JSON.parse(log__tasks);
    },
    getNewLog() {
        // tslint:disable-next-line:variable-name
        const log__tasks: string = localStorage.getItem(this.NewlocalStorageKey) || '[]';
        return JSON.parse(log__tasks);
    },

    clearLog() {
        localStorage.removeItem(this.localStorageKey);
    },
    clearNewLog() {
        localStorage.removeItem(this.NewlocalStorageKey);
    },

    // 在app里的事件打点
    logAppEvent(json) {
        json = this.createSign(json);
        // @ts-ignore
        if (window.hdp && window.hdp.exec) {
            try {
                // @ts-ignore
                window.hdp.exec('PluginStatistics', 'pbReport', json);
            } catch (error) {
                // tslint:disable-next-line:no-console
                console.log(error);
            }
        }
    },
    // 新版在app里的事件打点
    logNewAppEvent(json) {
        json = this.createSign(json);
        // @ts-ignore
        if (window.hdp && window.hdp.exec) {
            try {
                // @ts-ignore
                window.hdp.exec('PluginStatistics', 'trackerReport', json);
            } catch (error) {
                // tslint:disable-next-line:no-console
                console.log(error);
            }
        }
    },
    // 在普通页面打点
    logWebEvent(log) {
        log = this.createSign(log);
        const existLogs = this.getLog();
        if (existLogs.length === 200) {
            this.sendLog([log]);
            return;
        }
        this.saveLog(log);
    },
    // 在普通页面打点
    logWebNewEvent(log) {
        log = this.createSign(log);
        const existLogs = this.getNewLog();
        if (existLogs.length === 200) {
            this.sendNewLog([log]);
            return;
        }
        this.saveNewLog(log);
    },
    // 批量发送：间隔xx秒，发送xx条。可配置
    sendBatchLog() {
        const logs = this.getLog();
        const arrLen = logs.length;
        const maxLen = config.one_send_max_length;
        if (arrLen > 0) {
            if (arrLen <= maxLen) {
                this.sendLog(logs);
                this.clearLog();
            } else {
                for (let i = 0; i * maxLen < arrLen; i++) {
                    this.sendLog(logs.splice(0, maxLen));
                }
                this.saveLog(logs);
            }
        }
    },
    sendNewBatchLog() {
        const logs = this.getNewLog();
        const arrLen = logs.length;
        const maxLen = config.one_send_max_length;
        if (arrLen > 0) {
            if (arrLen <= maxLen) {
                this.sendNewLog(logs);
                this.clearNewLog();
            } else {
                for (let i = 0; i * maxLen < arrLen; i++) {
                    this.sendNewLog(logs.splice(0, maxLen));
                }
                this.saveNewLog(logs);
            }
        }
    },
    // 打点定时器
    startLogTimer() {
        setInterval(() => {
            //this.sendBatchLog();
            this.sendNewBatchLog();
        }, config.send_interval);
    },
    // 立即上报所有打点
    async logImmediately() {
        const logs = send.getLog();
        const newLogs = send.getNewLog();
        const isErr = await send.sendLog(logs);
        const isNewErr = await send.sendNewLog(newLogs);
        if (isErr || isNewErr) {
            return Promise.reject(isErr || isNewErr);
        } else {
            return Promise.resolve('success');
        }
    },
    // 检查list类埋点数据格式
    checkListLog(eventId: any, data: any) {
        if (!data) {
            return;
        }
        if (eventId === 'listShow') {
            if (!data.domain) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                // 提出pageParam
                const pageParam = data.pageParam;
                delete data.pageParam;
                const dataObj = {
                    domain: [{...data}]
                }
                if (pageParam) {
                    dataObj['pageParam'] = pageParam
                }
                return dataObj
            } else if (!Array.isArray(data.domain)) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                data.domain = [{...data.domain}]
                return data
            } else {
                return data
            }
        }
        else if (eventId === 'listClick') {
            if (!data.domain) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                // 提出pageParam
                const pageParam = data.pageParam;
                delete data.pageParam;
                const dataObj = {
                    domain: {...data}
                }
                if (pageParam) {
                    dataObj['pageParam'] = pageParam
                }
                return dataObj
            } else if (Object.prototype.toString.call(data.domain) !== '[object Object]' && Array.isArray(data.domain)) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                data.domain = {...data.domain[0]}
                return data
            } else {
                return data
            }
        } else {
            return data
        }
    }
};
export default send;
