"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReferAndRtpCnt = void 0;
// 打点相关逻辑
// 暴露logger.logP pageview 打点
var base_fn_1 = require("@wanwu/base-fn");
var rtp_1 = require("./rtp/rtp");
var send_1 = require("./util/send");
var trace_1 = require("./util/trace");
var referAndRtpCnt = [];
// newRtpCnt 通过页面路由meta设置的key动态传入进来
function logP(cur, ref, newRtpCnt, popstate) {
    // 在H5中进入下一个logP来进行埋点上报 数据不会丢失
    rtp_1.default.setPageStayTimeH5();
    // 统计用户停留时间 重置开始时间
    rtp_1.default.setStartTime();
    // 缓存refer与url, 在logE打点的时候去取
    var referAndRtpCntObj = {
        url: cur ? cur : location.href,
        refer: ref || base_fn_1.fn.getQueryString("refer", cur) || '',
    };
    referAndRtpCnt.push(referAndRtpCntObj);
    var newLoggerInfo = rtp_1.default.refreshNewRtpInfoData(referAndRtpCntObj.url, referAndRtpCntObj.refer);
    newLoggerInfo.event = 'pageShow';
    // traceLink逻辑
    if (!base_fn_1.ua.isApp()) {
        newLoggerInfo.traceLink = trace_1.default.getTraceLink();
    }
    // 获取rtpRefer
    var rtpCnt = '', rtpRefer = '';
    // 从app、小程序跳转传rtpRefer 如果不是前进后退就从url获取，否则就从缓存读取
    if (base_fn_1.fn.getQueryString('rtpRefer') && popstate === false) {
        rtpRefer = base_fn_1.fn.getQueryString('rtpRefer');
        newLoggerInfo.rtpRefer = rtpRefer;
    }
    else {
        if (rtp_1.default.getRtpRefer()) {
            newLoggerInfo.rtpRefer = rtp_1.default.getRtpRefer();
        }
    }
    // 设置rtpCnt
    if (newRtpCnt) {
        // 检查观星录入的key与业务中添加的是否一致
        var hasKeyObj = rtp_1.default.hashGet(newRtpCnt);
        if (hasKeyObj && !hasKeyObj.hasKey) {
            console.warn("\u5F53\u524D pageShow \u4E8B\u4EF6\u60A8\u8F93\u5165rtpCnt\u503C\u4E3A " + hasKeyObj.key + " \u4E0D\u5B58\u5728, \u8BF7\u68C0\u67E5\u89C2\u661F\u5F55\u5165\u7684\u662F\u5426\u4E0E\u60A8\u6DFB\u52A0\u7684\u4E00\u81F4");
        }
        // 将page保存起来
        sessionStorage.setItem("page", newRtpCnt);
        // 获取rtpCnt数据
        rtpCnt = rtp_1.default.getHashCntOrRefer(newRtpCnt);
        // pageShow（rtpCnt）作为下一次的rtpRefer所以将rtpRefer存储起来
        rtp_1.default.resetRtpRefer(rtpCnt);
        // 设置app端返回所需要的rtpRefer
        rtp_1.default.setAppRtpReferData(rtpCnt);
        newLoggerInfo.rtpCnt = rtpCnt;
    }
    // 将newLoggerInfo保存到缓存里面，页面上报时用
    rtp_1.default.setLoggerInfo(newLoggerInfo);
    // 发送打点数据
    // APP内webview不需要曝光的情况
    var trackFlag = base_fn_1.fn.getQueryString('trackFlag', cur);
    if (base_fn_1.ua.isApp()) {
        if (!trackFlag) {
            if ((base_fn_1.ua.getAppName() === 'wwdz_b2b' && base_fn_1.fn.isLargerThanAppVersion("1.1.05")) || base_fn_1.fn.isLargerThanAppVersion('2.7.6')) {
                // 新的埋点上报方法
                send_1.default.logNewAppEvent(newLoggerInfo);
            }
        }
    }
    else {
        // 如果在小程序里面不上报
        send_1.default.sendNewLog([newLoggerInfo]);
    }
}
exports.default = logP;
exports.getReferAndRtpCnt = function () {
    return referAndRtpCnt;
};
