"use strict";
// send.js 所有日志发送逻辑
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../config");
var md5_1 = require("./md5");
var http_request_1 = require("@wanwu/http-request");
var base_fn_1 = require("@wanwu/base-fn");
var wanwuConfig = new base_fn_1.WANWUConfig();
var send = {
    localStorageKey: '__log__event__tasks__',
    NewlocalStorageKey: '__new__log__event__tasks__',
    // 处理打点的验签格式
    createSign: function (task) {
        var uuid = task.uuid, appVersion = task.appVersion, timestamp = task.timestamp, platform = task.platform;
        var sign = md5_1.md5([uuid, appVersion, timestamp, platform].join('-'));
        task.sign = sign;
        task['__ua'] = navigator ? navigator.userAgent : '';
        return task;
    },
    // 格式化打点数据使用image的方式打点
    formatImageUrl: function (url, logs) {
        logs = JSON.stringify(logs);
        var data = encodeURIComponent(logs);
        if (url.indexOf('?') > -1) {
            url = url + '&' + 'data=' + data;
        }
        else {
            url = url + '?' + 'data=' + data;
        }
        return url;
    },
    // 废弃
    sendLogByImage: function (url, logs) {
        url = this.formatImageUrl(url, logs);
        var imgObject = new Image();
        imgObject.src = url;
    },
    // CORS
    sendLogByCORS: function (url, logs, newLogFormat) {
        var _this = this;
        try {
            var param = {
                data: logs,
            };
            if (newLogFormat) {
                param.logsTore = wanwuConfig.getConfig('base-logger', 'logsTore') || 'wwdz_action_log';
                var projectName = wanwuConfig.getConfig('base-logger', 'projectName') || '';
                if (projectName) {
                    param.projectName = projectName;
                }
            }
            return http_request_1.default.post(url, param).catch(function (err) {
                // 发送失败，重新保存logInfo
                if (newLogFormat) {
                    logs.map(function (item) {
                        _this.saveNewLog(item);
                    });
                }
                else {
                    // 去掉老得打点
                    //this.saveLog(logs);
                }
                return err;
            });
        }
        catch (err) {
            console.log(err);
        }
    },
    /* -------------------------- 以下为新老打点的log方法数据 -------------------------- ***/
    // 前端发送打点数据接口
    sendLog: function (logs) {
        return this.sendLogByCORS(config_1.default.CORS__LogUrl, logs);
    },
    // 新的前端发送打点数据接口
    sendNewLog: function (logs) {
        var newLogFormat = true;
        return this.sendLogByCORS(config_1.default.NEW__CORS__LogUrl, logs, newLogFormat);
        // this.sendLogByImage(config.NewLogUrl, logs);
    },
    saveLog: function (log) {
        var logs = this.getLog();
        if (Array.isArray(log)) {
            logs = log;
        }
        else {
            logs.push(log);
        }
        localStorage.setItem(this.localStorageKey, JSON.stringify(logs));
    },
    saveNewLog: function (log) {
        var logs = this.getNewLog();
        if (Array.isArray(log)) {
            logs = log;
        }
        else {
            logs.push(log);
        }
        localStorage.setItem(this.NewlocalStorageKey, JSON.stringify(logs));
    },
    getLog: function () {
        // tslint:disable-next-line:variable-name
        var log__tasks = localStorage.getItem(this.localStorageKey) || '[]';
        return JSON.parse(log__tasks);
    },
    getNewLog: function () {
        // tslint:disable-next-line:variable-name
        var log__tasks = localStorage.getItem(this.NewlocalStorageKey) || '[]';
        return JSON.parse(log__tasks);
    },
    clearLog: function () {
        localStorage.removeItem(this.localStorageKey);
    },
    clearNewLog: function () {
        localStorage.removeItem(this.NewlocalStorageKey);
    },
    // 在app里的事件打点
    logAppEvent: function (json) {
        json = this.createSign(json);
        // @ts-ignore
        if (window.hdp && window.hdp.exec) {
            try {
                // @ts-ignore
                window.hdp.exec('PluginStatistics', 'pbReport', json);
            }
            catch (error) {
                // tslint:disable-next-line:no-console
                console.log(error);
            }
        }
    },
    // 新版在app里的事件打点
    logNewAppEvent: function (json) {
        json = this.createSign(json);
        // @ts-ignore
        if (window.hdp && window.hdp.exec) {
            try {
                // @ts-ignore
                window.hdp.exec('PluginStatistics', 'trackerReport', json);
            }
            catch (error) {
                // tslint:disable-next-line:no-console
                console.log(error);
            }
        }
    },
    // 在普通页面打点
    logWebEvent: function (log) {
        log = this.createSign(log);
        var existLogs = this.getLog();
        if (existLogs.length === 200) {
            this.sendLog([log]);
            return;
        }
        this.saveLog(log);
    },
    // 在普通页面打点
    logWebNewEvent: function (log) {
        log = this.createSign(log);
        var existLogs = this.getNewLog();
        if (existLogs.length === 200) {
            this.sendNewLog([log]);
            return;
        }
        this.saveNewLog(log);
    },
    // 批量发送：间隔xx秒，发送xx条。可配置
    sendBatchLog: function () {
        var logs = this.getLog();
        var arrLen = logs.length;
        var maxLen = config_1.default.one_send_max_length;
        if (arrLen > 0) {
            if (arrLen <= maxLen) {
                this.sendLog(logs);
                this.clearLog();
            }
            else {
                for (var i = 0; i * maxLen < arrLen; i++) {
                    this.sendLog(logs.splice(0, maxLen));
                }
                this.saveLog(logs);
            }
        }
    },
    sendNewBatchLog: function () {
        var logs = this.getNewLog();
        var arrLen = logs.length;
        var maxLen = config_1.default.one_send_max_length;
        if (arrLen > 0) {
            if (arrLen <= maxLen) {
                this.sendNewLog(logs);
                this.clearNewLog();
            }
            else {
                for (var i = 0; i * maxLen < arrLen; i++) {
                    this.sendNewLog(logs.splice(0, maxLen));
                }
                this.saveNewLog(logs);
            }
        }
    },
    // 打点定时器
    startLogTimer: function () {
        var _this = this;
        setInterval(function () {
            //this.sendBatchLog();
            _this.sendNewBatchLog();
        }, config_1.default.send_interval);
    },
    // 立即上报所有打点
    logImmediately: function () {
        return __awaiter(this, void 0, void 0, function () {
            var logs, newLogs, isErr, isNewErr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logs = send.getLog();
                        newLogs = send.getNewLog();
                        return [4 /*yield*/, send.sendLog(logs)];
                    case 1:
                        isErr = _a.sent();
                        return [4 /*yield*/, send.sendNewLog(newLogs)];
                    case 2:
                        isNewErr = _a.sent();
                        if (isErr || isNewErr) {
                            return [2 /*return*/, Promise.reject(isErr || isNewErr)];
                        }
                        else {
                            return [2 /*return*/, Promise.resolve('success')];
                        }
                        return [2 /*return*/];
                }
            });
        });
    },
    // 检查list类埋点数据格式
    checkListLog: function (eventId, data) {
        if (!data) {
            return;
        }
        if (eventId === 'listShow') {
            if (!data.domain) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                // 提出pageParam
                var pageParam = data.pageParam;
                delete data.pageParam;
                var dataObj = {
                    domain: [__assign({}, data)]
                };
                if (pageParam) {
                    dataObj['pageParam'] = pageParam;
                }
                return dataObj;
            }
            else if (!Array.isArray(data.domain)) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                data.domain = [__assign({}, data.domain)];
                return data;
            }
            else {
                return data;
            }
        }
        else if (eventId === 'listClick') {
            if (!data.domain) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                // 提出pageParam
                var pageParam = data.pageParam;
                delete data.pageParam;
                var dataObj = {
                    domain: __assign({}, data)
                };
                if (pageParam) {
                    dataObj['pageParam'] = pageParam;
                }
                return dataObj;
            }
            else if (Object.prototype.toString.call(data.domain) !== '[object Object]' && Array.isArray(data.domain)) {
                console.warn('listShow埋点数据 domain格式有误！请参考埋点格式文档进行修改', data);
                data.domain = __assign({}, data.domain[0]);
                return data;
            }
            else {
                return data;
            }
        }
        else {
            return data;
        }
    }
};
exports.default = send;
