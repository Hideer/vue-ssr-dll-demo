"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logP_1 = require("../logP");
var helper_1 = require("../util/helper");
var base_fn_1 = require("@wanwu/base-fn");
var send_1 = require("../util/send");
var hdp_1 = require("@wanwu/hdp");
var rtp_1 = require("../rtp/rtp");
// 跳转在index.ts里面createRtpParams方法里面调用
// 前进、后台执行方法
var popstate = false;
window.addEventListener("popstate", function () {
    popstate = true;
    rtp_1.default.setPageStayTime();
    // 如果是前进、后退要把全局变量logger_listClickTrace重新重置一下
    if (!base_fn_1.ua.isApp()) {
        var pageParam = {};
        if (location && location.search) {
            var params = location.search.split("?");
            if (params && params.length > 0) {
                pageParam = base_fn_1.fn.parse(params[1]);
                if (pageParam.hasOwnProperty("listClickTrace") && pageParam["listClickTrace"]) {
                    sessionStorage.setItem('logger_listClickTrace', pageParam["listClickTrace"]);
                }
                else {
                    sessionStorage.setItem('logger_listClickTrace', '');
                }
            }
        }
        else {
            sessionStorage.setItem('logger_listClickTrace', '');
        }
    }
}, false);
// 在app中返回切换桥接触发的方法
document.addEventListener("visibilitychange", function () {
    var visible = document.visibilityState === "visible";
    if (base_fn_1.ua.isApp()) {
        if (visible) {
            // 展示进行pageShow埋点上报
            visibilitychangeFunction();
        }
        else {
            // 在app黑屏H5消失在展示获取最后时间  
            rtp_1.default.setPageStayTime();
        }
    }
});
// 监听微信端关闭
window.addEventListener('pagehide', function () {
    rtp_1.default.setPageStayTime();
});
// 通过url获取首页的rtpCnt
function getRptCnt(pathName) {
    var pathname = pathName || location.pathname;
    var res = [];
    var path = pathname.split("/");
    if (path.length > 0) {
        if (path.length > 0) {
            path = path.slice(1, 4);
        }
        if (path && path.length > 0) {
            path.forEach(function (item, i) {
                if (item && item.indexOf("-") > -1) {
                    item = item.replace(/[-]/g, "");
                }
                res.push(item);
            });
        }
    }
    return res.join(".") || '';
}
function visibilitychangeFunction() {
    var pageShowEvent = function (cur, ref, key, rtpRefer) {
        // 重置缓存的rtpRefer
        rtp_1.default.resetRtpRefer(rtpRefer);
        // 上报pageShow页面
        logP_1.default(cur, '', key, true);
    };
    var key = getRptCnt(location.pathname), cur = location.href, ref = document.referrer;
    var rtpRefer = "";
    if (base_fn_1.ua.isApp()) {
        // 从app端获取rtpRefer
        hdp_1.default.execRequest("PluginStatistics", "getRtpRefer").then(function (res) {
            rtpRefer = res ? res : rtp_1.default.getRtpRefer();
            pageShowEvent(cur, ref, key, rtpRefer);
        });
    }
    else {
        // 从H5缓存读取
        rtpRefer = rtp_1.default.getRtpRefer();
        pageShowEvent(cur, ref, key, rtpRefer);
    }
}
// @ts-ignore
window.beforeComponentLoadTime = Date.now();
exports.default = (function (Vue, options) {
    if (options === void 0) { options = {}; }
    // @ts-ignore
    var router = options.router;
    router.afterEach(function (to, from) {
        // key的规范是比如http://dev-h5.wanwudezhi.com/live-web/list/enterBuy 那key的名称是liveweb.list.enterBuy 根据动态路由生成name（list.enterBuy）的拼接
        setTimeout(function () {
            // 注视掉前进、后退的pageShow页面不上报代码
            // if (popstate) {
            //     popstate = false;
            // } else {
            // @ts-ignore
            window.beforeComponentLoadTime = Date.now();
            var baseFix = router.history.base || "";
            // 获取key进行pageShow上报
            var key = getRptCnt(location.pathname);
            var cur = location.origin + baseFix + to.fullPath;
            var ref = "";
            if (from.path !== "/") {
                var fullPath = base_fn_1.fn.stringifyUrl(from.path, from.query);
                ref = location.origin + baseFix + fullPath;
            }
            if (helper_1.default.matchIgnorePage(to.path)) {
                return;
            }
            window.addEventListener("replaceState", function () {
                logP_1.default(cur, ref, key, popstate);
            });
            send_1.default.sendBatchLog();
            send_1.default.sendNewBatchLog();
            logP_1.default(cur, ref, key, popstate);
            //}
        }, 0);
    });
});
