"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * @Author: lili
 * @Date: 2020-02-01 14:51:21
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020年02月01日
 * @Description:
 */
// 页面停留时间
var base_fn_1 = require("@wanwu/base-fn");
var rtp_1 = require("./rtp/rtp");
var send_1 = require("./util/send");
var trace_1 = require("./util/trace");
// 开始时间与结束时间都存在进行页面停留时间进行埋点信息上报
function pageStayTime(nowReport) {
    var startTime = rtp_1.default.getPreStartTime();
    var endTime = rtp_1.default.getEndTime();
    var endStartTime = rtp_1.default.getStartTime();
    var loggerInfo = rtp_1.default.getLoggerInfo();
    if (endTime > 0 && endStartTime > 0 && endTime > startTime && loggerInfo && loggerInfo.event === "pageShow") {
        loggerInfo.event = "pageStayTime";
        // 当开始时间与结束时间都存在时上报埋点信息
        loggerInfo.ext = __assign({ duration: endTime - startTime, startTime: startTime, endTime: endTime }, loggerInfo.ext);
        // traceLink逻辑
        if (!base_fn_1.ua.isApp()) {
            loggerInfo.traceLink = trace_1.default.getTraceLink();
        }
        // 重置当前上报时间
        loggerInfo.timestamp = new Date().getTime();
        if (base_fn_1.ua.isApp()) {
            if ((base_fn_1.ua.getAppName() === 'wwdz_b2b' && base_fn_1.fn.isLargerThanAppVersion("1.1.05")) || base_fn_1.fn.isLargerThanAppVersion("2.7.6")) {
                send_1.default.logNewAppEvent(loggerInfo);
            }
        }
        else {
            send_1.default.sendNewLog([loggerInfo]);
        }
    }
}
exports.default = pageStayTime;
