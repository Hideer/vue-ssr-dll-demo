"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * @Author: yuechu
 * @Date: 2020-09-27 14:51:21
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020年12月17日
 * @Description:
 */
// 打点相关逻辑
// 暴露logger.logE 自定义事件 打点
var base_fn_1 = require("@wanwu/base-fn");
var rtp_1 = require("./rtp/rtp");
var send_1 = require("./util/send");
var trace_1 = require("./util/trace");
var logP_1 = require("./logP");
function logE(eventId, data, nowReport) {
    // 比对当前url获取当前页面的url与refer和rtpCnt的映射
    var cur = location.href;
    var _refer = "";
    var referAndRtpCntArray = logP_1.getReferAndRtpCnt();
    referAndRtpCntArray.map(function (item) {
        var url = item.url, refer = item.refer, rtpCnt = item.rtpCnt;
        if (url === cur) {
            _refer = refer;
        }
    });
    var loggerInfo = {};
    // 定义对象
    var obj;
    if (eventId == "listShow") {
        obj =
            data && data.domain && data.domain.length > 0
                ? base_fn_1.fn.clone(data.domain[0])
                : {};
        obj && obj.rtpCnt && delete data.domain[0]["rtpCnt"];
    }
    else if (eventId == "listClick") {
        obj = base_fn_1.fn.clone(data.domain) || {};
        obj && obj.rtpCnt && delete data.domain["rtpCnt"];
    }
    else {
        obj = base_fn_1.fn.clone(data) || {};
        obj && obj.rtpCnt && delete data["rtpCnt"];
    }
    if (obj === undefined)
        obj = {};
    // 将页面读取出来动态拼接到a.b.c.d.e的C位置
    var page = sessionStorage.getItem("page");
    // 定义产生rtpRefer事件
    var event = ["listClick", "elementClick", "dialogClick", "videoSwitch"];
    // 新的埋点上报方法
    if (isNaN(parseInt(eventId, 10))) {
        // loggerInfo = rtp.getNewRepInfo();
        loggerInfo = rtp_1.default.refreshNewRtpInfoData(cur, _refer);
        //   loggerInfo.url = cur;
        //   loggerInfo.refer = _refer;
        // 设置rtpRefer 从session里面读取rtpRefer作为当前埋点的rtpRefer
        if (rtp_1.default.getRtpRefer()) {
            loggerInfo.rtpRefer = rtp_1.default.getRtpRefer();
        }
        // rtpCnt存在将数据上报
        if (obj && obj.rtpCnt) {
            loggerInfo.rtpCnt = rtp_1.default.getHashCntOrRefer(page + "-" + obj.rtpCnt);
        }
        if (eventId && event.includes(eventId) && obj && obj.rtpCnt) {
            // 检查观星录入的key与业务中添加的是否一致
            var hasKeyObj = rtp_1.default.hashGet(obj.rtpCnt);
            if (hasKeyObj && !hasKeyObj.hasKey) {
                console.warn("\u5F53\u524D " + eventId + " \u4E8B\u4EF6\u60A8\u8F93\u5165\u7684rtpCnt\u503C\u4E3A " + hasKeyObj.key + " \u4E0D\u5B58\u5728, \u8BF7\u68C0\u67E5\u89C2\u661F\u5F55\u5165\u7684\u662F\u5426\u4E0E\u60A8\u6DFB\u52A0\u7684\u4E00\u81F4");
            }
            // 将当前的ctpCnt存储起来作为下一次埋点的rtpRefer（重置rtpRefer）
            rtp_1.default.resetRtpRefer(loggerInfo.rtpCnt);
            // 设置app端返回所需要的rtpRefer
            rtp_1.default.setAppRtpReferData(loggerInfo.rtpCnt);
            // 删除rtpCnt
            delete obj.rtpCnt;
        }
        loggerInfo.ext = __assign(__assign({}, data), loggerInfo.ext);
        // 检查list类埋点数据格式
        loggerInfo.ext = send_1.default.checkListLog(eventId, loggerInfo.ext);
        loggerInfo.event = eventId;
        if (!base_fn_1.ua.isApp()) {
            // traceLink逻辑
            loggerInfo.traceLink = trace_1.default.getTraceLink();
            // 由于要作为终点，所以下一次事件再修改值
            trace_1.default.parseTraceData(data);
        }
        if (base_fn_1.ua.isApp()) {
            if ((base_fn_1.ua.getAppName() === 'wwdz_b2b' && base_fn_1.fn.isLargerThanAppVersion("1.1.05")) || base_fn_1.fn.isLargerThanAppVersion("2.7.6")) {
                send_1.default.logNewAppEvent(loggerInfo);
            }
        }
        else {
            if (nowReport) {
                send_1.default.sendNewLog([loggerInfo]);
            }
            else {
                send_1.default.logWebNewEvent(loggerInfo);
            }
        }
    }
}
exports.default = logE;
