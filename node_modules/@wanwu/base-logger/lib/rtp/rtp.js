"use strict";
// rtp.js 生成打点需要的rtp标识
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../config");
var collect_1 = require("../util/collect");
var cross_1 = require("../util/cross");
var hash_js_1 = require("../util/hash.js");
var helper_1 = require("../util/helper");
var base_fn_1 = require("@wanwu/base-fn");
var hdp_1 = require("@wanwu/hdp");
var pageStayTime_1 = require("../pageStayTime");
// 生成rtp_cnt规范的a.b.c.d.e
// 获取业务字段a, 需要配置（如：玩物商城bw0，玩物原料:bw1，玩物后台等）
function getCntA() {
    return config_1.default.rtp_cnt_a;
}
// 获取站点字段b,可取预定义（如：h5，小程序，ios，安卓）
function getCntB() {
    var custom = config_1.default.rtp_cnt_b;
    if (custom) {
        return custom;
    }
    // 暴露站点设置
    if (base_fn_1.ua.isIOSApp()) {
        return "mw0";
    }
    else if (base_fn_1.ua.isAndroidApp()) {
        return "mw1";
    }
    else if (base_fn_1.ua.isWechatMiniProgram()) {
        return "w1";
    }
    else {
        return "w0";
    }
}
var rtp = {
    // 获取新的基础数据
    refreshNewRtpInfoData: function (cur, ref) {
        if (cur === void 0) { cur = location.href; }
        if (ref === void 0) { ref = document.referrer; }
        if (!ref) {
            ref = document.referrer;
        }
        helper_1.default.mergeParams();
        var obj = {
            env: collect_1.default.getEnv(),
            timestamp: collect_1.default.getTime(),
            uuid: localStorage.getItem("uuid") || "",
            userId: collect_1.default.getUserInfo().userId || "",
            // os
            basic: {
                browser: navigator ? navigator.userAgent : "",
                os: base_fn_1.ua.getAppPlatform(),
                rtpApplication: this.getRtpApplication(),
            },
            url: cur,
            refer: ref,
        };
        if (location && location.search) {
            var params = location.search.split("?");
            var pageParam = {};
            if (params && params.length > 0) {
                pageParam = base_fn_1.fn.parse(params[1]);
                // 删除token
                if (pageParam.hasOwnProperty("token")) {
                    delete pageParam["token"];
                    // 将url的token删除掉
                    obj.url = base_fn_1.fn.removeQueryString(obj.url, "token");
                }
                // 删除rtpRefer
                if (pageParam.hasOwnProperty("rtpRefer")) {
                    delete pageParam["rtpRefer"];
                }
                if (!obj.ext)
                    obj.ext = {};
                obj.ext.pageParam = pageParam;
            }
        }
        return obj;
    },
    //跳转都可以上报
    jumpPageSetPageStayTime: function () {
        // 设置结束时间
        this.setEndTime();
        // 在app进行上报
        pageStayTime_1.default(true);
    },
    // 封装公共方法重置首页对象、开始时间、结束时间
    setPageStayTime: function () {
        // 设置结束时间
        this.setEndTime();
        // 在app进行上报
        if (base_fn_1.ua && base_fn_1.ua.isApp()) {
            // 进行埋点上报
            pageStayTime_1.default(true);
        }
    },
    // 上报H5页面
    setPageStayTimeH5: function () {
        // 在H5中进行上报
        if (base_fn_1.ua && !base_fn_1.ua.isApp()) {
            pageStayTime_1.default(true);
        }
    },
    // 设置上报的开始时间
    setPreStartTime: function (__logPreStartTime) {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        obj["loggerObj"]["__logPreStartTime"] = __logPreStartTime;
        cross_1.default.setWindowName(obj);
        localStorage.setItem("__logPreStartTime", __logPreStartTime);
    },
    // 设置开始时间
    setStartTime: function () {
        var startTime = new Date().getTime();
        localStorage.setItem("__logStartTime", startTime);
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        obj["loggerObj"]["__logStartTime"] = startTime;
        cross_1.default.setWindowName(obj);
    },
    // 设置结束时间
    setEndTime: function () {
        // 将startTime存储起来
        var startTime = this.getStartTime();
        this.setPreStartTime(startTime);
        // 设置最后时间
        var endTime = new Date().getTime();
        localStorage.setItem("__logEndTime", endTime);
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        obj["loggerObj"]["__logEndTime"] = endTime;
        cross_1.default.setWindowName(obj);
    },
    // 将loggerInfo存储到缓存里面
    setLoggerInfo: function (loggerInfo) {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        obj["loggerObj"]["__loggerInfo"] = loggerInfo;
        cross_1.default.setWindowName(obj);
        localStorage.setItem("__loggerInfo", JSON.stringify(loggerInfo));
    },
    // 获取上报上一个页面的开始时间
    getStartTime: function () {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        var preStartTime = obj["loggerObj"]["__logStartTime"] ? obj["loggerObj"]["__logStartTime"] : localStorage.getItem("__logStartTime") ? localStorage.getItem("__logStartTime") : 0;
        cross_1.default.setWindowName(obj);
        return preStartTime;
    },
    // 获取上报上一个页面的开始时间
    getPreStartTime: function () {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        var preStartTime = obj["loggerObj"]["__logPreStartTime"] ? obj["loggerObj"]["__logPreStartTime"] : localStorage.getItem("__logPreStartTime") ? localStorage.getItem("__logPreStartTime") : 0;
        cross_1.default.setWindowName(obj);
        return preStartTime;
    },
    // 获取本地缓存的loggerInfo
    getLoggerInfo: function () {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        var loggerInfo = obj["loggerObj"]["__loggerInfo"] ? obj["loggerObj"]["__loggerInfo"] : localStorage.getItem("__loggerInfo") ? JSON.parse(localStorage.getItem("__loggerInfo")) : {};
        cross_1.default.setWindowName(obj);
        return loggerInfo;
    },
    // 获取上报上一个页面的开始时间
    getEndTime: function () {
        var obj = JSON.parse(cross_1.default.getWindowName());
        if (!obj.hasOwnProperty("loggerObj"))
            obj["loggerObj"] = {};
        var endTime = obj["loggerObj"]["__logEndTime"] ? obj["loggerObj"]["__logEndTime"] : localStorage.getItem("__logEndTime") ? localStorage.getItem("__logEndTime") : 0;
        cross_1.default.setWindowName(obj);
        return endTime;
    },
    // 设置app端需要的rtpRefer存储到桥接里
    setAppRtpReferData: function (key) {
        // 在app里面进行存储
        if (base_fn_1.ua.isApp()) {
            hdp_1.default
                .execRequest("PluginStatistics", "setRtpRefer", { rtpRefer: key })
                .then(function (res) { });
        }
    },
    // 设置rtpRefer
    resetRtpRefer: function (value) {
        sessionStorage.setItem("rtpRefer", value);
    },
    // 获取rtpRefer
    getRtpRefer: function () {
        return sessionStorage.getItem("rtpRefer");
    },
    // 获取rtpApplication
    getRtpApplication: function () {
        try {
            // 获取顺序 sessionStorage => url
            var rtpApplication = void 0;
            if (sessionStorage.getItem('rtpApplication')) {
                rtpApplication = sessionStorage.getItem('rtpApplication');
                return rtpApplication;
            }
            // url带参数是因为小程序池子不互通，顺便解决不同域名的数据共享问题
            if (base_fn_1.fn.getQueryString('rtpApplication')) {
                rtpApplication = base_fn_1.fn.getQueryString('rtpApplication');
                // 补充到sessionStorage
                sessionStorage.setItem('rtpApplication', base_fn_1.fn.getQueryString('rtpApplication'));
                return rtpApplication;
            }
            // 生成rtpApplication
            var application = void 0;
            if (base_fn_1.ua.isAndroidApp()) {
                application = 'Android';
            }
            else if (base_fn_1.ua.isIOSApp()) {
                application = 'IOS';
            }
            else if (base_fn_1.ua.isWechatMiniProgram()) {
                application = 'XCX';
            }
            else {
                application = 'H5';
            }
            rtpApplication = application + "." + hash_js_1.default.rand(8);
            // 初次赋值需要加入url 和 sessionStorage中
            sessionStorage.setItem("rtpApplication", rtpApplication);
            history.replaceState(null, null, base_fn_1.fn.setQueryString(document.URL, 'rtpApplication', rtpApplication));
            return rtpApplication;
        }
        catch (err) {
            console.log(err);
        }
    },
    // 获取cnt与ref
    getHashCntOrRefer: function (key) {
        var res = [getCntA(), getCntB()];
        // 模拟当前数据
        var jsonData = window.loggerData
            ? window.loggerData
            : {};
        if (key) {
            var keys = key.split("-");
            if (keys && keys.length > 0) {
                res.push(keys && keys[0] && jsonData[keys[0]] ? jsonData[keys[0]] : "0");
                res.push(keys && keys[1] && jsonData[keys[1]] ? jsonData[keys[1]] : "0");
                res.push(hash_js_1.default.getHash(3));
            }
        }
        else {
            // 当key不存在是添加a.b.0.0.e
            res.push("0");
            res.push("0");
            res.push(hash_js_1.default.getHash(3));
        }
        return res.join(".") || "";
    },
    hashGet: function (key) {
        var jsonData = window.loggerData;
        if (jsonData && jsonData.hasOwnProperty(key)) {
            return { hasKey: true, key: key };
        }
        else {
            return { hasKey: false, key: key };
        }
    },
    // 将传入href拼接生成新的href
    makeUrl: function (href, rtpCnt) {
        href = href.replace(/(#.+)$/, "");
        href = base_fn_1.fn.setQueryString(href, "rtpRefer", rtpCnt);
        return href;
    },
    // 针对传入的对象进行兼容性处理
    makeObject: function (obj, rtpCnt) {
        obj.query = Object.assign({}, obj.query, { rtpRefer: rtpCnt });
        return obj;
    },
    // 针对传入的对象进行兼容性处理
    makeObjectTraceId: function (obj, TraceId) {
        obj.query = Object.assign({}, obj.query, { listClickTrace: TraceId });
        return obj;
    },
    // 跨域是否保存TraceId参数标志
    makeObjectTraceIdSaveFlag: function (obj, flag) {
        obj.query = Object.assign({}, obj.query, { traceIdSaveFlag: flag });
        return obj;
    },
};
exports.default = rtp;
