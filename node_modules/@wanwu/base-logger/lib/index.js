"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logImmediately = exports.VueCreateRtp = exports.crossUtil = exports.VueLog = exports.logR = exports.logE = exports.logP = exports.config = exports.logE10011 = exports.addReferRtp = exports.createShareParams = exports.createRtpParams = void 0;
var base_fn_1 = require("@wanwu/base-fn");
var logP_1 = require("./logP");
exports.logP = logP_1.default;
var logE_1 = require("./logE");
exports.logE = logE_1.default;
var logR_1 = require("./logR");
exports.logR = logR_1.default;
var VueLog_1 = require("./plugins/VueLog");
exports.VueLog = VueLog_1.default;
var rtp_1 = require("./rtp/rtp");
var config_1 = require("./config");
exports.config = config_1.default;
var collect_1 = require("./util/collect");
var send_1 = require("./util/send");
var helper_1 = require("./util/helper");
var routeParams_1 = require("./util/routeParams");
var cross_1 = require("./util/cross");
exports.crossUtil = cross_1.default;
var VueCreateRtp_1 = require("./plugins/VueCreateRtp");
exports.VueCreateRtp = VueCreateRtp_1.default;
/**
 * 为指定url构造一个带rtp参数的url, 用于js代码跳转页面时，添加rtp信息
 * @param url
 * @return {string ｜ object}
 */
function createRtpParams(url) {
    // 跳转保留最后停留时间
    rtp_1.default.jumpPageSetPageStayTime();
    if (typeof url === 'undefined') {
        return '';
    }
    // 处理url
    url = routeParams_1.default.parseUrl(url);
    // // 获取rtp信息C、D字段为0
    // const c = 0;
    // const d = 0;
    // const rtpCnt = rtp.getRtpCnt(c, d);
    // if (url instanceof Object) {
    //     return rtp.makeObject(url, rtpCnt);
    // } else {
    //     return rtp.makeUrl(url, rtpCnt);
    // }
    // listShow agentTraceInfo_如果有trackId就listClick跳转将traceId链路一直带下去
    var traceId = sessionStorage.getItem('logger_listClickTrace') || '';
    if (!base_fn_1.ua.isApp()) {
        var pageParam = {};
        if (location && location.search) {
            var params = location.search.split("?");
            if (params && params.length > 0) {
                pageParam = base_fn_1.fn.parse(params[1]);
            }
        }
        if (!traceId) {
            // 如果缓存和url带的不一致那么就更新traceId traceIdSaveFlag 如果跨域需要从参数这边取值需要保存到sessionStorage
            if (pageParam.hasOwnProperty("listClickTrace") && pageParam["listClickTrace"] && pageParam['traceIdSaveFlag'] === 1) {
                sessionStorage.setItem('logger_listClickTrace', pageParam["listClickTrace"]);
                url = rtp_1.default.makeObjectTraceId(url, pageParam["listClickTrace"]);
            }
        }
        else {
            // 如果跨域给一个标识需要保存traceId 如果域名不同就再次跳转是要把traceId重新保存一下
            if (url && Object.prototype.toString.call(url) === "[object Object]" && url.origin !== location.origin) {
                url = rtp_1.default.makeObjectTraceIdSaveFlag(url, 1);
            }
            // 如果跨域给一个标识需要保存traceId
            if (url && Object.prototype.toString.call(url) === "[object String]" && url.indexOf(location.origin) === -1) {
                url = rtp_1.default.makeObjectTraceIdSaveFlag(url, 1);
            }
            url = rtp_1.default.makeObjectTraceId(url, traceId);
        }
    }
    var rtpRefer = rtp_1.default.getRtpRefer();
    if (rtpRefer) {
        if (url instanceof Object) {
            return rtp_1.default.makeObject(url, rtpRefer);
        }
        else {
            return rtp_1.default.makeUrl(url, rtpRefer);
        }
    }
    return url;
}
exports.createRtpParams = createRtpParams;
/**
 * 对分享页面的url进行处理，去除当前分享url的rtp参数，添加shareUserId, shareTime, firstVisit
 * 如当前url包含 shareUserId, shareTime， 则进行替换
 * @param url
 * @return {string}
 */
function createShareParams(url) {
    if (typeof url === 'undefined') {
        return '';
    }
    var shareUserId = collect_1.default.getUserInfo().userId;
    var shareTime = collect_1.default.getTime();
    var params = {
        shareUserId: shareUserId,
        shareTime: shareTime,
        firstVisit: 0
    };
    var shareUrl = base_fn_1.fn.stringifyUrl(url, params);
    //return fn.removeQueryString(shareUrl, 'rtp');
    return base_fn_1.fn.removeQueryString(shareUrl, 'rtpRefer');
}
exports.createShareParams = createShareParams;
/**
 * 对与客户端交互的url进行处理，添加当前页面的rtpCnt作为客户端的rtpUrl, 添加当前页的url为客户端的refer
 * @param {string} path
 * @param {object} query
 * @return {object}
 */
function addReferRtp(path, query) {
    if (query instanceof Object) {
        query.refer = path;
        // 将rtpRefer添加到客户端app、小程序
        query.rtpUrl = rtp_1.default.getHashCntOrRefer(rtp_1.default.getRtpRefer());
        //query.rtpUrl = localStorage.getItem('rtpUrl');
    }
    return query;
}
exports.addReferRtp = addReferRtp;
/**
 * 监听页面卸载后是否还有未发送的数据
 */
// window.addEventListener('beforeunload', function() {
//     const logs = send.getLog();
//     const newLogs = send.getNewLog();
//     if (logs.length > 0)  {
//         send.sendLog(logs);
//     }
//     if (newLogs.length > 0) {
//         send.sendNewLog(logs);
//     }
// });
/**
 * 解决跨域打点通讯
 */
function unloadFn() {
    var logs = send_1.default.getLog();
    var newLogs = send_1.default.getNewLog();
    if (logs.length > 0 || newLogs.length > 0) {
        var obj = {};
        obj = JSON.parse(cross_1.default.getWindowName());
        obj["logsList"] = logs.concat(newLogs) || [];
        cross_1.default.setWindowName(obj);
        send_1.default.clearLog();
        send_1.default.clearNewLog();
    }
}
if (base_fn_1.ua.isApp()) {
    // app内
    window.addEventListener('beforeunload', unloadFn);
}
else {
    // 微信浏览器没有beforeunload，ios为pagehide，安卓为unload
    if (base_fn_1.ua.isWechat() && base_fn_1.ua.isIOS()) {
        window.addEventListener('pagehide', unloadFn);
    }
    else {
        window.addEventListener('unload', unloadFn);
    }
}
window.addEventListener('load', function () {
    var obj = {};
    obj = JSON.parse(cross_1.default.getWindowName());
    var prePageLogs = obj["logsList"] || [];
    if (prePageLogs.length > 0) {
        var logs_1 = [];
        var newLogs_1 = [];
        prePageLogs.forEach(function (log) {
            if (log.event) {
                newLogs_1.push(log);
            }
            else {
                logs_1.push(log);
            }
        });
        // tslint:disable-next-line:no-unused-expression
        logs_1.length > 0 && send_1.default.sendLog(logs_1);
        // tslint:disable-next-line:no-unused-expression
        newLogs_1.length > 0 && send_1.default.sendNewLog(newLogs_1);
        obj["logsList"] = [];
        cross_1.default.setWindowName(obj);
    }
});
// 10011 可视区域内的曝光打点
function logE10011(elm, data) {
    if (helper_1.default.checkVisible(elm)) {
        logE_1.default(10011, data);
    }
}
exports.logE10011 = logE10011;
var logImmediately = send_1.default.logImmediately;
exports.logImmediately = logImmediately;
helper_1.default.mergeParams();
send_1.default.startLogTimer();
// 设置uuid
helper_1.default.setUuid();
