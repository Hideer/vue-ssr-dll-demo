import logP from "../logP";
import helper from "../util/helper";
import { ua, fn } from "@wanwu/base-fn";
import send from "../util/send";
import hdp from "@wanwu/hdp";
import rtp from "../rtp/rtp";
// 跳转在index.ts里面createRtpParams方法里面调用
// 前进、后台执行方法
let popstate = false;
window.addEventListener("popstate", function () {
    popstate = true;
    rtp.setPageStayTime();
    // 如果是前进、后退要把全局变量logger_listClickTrace重新重置一下
    if (!ua.isApp()) {
        let pageParam = {};
        if (location && location.search) {
            let params = location.search.split("?");
            if (params && params.length > 0) {
                pageParam = fn.parse(params[1]);
                if (pageParam.hasOwnProperty("listClickTrace") && pageParam["listClickTrace"]) {
                    sessionStorage.setItem('logger_listClickTrace', pageParam["listClickTrace"]);
                }
                else {
                    sessionStorage.setItem('logger_listClickTrace', '');
                }
            }
        }
        else {
            sessionStorage.setItem('logger_listClickTrace', '');
        }
    }
}, false);
// 在app中返回切换桥接触发的方法
document.addEventListener("visibilitychange", function () {
    var visible = document.visibilityState === "visible";
    if (ua.isApp()) {
        if (visible) {
            // 展示进行pageShow埋点上报
            visibilitychangeFunction();
        }
        else {
            // 在app黑屏H5消失在展示获取最后时间  
            rtp.setPageStayTime();
        }
    }
});
// 监听微信端关闭
window.addEventListener('pagehide', function () {
    rtp.setPageStayTime();
});
// 通过url获取首页的rtpCnt
function getRptCnt(pathName) {
    let pathname = pathName || location.pathname;
    let res = [];
    let path = pathname.split("/");
    if (path.length > 0) {
        if (path.length > 0) {
            path = path.slice(1, 4);
        }
        if (path && path.length > 0) {
            path.forEach((item, i) => {
                if (item && item.indexOf("-") > -1) {
                    item = item.replace(/[-]/g, "");
                }
                res.push(item);
            });
        }
    }
    return res.join(".") || '';
}
function visibilitychangeFunction() {
    const pageShowEvent = (cur, ref, key, rtpRefer) => {
        // 重置缓存的rtpRefer
        rtp.resetRtpRefer(rtpRefer);
        // 上报pageShow页面
        logP(cur, '', key, true);
    };
    var key = getRptCnt(location.pathname), cur = location.href, ref = document.referrer;
    let rtpRefer = "";
    if (ua.isApp()) {
        // 从app端获取rtpRefer
        hdp.execRequest("PluginStatistics", "getRtpRefer").then((res) => {
            rtpRefer = res ? res : rtp.getRtpRefer();
            pageShowEvent(cur, ref, key, rtpRefer);
        });
    }
    else {
        // 从H5缓存读取
        rtpRefer = rtp.getRtpRefer();
        pageShowEvent(cur, ref, key, rtpRefer);
    }
}
// @ts-ignore
window.beforeComponentLoadTime = Date.now();
export default (Vue, options = {}) => {
    // @ts-ignore
    const { router } = options;
    router.afterEach(function (to, from) {
        // key的规范是比如http://dev-h5.wanwudezhi.com/live-web/list/enterBuy 那key的名称是liveweb.list.enterBuy 根据动态路由生成name（list.enterBuy）的拼接
        setTimeout(() => {
            // 注视掉前进、后退的pageShow页面不上报代码
            // if (popstate) {
            //     popstate = false;
            // } else {
            // @ts-ignore
            window.beforeComponentLoadTime = Date.now();
            const baseFix = router.history.base || "";
            // 获取key进行pageShow上报
            let key = getRptCnt(location.pathname);
            const cur = location.origin + baseFix + to.fullPath;
            let ref = "";
            if (from.path !== "/") {
                const fullPath = fn.stringifyUrl(from.path, from.query);
                ref = location.origin + baseFix + fullPath;
            }
            if (helper.matchIgnorePage(to.path)) {
                return;
            }
            window.addEventListener("replaceState", () => {
                logP(cur, ref, key, popstate);
            });
            send.sendBatchLog();
            send.sendNewBatchLog();
            logP(cur, ref, key, popstate);
            //}
        }, 0);
    });
};
