/*
 * @Author: yuechu
 * @Date: 2020-09-27 14:51:21
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020年12月17日
 * @Description:
 */
// 打点相关逻辑
// 暴露logger.logE 自定义事件 打点
import { fn, ua } from "@wanwu/base-fn";
import rtp from "./rtp/rtp";
import send from "./util/send";
import traceUtil from "./util/trace";
import { getReferAndRtpCnt } from "./logP";
export default function logE(eventId, data, nowReport) {
    // 比对当前url获取当前页面的url与refer和rtpCnt的映射
    const cur = location.href;
    let _refer = "";
    const referAndRtpCntArray = getReferAndRtpCnt();
    referAndRtpCntArray.map((item) => {
        const { url, refer, rtpCnt } = item;
        if (url === cur) {
            _refer = refer;
        }
    });
    let loggerInfo = {};
    // 定义对象
    let obj;
    if (eventId == "listShow") {
        obj =
            data && data.domain && data.domain.length > 0
                ? fn.clone(data.domain[0])
                : {};
        obj && obj.rtpCnt && delete data.domain[0]["rtpCnt"];
    }
    else if (eventId == "listClick") {
        obj = fn.clone(data.domain) || {};
        obj && obj.rtpCnt && delete data.domain["rtpCnt"];
    }
    else {
        obj = fn.clone(data) || {};
        obj && obj.rtpCnt && delete data["rtpCnt"];
    }
    if (obj === undefined)
        obj = {};
    // 将页面读取出来动态拼接到a.b.c.d.e的C位置
    let page = sessionStorage.getItem("page");
    // 定义产生rtpRefer事件
    let event = ["listClick", "elementClick", "dialogClick", "videoSwitch"];
    // 新的埋点上报方法
    if (isNaN(parseInt(eventId, 10))) {
        // loggerInfo = rtp.getNewRepInfo();
        loggerInfo = rtp.refreshNewRtpInfoData(cur, _refer);
        //   loggerInfo.url = cur;
        //   loggerInfo.refer = _refer;
        // 设置rtpRefer 从session里面读取rtpRefer作为当前埋点的rtpRefer
        if (rtp.getRtpRefer()) {
            loggerInfo.rtpRefer = rtp.getRtpRefer();
        }
        // rtpCnt存在将数据上报
        if (obj && obj.rtpCnt) {
            loggerInfo.rtpCnt = rtp.getHashCntOrRefer(`${page}-${obj.rtpCnt}`);
        }
        if (eventId && event.includes(eventId) && obj && obj.rtpCnt) {
            // 检查观星录入的key与业务中添加的是否一致
            let hasKeyObj = rtp.hashGet(obj.rtpCnt);
            if (hasKeyObj && !hasKeyObj.hasKey) {
                console.warn(`当前 ${eventId} 事件您输入的rtpCnt值为 ${hasKeyObj.key} 不存在, 请检查观星录入的是否与您添加的一致`);
            }
            // 将当前的ctpCnt存储起来作为下一次埋点的rtpRefer（重置rtpRefer）
            rtp.resetRtpRefer(loggerInfo.rtpCnt);
            // 设置app端返回所需要的rtpRefer
            rtp.setAppRtpReferData(loggerInfo.rtpCnt);
            // 删除rtpCnt
            delete obj.rtpCnt;
        }
        loggerInfo.ext = Object.assign(Object.assign({}, data), loggerInfo.ext);
        // 检查list类埋点数据格式
        loggerInfo.ext = send.checkListLog(eventId, loggerInfo.ext);
        loggerInfo.event = eventId;
        if (!ua.isApp()) {
            // traceLink逻辑
            loggerInfo.traceLink = traceUtil.getTraceLink();
            // 由于要作为终点，所以下一次事件再修改值
            traceUtil.parseTraceData(data);
        }
        if (ua.isApp()) {
            if ((ua.getAppName() === 'wwdz_b2b' && fn.isLargerThanAppVersion("1.1.05")) || fn.isLargerThanAppVersion("2.7.6")) {
                send.logNewAppEvent(loggerInfo);
            }
        }
        else {
            if (nowReport) {
                send.sendNewLog([loggerInfo]);
            }
            else {
                send.logWebNewEvent(loggerInfo);
            }
        }
    }
}
