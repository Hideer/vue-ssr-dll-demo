import './polyfill'; // 兼容ios9 不支持document.body.prepend 方法
import Vue from 'vue';
import AppHeader from './AppHeader';
import { addThroughParams } from '@wanwu/location-plugin-through-params';
import { isDevelopment, isAPP, isEmbed, needShowAppHeader } from './utils';
import {
    vmUnbindEvents, vmBindEvents,
} from '@wanwu/event-utils';
import getCompDefaultOptions from '@wanwu/get-comp-default-options';
const AppHeaderConstructor = Vue.extend(AppHeader);

// APP内H5自定义头部使用的nh(设备状态栏高度)
addThroughParams('__nh');
let cacheEvents;
const defaultOptions = getCompDefaultOptions(AppHeader);
/** 全局appHeader实例 */
let instance;
/**
 * 添加头部
 * @param {object} param 参数
 * @param {string} param.path 路径（一般是当前路径）
 * @param {string[]} param.hasSharePath 需要展示分享按钮的路径规则正则字符串数组
 * @param {string[]} param.ignoreHeaderPath 不需要展示头部的路径规则正则字符串数组
 * @param {object} param.props addHeader props属性
 * @param {object} param.events addHeader 事件
 * @param {object} param.slots addHeader 插槽 @example {back:()=>(<a>返回</a>)}
 * @returns {Vue}
 */
function addAppHeader({
    path = '', hasSharePath = [], ignoreHeaderPath = [], props, events, slots,
}) {
    if (needShowAppHeader) {
        if (!instance) {
            instance = new AppHeaderConstructor();

            instance.vm = instance.$mount();
            document.body.prepend(instance.vm.$el);
        }
        vmUnbindEvents(instance, cacheEvents);
        Object.assign(instance.$props, defaultOptions);
        if (props) {
            Object.assign(instance.$props, props);
        }
        if (events) {
            cacheEvents = events;
            vmBindEvents(instance, cacheEvents);
        }
        instance.$scopedSlots = {};
        if (slots) {
            Object.assign(instance.$scopedSlots, slots);
        }
        // 隐藏头部
        const isIgnoreHeader = checkHasPath(ignoreHeaderPath, path);
        // 拥有分享的头部
        const isHasShareHeader = checkHasPath(hasSharePath, path);

        if (isIgnoreHeader) {
            instance.hide();
        } else {
            instance.show();
            instance.setPublicHeaderHeight();
            if (isHasShareHeader) {
                instance.showAppHeaderShare();
            } else {
                instance.hideAppHeaderShare();
            }
        }
    }
    return instance;
}

/**
 * 公用校验路径的方法
 * @param {string[]|RegExp[]} pathConfigArray 路径规则（正则字符串）数组
 * @param {string} path 待校验的路径字符串
 */
export function checkHasPath(pathConfigArray, path) {
    let status = false;
    pathConfigArray.forEach(item => {
        if (new RegExp(item).test(path)) {
            status = true;
        }
    });
    return status;
}

AppHeader.install = (Vue) => {
    Vue.component(AppHeader.name, AppHeader);
};

export {
    addAppHeader,
    instance as appHeader,
    AppHeader,
    isDevelopment,
    isAPP,
    isEmbed,
    needShowAppHeader,
};
