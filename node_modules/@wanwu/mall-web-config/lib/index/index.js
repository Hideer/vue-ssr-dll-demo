'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.date.to-string');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.promise');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.regexp.to-string');
require('core-js/modules/es.string.replace');
require('core-js/modules/web.timers');
require('regenerator-runtime/runtime');
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/esm/asyncToGenerator'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var baseFn = require('@wanwu/base-fn');
var hdp = _interopDefault(require('@wanwu/hdp'));

/**
 * 获取应用平台标识类型
 * @returns {number | string} h5:4 | android : 3 | ios : 2 | default : 1
 */

var getCurrentPlatformType = function getCurrentPlatformType() {
  var appPlatform = baseFn.ua.getAppPlatform();
  var res;

  switch (appPlatform) {
    case 'h5':
      res = 4;
      break;

    case 'android':
      res = 3;
      break;

    case 'ios':
      res = 2;
      break;

    default:
      res = 1;
  }

  return res;
};
/**
 * 获取平台和版本信息
 * @returns {string}
 */


var getSource = function getSource() {
  var appPlatform = baseFn.ua.getAppPlatform(); // getAppVersion()：获取应用版本信息

  var appVersion = baseFn.ua.getAppVersion() || '0.0.1';
  return appPlatform + '_mall_' + appVersion;
};
/**
 * 新版设备指纹 2021-0407
 * @returns {Promise}
 */


var webUmidToken = '';

var getWebUmidToken = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!webUmidToken) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", webUmidToken);

          case 2:
            _context.next = 4;
            return new Promise(function (resolve) { resolve(require(
            /* webpackChunkName: "awsc" */
            './awsc-593bbc45.js')); });

          case 4:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              window.AWSC.use('um', function (state, um) {
                if (state !== 'loaded') return;
                um.init({
                  //appName请直接使用'saf-aliyun-com'
                  appName: 'saf-aliyun-com'
                }, function (initState, result) {
                  if (initState === 'success') {
                    webUmidToken = 'ali-' + result.tn;
                    resolve(webUmidToken);
                  }

                  setTimeout(function () {
                    resolve(webUmidToken);
                  }, 500);
                });
              });
            }));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getWebUmidToken() {
    return _ref.apply(this, arguments);
  };
}();
/**
 * 用以异步获取人机识别token数据
 * @returns {Promise<String>} 人机识别token数据
 */


var getUAToken = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return new Promise(function (resolve) { resolve(require(
            /* webpackChunkName: "awsc" */
            './awsc-593bbc45.js')); });

          case 2:
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              var timer = setTimeout(function () {
                reject(new Error('Timeout'));
              }, 1000);

              if (window.uabModule) {
                clearTimeout(timer);
                resolve(window.uabModule.getUA()); // 获取人机识别token数据
              }

              window.AWSC.use('uab', function (state, uab) {
                if (state === 'loaded') {
                  clearTimeout(timer);
                  window.uabModule = uab;
                  resolve(window.uabModule.getUA()); // 获取人机识别token数据
                }
              });
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getUAToken() {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * 获取设备指纹, 需要有window._dx
 * @returns {Promise}
 */


var getConstID = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var options, token;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = {
              appId: 'd9e88bf772495bbc38d96cab5205e5e7',
              // 唯一标识，必填
              server: 'https://device-finger.wanwudezhi.com/udid/c1' // constId 服务接口，可选
              // userId: '', // 用户标识，可选

            };
            /*
            if (window._dx) {
                if (window._dx.constID) {
                    return Promise.resolve(window._dx.constID);
                } else {
                    return window._dx.ConstID(options).then((token) => {
                        window._dx.constID = token;
                        return token;
                    });
                }
            } else {
                return Promise.reject(new Error('_dx undefined'));
            }
            */

            if (window._dx) {
              _context3.next = 6;
              break;
            }

            _context3.next = 4;
            return new Promise(function (resolve) { resolve(require(
            /* webpackChunkName: "constId" */
            './constId-acb406a9.js')); });

          case 4:
            if (window._dx) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt("return", Promise.reject(new Error('_dx undefined')));

          case 6:
            if (!window._dx.constID) {
              _context3.next = 8;
              break;
            }

            return _context3.abrupt("return", window._dx.constID);

          case 8:
            _context3.next = 10;
            return window._dx.ConstID(options);

          case 10:
            token = _context3.sent;
            window._dx.constID = token;
            return _context3.abrupt("return", token);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getConstID() {
    return _ref3.apply(this, arguments);
  };
}();

var uuid;
var uuidCache;

var getUUID = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!uuid) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return", uuid);

          case 2:
            if (!(baseFn.ua.isApp() && baseFn.fn.compareVersion(baseFn.ua.getAppVersion(), '2.9.9') >= 0)) {
              _context4.next = 5;
              break;
            }

            // uuid = localStorage.getItem(APP_UUID_KEY);
            if (!uuidCache) {
              uuidCache = hdp.exec('PluginNavigation', 'getNativeInfo').then(function (res) {
                uuid = res.data.uuid || localStorage.getItem('uuid') || '';
                return uuid;
              })["catch"](function (e) {
                console.log(e);
                uuid = localStorage.getItem('uuid') || '';
                return uuid;
              });
            }

            return _context4.abrupt("return", uuidCache);

          case 5:
            uuid = localStorage.getItem('uuid') || '';
            return _context4.abrupt("return", uuid);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getUUID() {
    return _ref4.apply(this, arguments);
  };
}(); // 生成新的uuid


var generateUUID = function generateUUID() {
  var d = new Date().getTime();
  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
  return uuid;
};
var index = {
  CookieTokenKey: baseFn.ua.isWechatMiniProgram() ? '__user_token_mini_program__' : '__user_token_RHu&Zr__',
  StorageUserInfoKey: 'userInfo',
  AuthorizationKey: 'Authorization',
  getCurrentPlatformType: getCurrentPlatformType,
  getSource: getSource,
  getConstID: getConstID,
  getUUID: getUUID,
  generateUUID: generateUUID,
  getWebUmidToken: getWebUmidToken,
  getUAToken: getUAToken
};

exports.default = index;
exports.generateUUID = generateUUID;
exports.getConstID = getConstID;
exports.getCurrentPlatformType = getCurrentPlatformType;
exports.getSource = getSource;
exports.getUAToken = getUAToken;
exports.getUUID = getUUID;
exports.getWebUmidToken = getWebUmidToken;
