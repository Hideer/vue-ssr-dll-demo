import {
    fn, ua,
} from '@wanwu/base-fn';
import hdp from '@wanwu/hdp';

/**
 * 获取应用平台标识类型
 * @returns {number | string} h5:4 | android : 3 | ios : 2 | default : 1
 */
const getCurrentPlatformType = () => {
    const appPlatform = ua.getAppPlatform();
    let res;
    switch (appPlatform) {
        case 'h5':
            res = 4;
            break;
        case 'android':
            res = 3;
            break;
        case 'ios':
            res = 2;
            break;
        default:
            res = 1;
    }
    return res;
};

/**
 * 获取平台和版本信息
 * @returns {string}
 */
const getSource = () => {
    const appPlatform = ua.getAppPlatform();
    // getAppVersion()：获取应用版本信息
    const appVersion = ua.getAppVersion() || '0.0.1';
    return appPlatform + '_mall_' + appVersion;
};

/**
 * 新版设备指纹 2021-0407
 * @returns {Promise}
 */
let webUmidToken = '';
const getWebUmidToken = async () => {
    if (webUmidToken) return webUmidToken;
    await import(/* webpackChunkName: "awsc" */ './library/awsc');
    return new Promise((resolve, reject) => {
        window.AWSC.use('um', function (state, um) {
            if (state !== 'loaded') return;
            um.init({
                //appName请直接使用'saf-aliyun-com'
                appName: 'saf-aliyun-com',
            }, function (initState, result) {
                if (initState === 'success') {
                    webUmidToken = 'ali-' + result.tn;
                    resolve(webUmidToken);
                }
                setTimeout(() => {
                    resolve(webUmidToken);
                }, 500);
            });
        });
    });
}


/**
 * 用以异步获取人机识别token数据
 * @returns {Promise<String>} 人机识别token数据
 */
const getUAToken = async function() {
    await import(/* webpackChunkName: "awsc" */ './library/awsc');
    return new Promise((resolve, reject) => {
        const timer = setTimeout(() => {
            reject(new Error('Timeout'));
        }, 1000);
        if (window.uabModule) {
            clearTimeout(timer);
            resolve(window.uabModule.getUA()); // 获取人机识别token数据
        }
        window.AWSC.use('uab', function (state, uab) {
            if(state === 'loaded') {
                clearTimeout(timer);
                window.uabModule = uab;
                resolve(window.uabModule.getUA()); // 获取人机识别token数据
            }
        });
    });
}

/**
 * 获取设备指纹, 需要有window._dx
 * @returns {Promise}
 */
const getConstID = async () => {
    const options = {
        appId: 'd9e88bf772495bbc38d96cab5205e5e7', // 唯一标识，必填
        server: 'https://device-finger.wanwudezhi.com/udid/c1', // constId 服务接口，可选
        // userId: '', // 用户标识，可选
    };
    /*
    if (window._dx) {
        if (window._dx.constID) {
            return Promise.resolve(window._dx.constID);
        } else {
            return window._dx.ConstID(options).then((token) => {
                window._dx.constID = token;
                return token;
            });
        }
    } else {
        return Promise.reject(new Error('_dx undefined'));
    }
    */
    if (!window._dx) {
        await import(/* webpackChunkName: "constId" */ './library/constId');
        if (!window._dx) {
            return Promise.reject(new Error('_dx undefined'));
        }
    }
    if (window._dx.constID) {
        return window._dx.constID;
    }
    const token = await window._dx.ConstID(options);
    window._dx.constID = token;
    return token;
};

let uuid;
let uuidCache;
const getUUID = async () => {
    if (uuid) return uuid;
    // const APP_UUID_KEY = 'app_uuid';
    if (ua.isApp() && (fn.compareVersion(ua.getAppVersion(), '2.9.9') >= 0)) {
        // uuid = localStorage.getItem(APP_UUID_KEY);
        if (!uuidCache) {
            uuidCache = hdp.exec('PluginNavigation', 'getNativeInfo').then(res => {
                uuid = res.data.uuid || localStorage.getItem('uuid') || '';
                return uuid;
            }).catch(e => {
                console.log(e);
                uuid = localStorage.getItem('uuid') || '';
                return uuid;
            });
        }
        return uuidCache;
    }
    uuid = localStorage.getItem('uuid') || '';
    return uuid;
};

// 生成新的uuid
const generateUUID = () => {
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
    return uuid;
};


export {
    getCurrentPlatformType,
    getSource,
    getConstID,
    getUUID,
    generateUUID,
    getWebUmidToken,
    getUAToken,
};

export default {
    CookieTokenKey: ua.isWechatMiniProgram() ? '__user_token_mini_program__' : '__user_token_RHu&Zr__',
    StorageUserInfoKey: 'userInfo',
    AuthorizationKey: 'Authorization',
    getCurrentPlatformType,
    getSource,
    getConstID,
    getUUID,
    generateUUID,
    getWebUmidToken,
    getUAToken,
};
