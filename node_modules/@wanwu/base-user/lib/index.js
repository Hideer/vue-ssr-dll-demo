'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.array.find');
require('core-js/modules/es.array.iterator');
require('core-js/modules/es.function.bind');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.promise');
require('core-js/modules/es.regexp.constructor');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.regexp.to-string');
require('core-js/modules/es.string.iterator');
require('core-js/modules/es.string.replace');
require('core-js/modules/web.dom-collections.iterator');
require('core-js/modules/web.timers');
require('core-js/modules/web.url');
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/esm/defineProperty'));
require('regenerator-runtime/runtime');
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/esm/asyncToGenerator'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/esm/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/esm/createClass'));
var baseFn = require('@wanwu/base-fn');
var baseMallLogger = require('@wanwu/base-mall-logger');
var hdp = _interopDefault(require('@wanwu/hdp'));
var wLocation = _interopDefault(require('@wanwu/w-location'));
var mySentry = _interopDefault(require('@wanwu/sentry'));
var Config = _interopDefault(require('@wanwu/mall-web-config'));
var baseRequest = require('@wanwu/base-request');
var baseRequest__default = _interopDefault(baseRequest);
var tokenManager = require('@wanwu/base-sdk-token-manager');
var kl_request = _interopDefault(require('@wanwu/http-request'));
var merge = _interopDefault(require('lodash.merge'));
var WxSdk = _interopDefault(require('@wanwu/wx-sdk'));
var RC = _interopDefault(require('@wanwu/resource-center'));
var baseLogger = require('@wanwu/base-logger');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var User = /*#__PURE__*/function () {
  /**
   * 用户相关方法集
   */
  function User() {
    _classCallCheck(this, User);

    /** @property { option } 模块全局配置 */
    this.option = {
      onError: function onError(error) {
        return mySentry.logError(error);
      },
      loginOption: {
        // loginOrigin: 'https://h5.wanwudezhi.com',
        loginOrigin: window.location.origin,
        loginByPhoneUrl: '/mall-web/user/bindPhone',
        wechatTransformUrl: '/mall-web/user/transform',
        xcxLoginUrl: '/pages/user/login',
        getTokenOnUrl: false,
        appLoginUrl: 'zdwh://wwdz/login',
        loginParams: {}
      }
    }; // token管理方法从request里面引入

    this.saveToken = tokenManager.saveToken;
    this.removeToken = tokenManager.removeToken;
    this.updateToken = this.updateToken.bind(this);
    this.ensureLogin = this.ensureLogin.bind(this);
    this.ensureLoginNoLogin = this.ensureLoginNoLogin.bind(this);
    this.updateUserInfo = this.updateUserInfo.bind(this);
    this.loginByCode = this.loginByCode.bind(this);
    this.loginByPhone = this.loginByPhone.bind(this);
    this.setUpUserInfo = this.setUpUserInfo.bind(this);
    this.updatePhone = this.updatePhone.bind(this);
    this.clearUserInfo = this.clearUserInfo.bind(this);
    this.goToLogin = this.goToLogin.bind(this);
    this.ensureGetUserInfo = this.ensureGetUserInfo.bind(this);
    this.getOpenId = this.getOpenId.bind(this);
  }
  /**
   * 获取用户token
   * @returns {string}
   */


  _createClass(User, [{
    key: "getToken",
    value: function getToken() {
      return tokenManager.getToken(this.option.loginOption.getTokenOnUrl);
    }
    /**
     *  批量修改模块全局配置，使用merge
     * @param {option} option 模块全局配置
     */

  }, {
    key: "setOption",
    value: function setOption(option) {
      var baseOption = this.option;
      this.option = merge({}, baseOption, option);
    }
    /**
     * 更新用户token
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "updateToken",
    value: function updateToken() {
      var _this = this;

      var token = this.getToken();
      this.updateUserInfoPromise = new Promise(function (resolve, reject) {
        if (token) {
          _this.saveToken(token);

          _this.updateUserInfo(true).then(resolve)["catch"](function (err) {
            reject(err);
          });
        } else {
          if (baseFn.ua.isApp()) {
            hdp.execRequest('PluginNavigation', 'getToken', {}).then(function (res) {
              if (res) {
                _this.saveToken('Wwdz ' + res);

                _this.updateUserInfo(true).then(resolve)["catch"](function (err) {
                  console.log(err);
                  reject(err);
                });
              } else {
                var err = new Error('no token!');
                err.payload = {
                  code: 4001
                };
                reject(err);
              }
            })["catch"](function (err) {
              mySentry.logError(err);

              if (!err.payload) {
                err.payload = {
                  code: 4001
                };
              }

              reject(err);
            });
          } else {
            var err = new Error('no token!');
            err.payload = {
              code: 4001
            };
            reject(err);
          }
        }
      });
      return this.updateUserInfoPromise;
    }
    /**
     * 确保登录，未登录调用登录
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "ensureLogin",
    value: function ensureLogin() {
      var _this2 = this;

      if (this.getToken() || baseFn.ua.isApp()) {
        return this.updateUserInfoPromise["catch"](function (err) {
          if (err && err.payload && (err.payload.code === 4001 || err.payload.code === 301 || err.payload.code === 302)) {
            _this2.goToLogin();
          }

          return Promise.reject(err);
        });
      } else {
        this.goToLogin();
        return Promise.reject(new Error('未登录'));
      }
    }
    /**
     * 确保登录，未登录不调用登录
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "ensureLoginNoLogin",
    value: function ensureLoginNoLogin() {
      var userInfo = this.getUserInfo();

      if (this.getToken() || baseFn.ua.isApp()) {
        return this.updateUserInfoPromise;
      } else if (userInfo && userInfo.userId) {
        return Promise.resolve(userInfo);
      } else {
        return Promise.reject(new Error('未登录'));
      }
    }
    /**
     * 更新用户信息
     * @param {boolean} skipLogin 未登录是否要去登录
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "updateUserInfo",
    value: function () {
      var _updateUserInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this3 = this;

        var skipLogin,
            appMap,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                skipLogin = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
                _context.next = 3;
                return this.getWxAppMap();

              case 3:
                appMap = _context.sent;
                return _context.abrupt("return", kl_request.post('/user/queryMyInfo', {
                  type: appMap.appType || 4
                }, {
                  skipLogin: skipLogin
                }).then(function (userInfo) {
                  _this3.removeUserInfo();

                  _this3.saveUserInfo(userInfo);

                  baseMallLogger.initLogger();
                  return userInfo;
                })["catch"](function (error) {
                  console.log(error);

                  _this3.removeUserInfo();

                  return Promise.reject(error);
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function updateUserInfo() {
        return _updateUserInfo.apply(this, arguments);
      }

      return updateUserInfo;
    }()
    /**
     * 使用微信授权码登录
     * @param {number} code 微信授权码
     * @param {number} inviteCode 邀请码
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "loginByCode",
    value: function () {
      var _loginByCode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(code, inviteCode) {
        var appMap;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.clearUserInfo();
                _context2.next = 3;
                return this.getWxAppMap();

              case 3:
                appMap = _context2.sent;
                return _context2.abrupt("return", kl_request.post('/user/login/publicAccountLogin', _objectSpread({
                  code: code,
                  invitationCode: inviteCode,
                  source: baseFn.fn.getQueryString('source') || (baseFn.ua.isWechat() ? 'wx_h5' : 'h5'),
                  type: appMap.appType || 4
                }, this.option.loginOption.loginParams || {}), {
                  withoutToken: true,
                  fingerprint: true
                }).then(this.setUpUserInfo));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loginByCode(_x, _x2) {
        return _loginByCode.apply(this, arguments);
      }

      return loginByCode;
    }()
    /**
     * 手机号登录
     * @param {number} phone 手机号
     * @param {number} code 短信验证码
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "loginByPhone",
    value: function loginByPhone(phone, code) {
      var inviteCode = baseFn.fn.getQueryString('inviteCode'); // const { sig, csessionid } = nc_data;

      this.clearUserInfo();
      return kl_request.post('/user/login/noAcsPhoneLogin', _objectSpread({
        phone: phone,
        code: code,
        // token: nc_token,
        // sig,
        // sessionId: csessionid,
        invitationCode: inviteCode,
        source: baseFn.fn.getQueryString('source') || (baseFn.ua.isWechat() ? 'wx_h5' : 'h5')
      }, this.option.loginOption.loginParams || {}), {
        withoutToken: true,
        fingerprint: true
      }).then(this.setUpUserInfo);
    }
    /**
     * 校验并返回用户信息
     * @param {userInfo} userInfo 用户信息
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "setUpUserInfo",
    value: function () {
      var _setUpUserInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userInfo) {
        var token, newUserInfo;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // 通过邀请码或者手机号登录后，保存token以及设置登录用户信息
                token = userInfo.token;

                if (token) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", Promise.reject(new Error('登陆失败')));

              case 3:
                this.clearUserInfo();
                this.saveToken('Wwdz ' + token);
                _context3.next = 7;
                return this.updateUserInfo()["catch"](function (e) {
                  console.log(e);
                });

              case 7:
                newUserInfo = _context3.sent;

                if (newUserInfo) {
                  _context3.next = 10;
                  break;
                }

                return _context3.abrupt("return", Promise.reject(new Error('获取用户信息失败')));

              case 10:
                // this.saveUserInfo(userInfo);
                this.updateUserInfoPromise = Promise.resolve();
                return _context3.abrupt("return", newUserInfo);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function setUpUserInfo(_x3) {
        return _setUpUserInfo.apply(this, arguments);
      }

      return setUpUserInfo;
    }()
    /**
     * 获取微信公众号相关的配置
     * @returns {Promise<wxAppMap>}
     */

  }, {
    key: "getWxAppMap",
    value: function () {
      var _getWxAppMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var appIdMapList, domain;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return RC.getList(157);

              case 3:
                appIdMapList = _context4.sent;
                domain = location.hostname;
                return _context4.abrupt("return", appIdMapList.find(function (appIdMap) {
                  return appIdMap.domain === domain;
                }) || {});

              case 8:
                _context4.prev = 8;
                _context4.t0 = _context4["catch"](0);
                return _context4.abrupt("return", {});

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[0, 8]]);
      }));

      function getWxAppMap() {
        return _getWxAppMap.apply(this, arguments);
      }

      return getWxAppMap;
    }()
    /**
     * 获取微信公众号AppId
     * @returns {Promise<string>}
     */

  }, {
    key: "getWxAppId",
    value: function () {
      var _getWxAppId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var appIdMap;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getWxAppMap();

              case 2:
                appIdMap = _context5.sent;
                return _context5.abrupt("return", appIdMap.userAppId || appIdMap.appId || this.wxAppId);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getWxAppId() {
        return _getWxAppId.apply(this, arguments);
      }

      return getWxAppId;
    }()
    /**
     * 获取微信公众号类型
     * @returns {Promise<number>}
     */

  }, {
    key: "getWxAppType",
    value: function () {
      var _getWxAppType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var appIdMap;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getWxAppMap();

              case 2:
                appIdMap = _context6.sent;
                return _context6.abrupt("return", appIdMap.appType || 4);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getWxAppType() {
        return _getWxAppType.apply(this, arguments);
      }

      return getWxAppType;
    }()
    /**
     * 绑定手机号
     * @param {number} phone 手机号
     * @param {number} code 短信验证码
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "updatePhone",
    value: function () {
      var _updatePhone = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(phone, code) {
        var appMap;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.getWxAppMap();

              case 2:
                appMap = _context7.sent;
                return _context7.abrupt("return", kl_request.post('/user/bind/bindingPhone', {
                  type: baseFn.ua.isWechatMiniProgram() ? 2 : appMap.appType || 4,
                  phone: phone,
                  code: code,
                  userId: this.getUserInfo().userId
                }).then(this.setUpUserInfo));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function updatePhone(_x4, _x5) {
        return _updatePhone.apply(this, arguments);
      }

      return updatePhone;
    }()
    /**
     * 清除本地缓存中的用户信息和token
     */

  }, {
    key: "clearUserInfo",
    value: function clearUserInfo() {
      // 清除用户信息和token（用户信息存放在本地中）
      this.removeUserInfo();
      this.removeToken();
    }
    /**
     * 调用登录页面
     * @param {any} params 登录页参数
     * @returns {Promise<void>}
     */

  }, {
    key: "goToLogin",
    value: function () {
      var _goToLogin = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var params,
            _params$redirectUrl,
            redirectUrl,
            _this$option$loginOpt,
            loginOrigin,
            loginByPhoneUrl,
            wechatTransformUrl,
            xcxLoginUrl,
            appLoginUrl,
            wechatTransformUrlRedirect,
            redirectUrlEncodeForXcx,
            loginUrl,
            wxAppId,
            loginUrlObj,
            _loginUrlObj,
            _args8 = arguments;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                params = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                console.log('goToLogin');
                baseRequest.cancel();
                kl_request.cancel();
                setTimeout(function () {
                  kl_request.initSource();
                }, 100);
                console.log('cancel success'); // const protocol = this.option.loginOption.protocol || location.protocol;
                // const host = this.option.loginOption.host || location.host;
                // const prefix = this.option.loginOption.prefix || `${location.origin}/mall-web`;
                // const reg = new RegExp(`${location.origin}/mall-web`);
                // const redirectUrl = this.option.loginOption.redirectUrl || window.location.href.replace(reg, '');
                // const redirectUrlEncode = encodeURIComponent(redirectUrl);
                // const redirect_uri = getRouteLocation(`${protocol}//${host}/mall-web/user/transform`, { redirectUrl, ...params });
                // const redirect_uriEncode = encodeURIComponent(redirect_uri);

                _params$redirectUrl = params.redirectUrl, redirectUrl = _params$redirectUrl === void 0 ? window.location.href : _params$redirectUrl;
                _this$option$loginOpt = this.option.loginOption, loginOrigin = _this$option$loginOpt.loginOrigin, loginByPhoneUrl = _this$option$loginOpt.loginByPhoneUrl, wechatTransformUrl = _this$option$loginOpt.wechatTransformUrl, xcxLoginUrl = _this$option$loginOpt.xcxLoginUrl, appLoginUrl = _this$option$loginOpt.appLoginUrl;
                wechatTransformUrlRedirect = baseMallLogger.getRouteLocation(loginOrigin + wechatTransformUrl, _objectSpread({
                  redirectUrl: redirectUrl
                }, params));

                if (!(baseFn.ua.isWechatMiniProgram() || WxSdk._isMiniProgram)) {
                  _context8.next = 15;
                  break;
                }

                redirectUrlEncodeForXcx = redirectUrl;
                loginUrl = baseMallLogger.getRouteLocation(xcxLoginUrl, _objectSpread({
                  redirectUrl: redirectUrlEncodeForXcx
                }, params));
                WxSdk.wxMiniProgramNavigateTo(loginUrl);
                _context8.next = 37;
                break;

              case 15:
                if (!baseFn.ua.isApp()) {
                  _context8.next = 19;
                  break;
                }

                hdp.execRequest('PluginRouter', 'jumpApp', {
                  linkUrl: appLoginUrl
                })["catch"](mySentry.logError); // } else if (ua.isWechat() && /^http(s)?:\/\/h5\.wanwudezhi\.com/.test(location.origin)) {

                _context8.next = 37;
                break;

              case 19:
                if (!(baseFn.ua.isWechat() && location.host !== 'dev-h5.wanwudezhi.com')) {
                  _context8.next = 34;
                  break;
                }

                _context8.prev = 20;
                _context8.next = 23;
                return this.getWxAppId();

              case 23:
                wxAppId = _context8.sent;
                _context8.next = 29;
                break;

              case 26:
                _context8.prev = 26;
                _context8.t0 = _context8["catch"](20);
                wxAppId = 'wxb2de1255783f7c70';

              case 29:
                // const loginUrl = `https://open.weixin.qq.com/connect/oauth2/authorize?appid=${wxAppId || 'wxb2de1255783f7c70'}&redirect_uri=${redirect_uriEncode}&response_type=code&scope=snsapi_userinfo&state=loginFormWechat#wechat_redirect`;
                loginUrlObj = {
                  origin: 'https://open.weixin.qq.com',
                  path: '/connect/oauth2/authorize',
                  query: {
                    appid: wxAppId || 'wxb2de1255783f7c70',
                    redirect_uri: wechatTransformUrlRedirect,
                    response_type: 'code',
                    scope: 'snsapi_userinfo',
                    state: 'loginFormWechat'
                  },
                  hash: 'wechat_redirect'
                };
                baseLogger.logE('dialogShow', {
                  title: '微信授权'
                });

                if (baseFn.ua.isWeibo()) {
                  wLocation.push(loginUrlObj, false);
                } else {
                  wLocation.replace(loginUrlObj, false);
                }

                _context8.next = 37;
                break;

              case 34:
                console.log('in location push');
                _loginUrlObj = {
                  path: loginOrigin + loginByPhoneUrl,
                  query: _objectSpread({
                    redirectUrl: redirectUrl,
                    type: 'login'
                  }, params)
                };

                if (baseFn.ua.isWeibo()) {
                  wLocation.push(_loginUrlObj, false);
                } else {
                  wLocation.replace(_loginUrlObj, false);
                }

              case 37:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[20, 26]]);
      }));

      function goToLogin() {
        return _goToLogin.apply(this, arguments);
      }

      return goToLogin;
    }() // goToPhoneLogin() {
    //     const protocol = location.protocol;
    //     const host = location.host;
    //     const prefix = `${protocol}//${host}/sale-web`;
    //     const redirectUrl = window.location.href.replace(prefix, '');
    //     const redirectUrlEncode = encodeURIComponent(redirectUrl);
    //     window.$saleLocation.replace(getRouteLocation(`${prefix}/user/bindPhone?redirectUrl=${redirectUrlEncode}&type=login`));
    // },

    /**
     * 获取openId
     * @returns {string|null}
     */

  }, {
    key: "getOpenId",
    value: function getOpenId() {
      var userInfo = this.getUserInfo();
      var openId = userInfo.openId;

      if (openId) {
        return openId;
      } else if (baseFn.ua.isWechat()) {
        this.goToLogin();
      } else {
        return null;
      }
    }
    /**
     * 保存用户信息
     * @param {userInfo} userInfo 用户信息
     */

  }, {
    key: "saveUserInfo",
    value: function saveUserInfo() {
      var userInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      userInfo.inviteCode = userInfo.invitationCode;
      userInfo.isPlayer = userInfo.userPlayerLevel >= 3;
      localStorage.setItem(Config.StorageUserInfoKey, JSON.stringify(userInfo));
    }
    /**
     * 获取用户信息
     * @returns {userInfo}
     */

  }, {
    key: "getUserInfo",
    value: function getUserInfo() {
      var userInfoStr = localStorage.getItem(Config.StorageUserInfoKey) || '{}';
      return JSON.parse(userInfoStr);
    }
    /**
     * 异步的确保获取到用户信息（异步时序问题，不会强制调登录）
     * @returns {Promise<userInfo>}
     */

  }, {
    key: "ensureGetUserInfo",
    value: function () {
      var _ensureGetUserInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!this.getToken()) {
                  _context9.next = 3;
                  break;
                }

                _context9.next = 3;
                return this.updateUserInfoPromise;

              case 3:
                return _context9.abrupt("return", this.getUserInfo());

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function ensureGetUserInfo() {
        return _ensureGetUserInfo.apply(this, arguments);
      }

      return ensureGetUserInfo;
    }()
    /**
     * 删除用户信息缓存
     */

  }, {
    key: "removeUserInfo",
    value: function removeUserInfo() {
      localStorage.removeItem(Config.StorageUserInfoKey);
    }
    /**
     * 登录页面回跳方法
     */

  }, {
    key: "redirectBack",
    value: function redirectBack() {
      var redirectUrl = baseFn.fn.getQueryString('redirectUrl');

      if (redirectUrl) {
        var needToken;

        try {
          var redirectUrlObj = new URL(redirectUrl);
          needToken = !new RegExp("(^/|^".concat(window.location.origin, "|.wanwudezhi.com)")).test(redirectUrlObj.origin);
        } catch (error) {
          needToken = !new RegExp('^/').test(redirectUrl);
        }

        wLocation.replace({
          path: redirectUrl,
          query: needToken ? {
            token: this.getToken()
          } : {}
        }, false);
      } else {
        wLocation.push({
          base: '/mall-web',
          path: '/home/index'
        }, false);
      }
    }
  }]);

  return User;
}();
/** {User} 默认导出用户模块实例 */

var index = new User();

exports.User = User;
exports.default = index;
