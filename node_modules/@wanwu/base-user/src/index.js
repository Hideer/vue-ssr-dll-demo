/**
 * Create by fenghe on 2019-12-23 14:52
 */
/**
 * 用户方法集
 * @module User
 */
/**
 * 用户模块配置选项
 * @typedef {Object} option
 * @property {Function} onError 错误时的同一处理函数
 * @property {Object} loginOption 登录配置
 * @property {string} loginOption.loginOrigin 登录跳转对应的域名，默认值为` window.location.origin`
 * @property {string} loginOption.loginByPhoneUrl 手机号登录跳转对应的链接，默认值为`'/mall-web/user/bindPhone'`
 * @property {string} loginOption.wechatTransformUrl 微信登录回跳地址url，默认值为`'/mall-web/user/transform'`
 * @property {string} loginOption.xcxLoginUrl 微信小程序登录url，默认值为`'/pages/user/login'`
 * @property {string} loginOption.appLoginUrl 客户端登录url，默认值为`'zdwh://wwdz/login'`
 * @property {Object} loginOption.loginParams 登陆接口请求参数
 * @property {boolean} loginOption.getTokenOnUrl 是否从url上获取token，默认值为`false`
 */

/**
  * 用户信息
  * @typedef {Object} userInfo
  */

/**
 * 微信公众号配置信息
 * @typedef {Object} wxAppMap
 * @property {string} domain 域名
 * @property {string} appId 公众号appId
 * @property {string} userAppId 用户登录用appId
 * @property {number} appType 公众号类型
 */
import { fn, ua } from '@wanwu/base-fn';
import { getRouteLocation, initLogger } from '@wanwu/base-mall-logger';
import hdp from '@wanwu/hdp';
import wLocation from '@wanwu/w-location';
import mySentry from '@wanwu/sentry';
import Config from '@wanwu/mall-web-config';
import request, { cancel } from '@wanwu/base-request';
import * as tokenManager from '@wanwu/base-sdk-token-manager';
import kl_request from '@wanwu/http-request';
import merge from 'lodash.merge';
import WxSdk from '@wanwu/wx-sdk';
import RC from '@wanwu/resource-center';
import { logE } from '@wanwu/base-logger';
export class User {
    /**
     * 用户相关方法集
     */
    constructor() {
        /** @property { option } 模块全局配置 */
        this.option = {
            onError: error => mySentry.logError(error),
            loginOption: {
                // loginOrigin: 'https://h5.wanwudezhi.com',
                loginOrigin: window.location.origin,
                loginByPhoneUrl: '/mall-web/user/bindPhone',
                wechatTransformUrl: '/mall-web/user/transform',
                xcxLoginUrl: '/pages/user/login',
                getTokenOnUrl: false,
                appLoginUrl: 'zdwh://wwdz/login',
                loginParams: {},
            },
        };
        // token管理方法从request里面引入
        this.saveToken = tokenManager.saveToken;
        this.removeToken = tokenManager.removeToken;

        this.updateToken = this.updateToken.bind(this);
        this.ensureLogin = this.ensureLogin.bind(this);
        this.ensureLoginNoLogin = this.ensureLoginNoLogin.bind(this);
        this.updateUserInfo = this.updateUserInfo.bind(this);
        this.loginByCode = this.loginByCode.bind(this);
        this.loginByPhone = this.loginByPhone.bind(this);
        this.setUpUserInfo = this.setUpUserInfo.bind(this);
        this.updatePhone = this.updatePhone.bind(this);
        this.clearUserInfo = this.clearUserInfo.bind(this);
        this.goToLogin = this.goToLogin.bind(this);
        this.ensureGetUserInfo = this.ensureGetUserInfo.bind(this);
        this.getOpenId = this.getOpenId.bind(this);
    }

    /**
     * 获取用户token
     * @returns {string}
     */
    getToken() {
        return tokenManager.getToken(this.option.loginOption.getTokenOnUrl);
    }

    /**
     *  批量修改模块全局配置，使用merge
     * @param {option} option 模块全局配置
     */
    setOption(option) {
        const baseOption = this.option;
        this.option = merge({}, baseOption, option);
    }

    /**
     * 更新用户token
     * @returns {Promise<userInfo>}
     */
    updateToken() {
        const token = this.getToken();
        this.updateUserInfoPromise = new Promise((resolve, reject) => {
            if (token) {
                this.saveToken(token);
                this.updateUserInfo(true).then(resolve).catch(err => {
                    reject(err);
                });
            } else {
                if (ua.isApp()) {
                    hdp.execRequest('PluginNavigation', 'getToken', {}).then(res => {
                        if (res) {
                            this.saveToken('Wwdz ' + res);
                            this.updateUserInfo(true).then(resolve).catch(err => {
                                console.log(err);
                                reject(err);
                            });
                        } else {
                            const err = new Error('no token!');
                            err.payload = {
                                code: 4001,
                            };
                            reject(err);
                        }
                    }).catch(err => {
                        mySentry.logError(err);
                        if (!err.payload) {
                            err.payload = {
                                code: 4001,
                            };
                        }
                        reject(err);
                    });
                } else {
                    const err = new Error('no token!');
                    err.payload = {
                        code: 4001,
                    };
                    reject(err);
                }
            }
        });
        return this.updateUserInfoPromise;
    }

    /**
     * 确保登录，未登录调用登录
     * @returns {Promise<userInfo>}
     */
    ensureLogin() {
        if (this.getToken() || ua.isApp()) {
            return this.updateUserInfoPromise.catch(err => {
                if (err && err.payload && (err.payload.code === 4001 || err.payload.code === 301 || err.payload.code === 302)) {
                    this.goToLogin();
                }
                return Promise.reject(err);
            });
        } else {
            this.goToLogin();
            return Promise.reject(new Error('未登录'));
        }
    }

    /**
     * 确保登录，未登录不调用登录
     * @returns {Promise<userInfo>}
     */
    ensureLoginNoLogin() {
        const userInfo = this.getUserInfo();
        if (this.getToken() || ua.isApp()) {
            return this.updateUserInfoPromise;
        } else if (userInfo && userInfo.userId) {
            return Promise.resolve(userInfo);
        } else {
            return Promise.reject(new Error('未登录'));
        }
    }

    /**
     * 更新用户信息
     * @param {boolean} skipLogin 未登录是否要去登录
     * @returns {Promise<userInfo>}
     */
    async updateUserInfo(skipLogin = false) {
        const appMap = await this.getWxAppMap();
        return kl_request.post('/user/queryMyInfo', {
            type: appMap.appType || 4,
        }, { skipLogin }).then((userInfo) => {
            this.removeUserInfo();
            this.saveUserInfo(userInfo);
            initLogger();
            return userInfo;
        }).catch(error => {
            console.log(error);
            this.removeUserInfo();
            return Promise.reject(error);
        });
    }

    /**
     * 使用微信授权码登录
     * @param {number} code 微信授权码
     * @param {number} inviteCode 邀请码
     * @returns {Promise<userInfo>}
     */
    async loginByCode(code, inviteCode) {
        this.clearUserInfo();
        const appMap = await this.getWxAppMap();
        return kl_request.post('/user/login/publicAccountLogin', {
            code,
            invitationCode: inviteCode,
            source: fn.getQueryString('source') || (ua.isWechat() ? 'wx_h5' : 'h5'),
            type: appMap.appType || 4,
            ...(this.option.loginOption.loginParams || {}),
        }, {
            withoutToken: true,
            fingerprint: true,
        }).then(this.setUpUserInfo);
    }

    /**
     * 手机号登录
     * @param {number} phone 手机号
     * @param {number} code 短信验证码
     * @returns {Promise<userInfo>}
     */
    loginByPhone(phone, code) {
        const inviteCode = fn.getQueryString('inviteCode');
        // const { sig, csessionid } = nc_data;
        this.clearUserInfo();
        return kl_request.post('/user/login/noAcsPhoneLogin', {
            phone,
            code,
            // token: nc_token,
            // sig,
            // sessionId: csessionid,
            invitationCode: inviteCode,
            source: fn.getQueryString('source') || (ua.isWechat() ? 'wx_h5' : 'h5'),
            ...(this.option.loginOption.loginParams || {}),
        }, {
            withoutToken: true,
            fingerprint: true,
        }).then(this.setUpUserInfo);
    }

    /**
     * 校验并返回用户信息
     * @param {userInfo} userInfo 用户信息
     * @returns {Promise<userInfo>}
     */
    async setUpUserInfo(userInfo) {
        // 通过邀请码或者手机号登录后，保存token以及设置登录用户信息
        const { token } = userInfo;
        if (!token) {
            return Promise.reject(new Error('登陆失败'));
        }
        this.clearUserInfo();
        this.saveToken('Wwdz ' + token);

        const newUserInfo = await this.updateUserInfo().catch(e => {
            console.log(e);
        });
        if (!newUserInfo) {
            return Promise.reject(new Error('获取用户信息失败'));
        }
        // this.saveUserInfo(userInfo);
        this.updateUserInfoPromise = Promise.resolve();
        return newUserInfo;
    }

    /**
     * 获取微信公众号相关的配置
     * @returns {Promise<wxAppMap>}
     */
    async getWxAppMap() {
        try {
            const appIdMapList = await RC.getList(157);
            const domain = location.hostname;
            return appIdMapList.find((appIdMap) => {
                return appIdMap.domain === domain;
            }) || {};
        } catch (e) {
            return {};
        }
    }

    /**
     * 获取微信公众号AppId
     * @returns {Promise<string>}
     */
    async getWxAppId() {
        const appIdMap = await this.getWxAppMap();
        return appIdMap.userAppId || appIdMap.appId || this.wxAppId;
    }

    /**
     * 获取微信公众号类型
     * @returns {Promise<number>}
     */
    async getWxAppType() {
        const appIdMap = await this.getWxAppMap();
        return appIdMap.appType || 4;
    }

    /**
     * 绑定手机号
     * @param {number} phone 手机号
     * @param {number} code 短信验证码
     * @returns {Promise<userInfo>}
     */
    async updatePhone(phone, code) {
        const appMap = await this.getWxAppMap();
        // 绑定手机号
        return kl_request.post('/user/bind/bindingPhone', {
            type: ua.isWechatMiniProgram() ? 2 : (appMap.appType || 4),
            phone,
            code,
            userId: this.getUserInfo().userId,
        }).then(this.setUpUserInfo);
    }

    /**
     * 清除本地缓存中的用户信息和token
     */
    clearUserInfo() {
        // 清除用户信息和token（用户信息存放在本地中）
        this.removeUserInfo();
        this.removeToken();
    }

    /**
     * 调用登录页面
     * @param {any} params 登录页参数
     * @returns {Promise<void>}
     */
    async goToLogin(params = {}) {
        console.log('goToLogin')
        cancel();
        kl_request.cancel();
        setTimeout(() => {
            kl_request.initSource();
        }, 100);  
        console.log('cancel success')
        // const protocol = this.option.loginOption.protocol || location.protocol;
        // const host = this.option.loginOption.host || location.host;
        // const prefix = this.option.loginOption.prefix || `${location.origin}/mall-web`;
        // const reg = new RegExp(`${location.origin}/mall-web`);
        // const redirectUrl = this.option.loginOption.redirectUrl || window.location.href.replace(reg, '');
        // const redirectUrlEncode = encodeURIComponent(redirectUrl);
        // const redirect_uri = getRouteLocation(`${protocol}//${host}/mall-web/user/transform`, { redirectUrl, ...params });

        // const redirect_uriEncode = encodeURIComponent(redirect_uri);
        const { redirectUrl = window.location.href } = params;
        const { loginOrigin, loginByPhoneUrl, wechatTransformUrl, xcxLoginUrl, appLoginUrl } = this.option.loginOption;
        const wechatTransformUrlRedirect = getRouteLocation(loginOrigin + wechatTransformUrl, {
            redirectUrl,
            ...params,
        });
        if (ua.isWechatMiniProgram() || WxSdk._isMiniProgram) {
            const redirectUrlEncodeForXcx = redirectUrl;
            const loginUrl = getRouteLocation(xcxLoginUrl, { redirectUrl: redirectUrlEncodeForXcx, ...params });
            WxSdk.wxMiniProgramNavigateTo(loginUrl);
        } else if (ua.isApp()) {
            hdp.execRequest('PluginRouter', 'jumpApp', {
                linkUrl: appLoginUrl,
            }).catch(mySentry.logError);
            // } else if (ua.isWechat() && /^http(s)?:\/\/h5\.wanwudezhi\.com/.test(location.origin)) {
        } else if (ua.isWechat() && location.host !== 'dev-h5.wanwudezhi.com') {
            let wxAppId;
            try {
                wxAppId = await this.getWxAppId();
            } catch (err) {
                wxAppId = 'wxb2de1255783f7c70';
            }
            // const loginUrl = `https://open.weixin.qq.com/connect/oauth2/authorize?appid=${wxAppId || 'wxb2de1255783f7c70'}&redirect_uri=${redirect_uriEncode}&response_type=code&scope=snsapi_userinfo&state=loginFormWechat#wechat_redirect`;
            const loginUrlObj = {
                origin: 'https://open.weixin.qq.com',
                path: '/connect/oauth2/authorize',
                query: {
                    appid: wxAppId || 'wxb2de1255783f7c70',
                    redirect_uri: wechatTransformUrlRedirect,
                    response_type: 'code',
                    scope: 'snsapi_userinfo',
                    state: 'loginFormWechat',
                },
                hash: 'wechat_redirect',
            };
            logE('dialogShow', {
                title: '微信授权',
            });
            if (ua.isWeibo()) {
                wLocation.push(loginUrlObj, false);
            } else {
                wLocation.replace(loginUrlObj, false);
            }
        } else {
            console.log('in location push')
            const loginUrlObj = {
                path: loginOrigin + loginByPhoneUrl,
                query: {
                    redirectUrl,
                    type: 'login',
                    ...params,
                },
            };
            if (ua.isWeibo()) {
                wLocation.push(loginUrlObj, false);
            } else {
                wLocation.replace(loginUrlObj, false);
            }
        }
    }

    // goToPhoneLogin() {
    //     const protocol = location.protocol;
    //     const host = location.host;
    //     const prefix = `${protocol}//${host}/sale-web`;
    //     const redirectUrl = window.location.href.replace(prefix, '');
    //     const redirectUrlEncode = encodeURIComponent(redirectUrl);
    //     window.$saleLocation.replace(getRouteLocation(`${prefix}/user/bindPhone?redirectUrl=${redirectUrlEncode}&type=login`));
    // },

    /**
     * 获取openId
     * @returns {string|null}
     */
    getOpenId() {
        const userInfo = this.getUserInfo();
        const openId = userInfo.openId;
        if (openId) {
            return openId;
        } else if (ua.isWechat()) {
            this.goToLogin();
        } else {
            return null;
        }
    }

    /**
     * 保存用户信息
     * @param {userInfo} userInfo 用户信息
     */
    saveUserInfo(userInfo = {}) {
        userInfo.inviteCode = userInfo.invitationCode;
        userInfo.isPlayer = userInfo.userPlayerLevel >= 3;

        localStorage.setItem(
            Config.StorageUserInfoKey,
            JSON.stringify(userInfo),
        );
    }

    /**
     * 获取用户信息
     * @returns {userInfo}
     */
    getUserInfo() {
        const userInfoStr =
            localStorage.getItem(Config.StorageUserInfoKey) || '{}';
        return JSON.parse(userInfoStr);
    }

    /**
     * 异步的确保获取到用户信息（异步时序问题，不会强制调登录）
     * @returns {Promise<userInfo>}
     */
    async ensureGetUserInfo() {
        if (this.getToken()) {
            await this.updateUserInfoPromise;
        }
        return this.getUserInfo();
    }

    /**
     * 删除用户信息缓存
     */
    removeUserInfo() {
        localStorage.removeItem(Config.StorageUserInfoKey);
    }

    /**
     * 登录页面回跳方法
     */
    redirectBack() {
        const redirectUrl = fn.getQueryString('redirectUrl');
        if (redirectUrl) {
            let needToken;
            try {
                const redirectUrlObj = new URL(redirectUrl);
                needToken = !new RegExp(`(^/|^${window.location.origin}|.wanwudezhi.com)`).test(redirectUrlObj.origin);
            } catch (error) {
                needToken = !new RegExp('^/').test(redirectUrl);
            }
            wLocation.replace({
                path: redirectUrl,
                query: needToken ? {
                    token: this.getToken(),
                } : {},
            }, false);
        } else {
            wLocation.push({
                base: '/mall-web',
                path: '/home/index',
            }, false);
        }
    }
}
/** {User} 默认导出用户模块实例 */
export default new User();
