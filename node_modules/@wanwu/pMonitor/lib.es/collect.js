// 资源超时时间
const SEC = 1000;
const TIMEOUT = 10 * SEC;
// 过大的资源
const BIG_SIZE = 244 * 1024;
// @ts-ignore
const performanceHasGetEntriesByType = performance.__proto__.getEntriesByType;
let pageNav = {};
// 解决ios内部递归考虑不全的问题,ios10 以下不存在getEntriesByType方法
if (performanceHasGetEntriesByType && performance.getEntriesByType('navigation')[0]) {
    pageNav = performance.getEntriesByType('navigation')[0];
}
else {
    pageNav = performance.timing;
}
const setTime = (limit = TIMEOUT) => time => time >= limit;
const getLoadTime = ({ startTime, responseEnd }) => responseEnd - startTime;
const getName = ({ name }) => name;
const setResSize = (limit = BIG_SIZE) => size => size >= limit;
// 获取所有资源的大小
const resourceSize = [];
function getResourceSizes(perfEntry) {
    // Check for support of the *size properties and print their values
    if ('transferSize' in perfEntry) {
        const { name, transferSize } = perfEntry;
        resourceSize.push({ name, transferSize });
    }
    else {
        console.log('transferSize = NOT supported');
    }
}
// 检查performanceEntries 属性
function check_PerformanceEntries() {
    // Use getEntriesByType() to just get the "resource" events
    const p = performance.getEntriesByType('resource');
    for (var i = 0; i < p.length; i++) {
        getResourceSizes(p[i]);
    }
}
// 页面加载时间
export function getDomCompleteTime() {
    // @ts-ignore
    const { domComplete } = pageNav;
    return domComplete;
}
// 超时的资源请求
export function getTimeoutRes(limit = TIMEOUT) {
    if (performanceHasGetEntriesByType) {
        const isTimeout = setTime(limit);
        const resourceTimes = performance.getEntriesByType('resource');
        //@ts-ignore
        return resourceTimes.filter(item => isTimeout(getLoadTime(item)))
            .map(getName);
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
// 页面请求的总的资源数量
export function getResourceNum() {
    if (performanceHasGetEntriesByType) {
        const resource = performance.getEntriesByType('resource');
        return resource.length;
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
// 页面请求的资源大小
export function getBigResource(limit = BIG_SIZE) {
    if (performanceHasGetEntriesByType) {
        check_PerformanceEntries();
        const isBigSize = setResSize(limit);
        return resourceSize.filter(item => isBigSize(item.transferSize))
            .map(getName);
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
// Performance Memory
export function getMemory() {
    const memory = {};
    // @ts-ignore
    if (performance.memory && Object.keys(performance.memory).length > 0) {
        // @ts-ignore
        const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = performance.memory;
        // @ts-ignore
        memory.jsHeapSizeLimit = jsHeapSizeLimit;
        // @ts-ignore
        memory.totalJSHeapSize = totalJSHeapSize;
        // @ts-ignore
        memory.usedJSHeapSize = usedJSHeapSize;
        return { memory };
    }
    else {
        return {};
    }
}
// Measuring DNS lookup time
export function getDnsTime() {
    //@ts-ignore
    const { domainLookupEnd, domainLookupStart } = pageNav;
    const dnsTime = domainLookupEnd - domainLookupStart;
    return dnsTime;
}
// Connection
export function getConnectionTime() {
    //@ts-ignore
    const { connectEnd, connectStart } = pageNav;
    const connectionTime = connectEnd - connectStart;
    return connectionTime;
}
// Request plus response time (network only)
export function getResponseTime() {
    //@ts-ignore
    const { responseEnd, requestStart } = pageNav;
    const responsesTime = responseEnd - requestStart;
    return responsesTime;
}
// Response time only (download)
export function getDownloadTime() {
    //@ts-ignore
    const { responseEnd, responseStart } = pageNav;
    const downloadTime = responseEnd - responseStart;
    return downloadTime;
}
// Time to First Byte (TTFB)
export function getTTFB() {
    //@ts-ignore
    const { responseStart, requestStart } = pageNav;
    const TTFB = responseStart - requestStart;
    return TTFB;
}
