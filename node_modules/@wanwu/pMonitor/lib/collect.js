"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 资源超时时间
var SEC = 1000;
var TIMEOUT = 10 * SEC;
// 过大的资源
var BIG_SIZE = 244 * 1024;
// @ts-ignore
var performanceHasGetEntriesByType = performance.__proto__.getEntriesByType;
var pageNav = {};
// 解决ios内部递归考虑不全的问题,ios10 以下不存在getEntriesByType方法
if (performanceHasGetEntriesByType && performance.getEntriesByType('navigation')[0]) {
    pageNav = performance.getEntriesByType('navigation')[0];
}
else {
    pageNav = performance.timing;
}
var setTime = function (limit) {
    if (limit === void 0) { limit = TIMEOUT; }
    return function (time) { return time >= limit; };
};
var getLoadTime = function (_a) {
    var startTime = _a.startTime, responseEnd = _a.responseEnd;
    return responseEnd - startTime;
};
var getName = function (_a) {
    var name = _a.name;
    return name;
};
var setResSize = function (limit) {
    if (limit === void 0) { limit = BIG_SIZE; }
    return function (size) { return size >= limit; };
};
// 获取所有资源的大小
var resourceSize = [];
function getResourceSizes(perfEntry) {
    // Check for support of the *size properties and print their values
    if ('transferSize' in perfEntry) {
        var name_1 = perfEntry.name, transferSize = perfEntry.transferSize;
        resourceSize.push({ name: name_1, transferSize: transferSize });
    }
    else {
        console.log('transferSize = NOT supported');
    }
}
// 检查performanceEntries 属性
function check_PerformanceEntries() {
    // Use getEntriesByType() to just get the "resource" events
    var p = performance.getEntriesByType('resource');
    for (var i = 0; i < p.length; i++) {
        getResourceSizes(p[i]);
    }
}
// 页面加载时间
function getDomCompleteTime() {
    // @ts-ignore
    var domComplete = pageNav.domComplete;
    return domComplete;
}
exports.getDomCompleteTime = getDomCompleteTime;
// 超时的资源请求
function getTimeoutRes(limit) {
    if (limit === void 0) { limit = TIMEOUT; }
    if (performanceHasGetEntriesByType) {
        var isTimeout_1 = setTime(limit);
        var resourceTimes = performance.getEntriesByType('resource');
        //@ts-ignore
        return resourceTimes.filter(function (item) { return isTimeout_1(getLoadTime(item)); })
            .map(getName);
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
exports.getTimeoutRes = getTimeoutRes;
// 页面请求的总的资源数量
function getResourceNum() {
    if (performanceHasGetEntriesByType) {
        var resource = performance.getEntriesByType('resource');
        return resource.length;
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
exports.getResourceNum = getResourceNum;
// 页面请求的资源大小
function getBigResource(limit) {
    if (limit === void 0) { limit = BIG_SIZE; }
    if (performanceHasGetEntriesByType) {
        check_PerformanceEntries();
        var isBigSize_1 = setResSize(limit);
        return resourceSize.filter(function (item) { return isBigSize_1(item.transferSize); })
            .map(getName);
    }
    else {
        return '该浏览器不支持getEntriesByType方法';
    }
}
exports.getBigResource = getBigResource;
// Performance Memory
function getMemory() {
    var memory = {};
    // @ts-ignore
    if (performance.memory && Object.keys(performance.memory).length > 0) {
        // @ts-ignore
        var _a = performance.memory, jsHeapSizeLimit = _a.jsHeapSizeLimit, totalJSHeapSize = _a.totalJSHeapSize, usedJSHeapSize = _a.usedJSHeapSize;
        // @ts-ignore
        memory.jsHeapSizeLimit = jsHeapSizeLimit;
        // @ts-ignore
        memory.totalJSHeapSize = totalJSHeapSize;
        // @ts-ignore
        memory.usedJSHeapSize = usedJSHeapSize;
        return { memory: memory };
    }
    else {
        return {};
    }
}
exports.getMemory = getMemory;
// Measuring DNS lookup time
function getDnsTime() {
    //@ts-ignore
    var domainLookupEnd = pageNav.domainLookupEnd, domainLookupStart = pageNav.domainLookupStart;
    var dnsTime = domainLookupEnd - domainLookupStart;
    return dnsTime;
}
exports.getDnsTime = getDnsTime;
// Connection
function getConnectionTime() {
    //@ts-ignore
    var connectEnd = pageNav.connectEnd, connectStart = pageNav.connectStart;
    var connectionTime = connectEnd - connectStart;
    return connectionTime;
}
exports.getConnectionTime = getConnectionTime;
// Request plus response time (network only)
function getResponseTime() {
    //@ts-ignore
    var responseEnd = pageNav.responseEnd, requestStart = pageNav.requestStart;
    var responsesTime = responseEnd - requestStart;
    return responsesTime;
}
exports.getResponseTime = getResponseTime;
// Response time only (download)
function getDownloadTime() {
    //@ts-ignore
    var responseEnd = pageNav.responseEnd, responseStart = pageNav.responseStart;
    var downloadTime = responseEnd - responseStart;
    return downloadTime;
}
exports.getDownloadTime = getDownloadTime;
// Time to First Byte (TTFB)
function getTTFB() {
    //@ts-ignore
    var responseStart = pageNav.responseStart, requestStart = pageNav.requestStart;
    var TTFB = responseStart - requestStart;
    return TTFB;
}
exports.getTTFB = getTTFB;
