import Vue from 'vue';

const MIN_DISTANCE = 10;

function getDirection(x, y) {
    if (x > y && x > MIN_DISTANCE) {
        return 'horizontal';
    }

    if (y > x && y > MIN_DISTANCE) {
        return 'vertical';
    }

    return '';
}

export const TouchMixin = Vue.extend({
    data() {
        return {
            startX: 0,
            startY: 0,
            deltaX: 0,
            deltaY: 0,
            offsetX: 0,
            offsetY: 0,
            direction: '',
        };
    },

    methods: {
        touchStart(event) {
            this.resetTouchStatus();
            this.startX = event.touches[0].clientX;
            this.startY = event.touches[0].clientY;
        },

        touchMove(event) {
            const touch = event.touches[0];
            this.deltaX = touch.clientX - this.startX;
            this.deltaY = touch.clientY - this.startY;
            this.offsetX = Math.abs(this.deltaX);
            this.offsetY = Math.abs(this.deltaY);
            this.direction =
                this.direction || getDirection(this.offsetX, this.offsetY);
        },

        resetTouchStatus() {
            this.direction = '';
            this.deltaX = 0;
            this.deltaY = 0;
            this.offsetX = 0;
            this.offsetY = 0;
        },
        on(
            target,
            event,
            handler,
            passive,
        ) {
            let supportsPassive = false;
            try {
                const opts = {};
                Object.defineProperty(opts, 'passive', {
                    // eslint-disable-next-line getter-return
                    get() {
                        supportsPassive = true;
                    },
                });
                window.addEventListener('test-passive', null, opts);
                // eslint-disable-next-line no-empty
            } catch (e) {}
            target.addEventListener(
                event,
                handler,
                supportsPassive ? {
                    capture: false,
                    passive,
                } : false,
            );
        },
        bindTouchEvent(el) {
            const {
                onTouchStart,
                onTouchMove,
                onTouchEnd,
            } = this;
            this.on(el, 'touchstart', onTouchStart);
            this.on(el, 'touchmove', onTouchMove);

            if (onTouchEnd) {
                this.on(el, 'touchend', onTouchEnd);
                this.on(el, 'touchcancel', onTouchEnd);
            }
        },
    },
});