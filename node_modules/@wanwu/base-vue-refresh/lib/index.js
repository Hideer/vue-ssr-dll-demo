'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.function.name');
require('core-js/modules/es.array.index-of');
require('core-js/modules/es.number.constructor');
require('core-js/modules/web.timers');
require('core-js/modules/es.object.define-property');
var Vue = _interopDefault(require('vue'));
var baseFn = require('@wanwu/base-fn');
var vueRuntimeHelpers = require('@wanwu/vue-runtime-helpers');

var MIN_DISTANCE = 10;

function getDirection(x, y) {
  if (x > y && x > MIN_DISTANCE) {
    return 'horizontal';
  }

  if (y > x && y > MIN_DISTANCE) {
    return 'vertical';
  }

  return '';
}

var TouchMixin = Vue.extend({
  data: function data() {
    return {
      startX: 0,
      startY: 0,
      deltaX: 0,
      deltaY: 0,
      offsetX: 0,
      offsetY: 0,
      direction: ''
    };
  },
  methods: {
    touchStart: function touchStart(event) {
      this.resetTouchStatus();
      this.startX = event.touches[0].clientX;
      this.startY = event.touches[0].clientY;
    },
    touchMove: function touchMove(event) {
      var touch = event.touches[0];
      this.deltaX = touch.clientX - this.startX;
      this.deltaY = touch.clientY - this.startY;
      this.offsetX = Math.abs(this.deltaX);
      this.offsetY = Math.abs(this.deltaY);
      this.direction = this.direction || getDirection(this.offsetX, this.offsetY);
    },
    resetTouchStatus: function resetTouchStatus() {
      this.direction = '';
      this.deltaX = 0;
      this.deltaY = 0;
      this.offsetX = 0;
      this.offsetY = 0;
    },
    on: function on(target, event, handler, passive) {
      var supportsPassive = false;

      try {
        var opts = {};
        Object.defineProperty(opts, 'passive', {
          // eslint-disable-next-line getter-return
          get: function get() {
            supportsPassive = true;
          }
        });
        window.addEventListener('test-passive', null, opts); // eslint-disable-next-line no-empty
      } catch (e) {}

      target.addEventListener(event, handler, supportsPassive ? {
        capture: false,
        passive: passive
      } : false);
    },
    bindTouchEvent: function bindTouchEvent(el) {
      var onTouchStart = this.onTouchStart,
          onTouchMove = this.onTouchMove,
          onTouchEnd = this.onTouchEnd;
      this.on(el, 'touchstart', onTouchStart);
      this.on(el, 'touchmove', onTouchMove);

      if (onTouchEnd) {
        this.on(el, 'touchend', onTouchEnd);
        this.on(el, 'touchcancel', onTouchEnd);
      }
    }
  }
});

var DEFAULT_HEAD_HEIGHT = 60;
var TEXT_STATUS = ['pulling', 'loosing'];
var script = {
  name: 'Refresh',
  mixins: [TouchMixin],
  props: {
    refreshStyle: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    stateImgKey: String,
    disabled: Boolean,
    successText: String,
    pullingText: String,
    loosingText: String,
    loadingText: String,
    value: {
      type: Boolean,
      required: true
    },
    successDuration: {
      type: [Number, String],
      "default": 500
    },
    animationDuration: {
      type: [Number, String],
      "default": 300
    },
    headHeight: {
      type: [Number, String],
      "default": DEFAULT_HEAD_HEIGHT
    },
    hasStatusbar: {
      type: Boolean,
      "default": false
    },
    headPaddingTop: {
      type: Number,
      "default": 20
    },
    loadingEnd: {
      type: Boolean
    }
  },
  data: function data() {
    return {
      status: 'normal',
      distance: 0,
      duration: 0,
      textStatus: TEXT_STATUS,
      stateImgObj: {},
      stateImgMap: {
        wwdz: {
          loading: 'https://cdn.wanwudezhi.com/static/web-static/image/cb2b45382d9afba05862ac8c208bb812_84x84.png',
          success: 'https://cdn.wanwudezhi.com/static/web-static/image/dadb60d148d7cb568499fee4cfafedb9_84x84.png'
        },
        common: {
          loading: 'https://cdn.wanwudezhi.com/static/web-static/image/9406edf898fe9840aa02f291c9ad328e_84x84.png',
          success: 'https://cdn.wanwudezhi.com/static/web-static/image/6ab32b7a1f19164a9a5beaf22f1acd07_84x84.png'
        }
      },
      isIphoneX: baseFn.ua.isIPhoneX()
    };
  },
  computed: {
    trackStyle: function trackStyle() {
      return {
        'transition-duration': "".concat(this.duration, "ms"),
        transform: this.distance ? "translate3d(0,".concat(this.distance / window.rem, "rem, 0)") : ''
      };
    },
    showStatusText: function showStatusText() {
      return this["".concat(status, "Text")];
    },
    touchable: function touchable() {
      return this.status !== 'loading' && this.status !== 'success' && !this.disabled;
    },
    headStyle: function headStyle() {
      var style = {};

      if (this.componentHeaderHeight !== DEFAULT_HEAD_HEIGHT) {
        style.height = "".concat(this.componentHeaderHeight / window.rem, "rem");
      }

      style.paddingTop = "".concat(this.headerPaddingTop / window.rem, "rem");
      return style;
    },
    headerPaddingTop: function headerPaddingTop() {
      var paddingTop = this.headPaddingTop;

      if (this.hasStatusbar && this.isIphoneX) {
        paddingTop += 20;
      }

      return paddingTop;
    },
    componentHeaderHeight: function componentHeaderHeight() {
      var headHeight = this.headHeight + this.headPaddingTop;

      if (this.hasStatusbar && this.isIphoneX) {
        headHeight += 20;
      }

      return headHeight;
    }
  },
  watch: {
    value: function value(loading) {
      var _this = this;

      this.duration = this.animationDuration;

      if (loading) {
        this.setStatus(+this.componentHeaderHeight, true);
      } else if (this.loadingEnd) {
        this.status = 'success';
        setTimeout(function () {
          _this.setStatus(0, false);
        }, 300);
      } else {
        this.setStatus(0, false);
      }
    }
  },
  created: function created() {
    this.stateImgObj = this.stateImgMap.wwdz;

    if (window.hidewwdz) {
      this.stateImgObj = this.stateImgMap.common;
    }

    if (this.stateImgKey && this.stateImgMap[this.stateImgKey]) {
      this.stateImgObj = this.stateImgMap[this.stateImgKey];
    }
  },
  mounted: function mounted() {
    this.bindTouchEvent(this.$refs.track);
    this.scrollEl = this.getScroller(this.$el);
  },
  methods: {
    slots: function slots() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
      var props = arguments.length > 1 ? arguments[1] : undefined;
      var $slots = this.$slots,
          $scopedSlots = this.$scopedSlots;
      var scopedSlot = $scopedSlots[name];

      if (scopedSlot) {
        return scopedSlot(props);
      }

      return $slots[name];
    },
    preventDefault: function preventDefault(event, isStopPropagation) {
      if (typeof event.cancelable !== 'boolean' || event.cancelable) {
        event.preventDefault();
      }

      if (isStopPropagation) {
        event.stopPropagation();
      }
    },
    getScrollTop: function getScrollTop(el) {
      return 'scrollTop' in el ? el.scrollTop : el.pageYOffset;
    },
    getScroller: function getScroller(el) {
      var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
      var overflowScrollReg = /scroll|auto/i;
      var node = el;

      while (node && node.tagName !== 'HTML' && node.nodeType === 1 && node !== root) {
        var _window$getComputedSt = window.getComputedStyle(node),
            overflowY = _window$getComputedSt.overflowY;

        if (overflowScrollReg.test(overflowY)) {
          if (node.tagName !== 'BODY') {
            return node;
          } // see: https://github.com/youzan/vant/issues/3823


          var _window$getComputedSt2 = window.getComputedStyle(node.parentNode),
              htmlOverflowY = _window$getComputedSt2.overflowY;

          if (overflowScrollReg.test(htmlOverflowY)) {
            return node;
          }
        }

        node = node.parentNode;
      }

      return root;
    },
    checkPullStart: function checkPullStart(event) {
      this.ceiling = this.getScrollTop(this.scrollEl) === 0;

      if (this.ceiling) {
        this.duration = 0;
        this.touchStart(event);
      }
    },
    onTouchStart: function onTouchStart(event) {
      if (this.touchable) {
        this.checkPullStart(event);
      }
    },
    onTouchMove: function onTouchMove(event) {
      if (!this.touchable) {
        return;
      }

      if (!this.ceiling) {
        this.checkPullStart(event);
      }

      this.touchMove(event);

      if (this.ceiling && this.deltaY >= 0 && this.direction === 'vertical') {
        this.preventDefault(event);
        this.setStatus(this.ease(this.deltaY));
      }
    },
    onTouchEnd: function onTouchEnd() {
      var _this2 = this;

      if (this.touchable && this.ceiling && this.deltaY) {
        this.duration = this.animationDuration;

        if (this.status === 'loosing') {
          this.setStatus(+this.componentHeaderHeight, true);
          this.$emit('input', true); // ensure value change can be watched

          this.$nextTick(function () {
            _this2.$emit('refresh');
          });
        } else {
          this.setStatus(0);
        }
      }
    },
    ease: function ease(distance) {
      var headHeight = +this.componentHeaderHeight;

      if (distance > headHeight) {
        if (distance < headHeight * 2) {
          distance = headHeight + (distance - headHeight) / 2;
        } else {
          distance = headHeight * 1.5 + (distance - headHeight * 2) / 4;
        }
      }

      return Math.round(distance);
    },
    setStatus: function setStatus(distance, isLoading) {
      var status;

      if (isLoading) {
        status = 'loading';
      } else if (distance === 0) {
        status = 'normal';
      } else {
        status = distance < this.componentHeaderHeight ? 'pulling' : 'loosing';
      }

      this.distance = distance;

      if (status !== this.status) {
        this.status = status;
      }
    },
    genStatus: function genStatus() {
      var status = this.status,
          distance = this.distance;
      var slot = this.slots(status, {
        distance: distance
      });

      if (slot) {
        return slot;
      }

      var nodes = []; // const text = this[`${status}Text`];

      if (TEXT_STATUS.indexOf(status) !== -1 || status === 'loading') {
        nodes.push('<div class="text">加载中</div>');
      }

      return nodes;
    },
    showSuccessTip: function showSuccessTip() {
      var _this3 = this;

      this.status = 'success';
      setTimeout(function () {
        _this3.setStatus(0);
      }, this.successDuration);
    }
  }
};

var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', [_c('div', {
    staticClass: "refresh",
    style: _vm.refreshStyle
  }, [_c('div', {
    ref: "track",
    staticClass: "refresh__track",
    style: _vm.trackStyle
  }, [_c('div', {
    staticClass: "refresh__head",
    style: _vm.headStyle
  }, [_vm.textStatus.indexOf(_vm.status) !== -1 ? _c('div', {
    staticClass: "pull"
  }, [_c('img', {
    staticClass: "img",
    attrs: {
      "src": _vm.stateImgObj.loading,
      "alt": ""
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "words"
  }, [_vm._v("\n                        松开立即刷新\n                    ")])]) : _vm._e(), _vm._v(" "), _vm.status === 'loading' || _vm.status === 'success' ? _c('div', {
    staticClass: "loading"
  }, [_c('img', {
    staticClass: "img",
    attrs: {
      "src": _vm.stateImgObj.loading,
      "alt": ""
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "active"
  }, [_c('img', {
    staticClass: "img1",
    attrs: {
      "src": _vm.stateImgObj.success,
      "alt": ""
    }
  })]), _vm._v(" "), _c('div', {
    staticClass: "words"
  }, [_vm._v("\n                        " + _vm._s(_vm.status === 'success' ? '刷新完成' : '正在刷新') + "\n                    ")])]) : _vm._e()]), _vm._v(" "), _vm._t("default")], 2)])]);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-2a344dd4_0", {
    source: "@keyframes myHeight-data-v-2a344dd4{0%{height:0}50%{height:.28rem}100%{height:.56rem}}@-webkit-keyframes myHeight-data-v-2a344dd4{0%{height:0}50%{height:.28rem}100%{height:.56rem}}.refresh[data-v-2a344dd4]{overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.refresh__track[data-v-2a344dd4]{position:relative;height:100%;transition-property:transform}.refresh__head[data-v-2a344dd4]{position:absolute;left:0;width:100%;text-align:center;transform:translateY(-100%)}.refresh__head .pull[data-v-2a344dd4]{text-align:center}.refresh__head .pull .img[data-v-2a344dd4]{display:block;margin:auto;width:.56rem;height:.56rem}.refresh__head .pull .words[data-v-2a344dd4]{padding-top:.12rem;padding-bottom:.22rem;font-size:.28rem;font-weight:400;color:#63666c;line-height:.4rem}.refresh__head .success[data-v-2a344dd4]{text-align:center}.refresh__head .success .img[data-v-2a344dd4]{display:block;margin:auto;width:.56rem;height:.56rem}.refresh__head .success .words[data-v-2a344dd4]{padding-top:.12rem;padding-bottom:.22rem;font-size:.28rem;font-weight:400;color:#63666c;line-height:.4rem}.refresh__head .loading[data-v-2a344dd4]{text-align:center;position:relative}.refresh__head .loading .img[data-v-2a344dd4]{display:block;margin:auto;width:.56rem;height:.56rem}.refresh__head .loading .active[data-v-2a344dd4]{position:absolute;left:50%;transform:translateX(-50%);bottom:.72rem;display:block;width:.56rem;z-index:100;-webkit-animation:myHeight-data-v-2a344dd4 1s linear;animation:myHeight-data-v-2a344dd4 1s linear;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;overflow:hidden}.refresh__head .loading .active .img1[data-v-2a344dd4]{width:100%;display:block;position:absolute;bottom:0}.refresh__head .loading .words[data-v-2a344dd4]{padding-top:.12rem;padding-bottom:.22rem;font-size:.28rem;font-weight:400;color:#63666c;line-height:.4rem}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-2a344dd4";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, vueRuntimeHelpers.createInjector, undefined, undefined);

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
};

exports.default = __vue_component__;
