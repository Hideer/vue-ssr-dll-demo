"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRemStyle = getRemStyle;
exports.ArrayToMap = ArrayToMap;
exports.createNineInjectMixin = createNineInjectMixin;
exports.createNineFixedHelper = createNineFixedHelper;
exports.createExposureMixin = createExposureMixin;
exports.createAppContextMixin = createAppContextMixin;
exports.paramMixin = paramMixin;
exports.createNineProviderMixin = exports.userLevelVisible = exports.Trim = void 0;

require("regenerator-runtime/runtime");

var _baseUser = _interopRequireDefault(require("@wanwu/base-user"));

var _baseFn = require("@wanwu/base-fn");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// import Vue from "vue";
function getRemStyle(len) {
  return len / 100 + "rem";
}

function ArrayToMap(arr, key) {
  var resArr = {};
  (arr instanceof Array ? arr : []).forEach(function (item, index) {
    if (item) {
      resArr[item[key] || index] = item;
    }
  });
  return resArr;
}

var Trim = function Trim(s) {
  return s.replace(/\s*/g, "");
}; // 当前用户等级是否包含在可见玩家等级列表


exports.Trim = Trim;

var userLevelVisible = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var userLevels,
        res,
        userLevel,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            userLevels = _args.length > 0 && _args[0] !== undefined ? _args[0] : ["1", "2", "3", "4", "5"];
            res = false;
            _context.prev = 2;
            _context.next = 5;
            return _baseUser.default.ensureLoginNoLogin();

          case 5:
            userLevel = (_baseUser.default.getUserInfo().userPlayerLevel || "1") + "";

            if (userLevels.indexOf(userLevel) > -1) {
              res = true;
            }

            _context.next = 13;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            console.log("error log", _context.t0); // 未登录，按照普通粉丝处理

            if (userLevels.indexOf("1") > -1) {
              res = true;
            }

          case 13:
            return _context.abrupt("return", res);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 9]]);
  }));

  return function userLevelVisible() {
    return _ref.apply(this, arguments);
  };
}();

exports.userLevelVisible = userLevelVisible;

function mergeAgentTraceInfo(base, local) {
  if (!base) return local;

  var data = _objectSpread(_objectSpread({}, base), local);

  if (local.cur && base.cur) {
    if (!Array.isArray(local.cur) || !Array.isArray(base.cur)) {
      throw new Error("cur must be array");
    }

    data.cur = [].concat(_toConsumableArray(base.cur), _toConsumableArray(local.cur));
  }

  return data;
}

function mergeProvide(base, local) {
  if (!base) {
    return local;
  } else if (!local) {
    return base;
  } else {
    // this.__mergedNineProvideInfo = mergeProvide(this.parentNineProvideInfo, this.nineProvideInfo)
    var data = {};
    Object.keys(local).forEach(function (k) {
      if (k === "agentTraceInfo_") {
        data[k] = mergeAgentTraceInfo(base[k], local[k]);
      } else if (_typeof(local[k]) !== "object" || Array.isArray(local[k])) {
        data[k] = local[k];
      } else if (!base[k] || _typeof(base[k]) !== "object") {
        data[k] = local[k];
      } else {
        data[k] = mergeProvide(base[k], local[k]);
      }
    });
    Object.keys(base).forEach(function (k) {
      if (local[k]) return; // 上面已经遍历

      data[k] = base[k];
    });
    return data;
  }
}

var NINE_PROVIDE_KEY = "__nine__provide__";

var createNineProviderMixin = function createNineProviderMixin() {
  return {
    data: function data() {
      return {
        mergedNineProvideInfo__: {
          inner: {}
        },
        // eslint-disable-line
        aaaaaaa: "12333333" // nineProvideInfo: {}

      };
    },
    inject: {
      parentNineProvideInfo: {
        from: NINE_PROVIDE_KEY,
        default: {}
      } // [NINE_PROVIDE_KEY]: "",

    },
    provide: function provide() {
      return _defineProperty({}, NINE_PROVIDE_KEY, this.mergedNineProvideInfo__);
    },
    watch: {
      __mergedNineProvideInfoComputed: {
        deep: true,
        immediate: true,
        handler: function handler(v) {
          if (!this.mergedNineProvideInfo__) {
            return;
          }

          this.$set(this.mergedNineProvideInfo__, "inner", v);
        }
      }
    },
    computed: {
      __mergedNineProvideInfoComputed: function __mergedNineProvideInfoComputed() {
        return mergeProvide(this.parentNineProvideInfo && this.parentNineProvideInfo.inner, this.nineProvideInfo) || {};
      }
    },
    methods: {
      provideInfo: function provideInfo(info) {
        var _this = this;

        if (_typeof(info) !== "object" && info !== null) {
          console.error("provideInfo only accept object as arg");
        }

        Object.keys(info).forEach(function (k) {
          _this.__nineProvide[k] = info[k];
        });
      }
    }
  };
};

exports.createNineProviderMixin = createNineProviderMixin;

function createNineInjectMixin(name) {
  return {
    // [NINE_PROVIDE_KEY]: name,
    inject: {
      __nineInjected: {
        from: NINE_PROVIDE_KEY,
        default: {}
      }
    },
    computed: _defineProperty({}, name, function () {
      return this.__nineInjected.inner;
    })
  };
}

function getAppHeaderHeight() {
  if (!window || !document) return 0;
  var appHeader = document.querySelector(".component__AppHeader");
  return appHeader ? appHeader.offsetHeight : 0;
}

function createNineFixedHelper(name) {
  var _computed2;

  return {
    data: function data() {
      return {
        nineProvideInfo: {
          fixedToTop: {
            isFixed: false,
            height: 0
          }
        },
        APP_HEADER_HEIGHT: 0
      };
    },
    mixins: [createNineProviderMixin()],
    watch: {
      isFixed: {
        immediate: true,
        handler: function handler(v) {
          this.nineProvideInfo.fixedToTop.isFixed = v;
        }
      },
      childFixedTop: {
        immediate: true,
        handler: function handler(v) {
          this.nineProvideInfo.fixedToTop.height = v || 0;
        }
      }
    },
    created: function created() {
      if (this.isFixed !== undefined) {
        this.nineProvideInfo.fixedToTop.isFixed = this.isFixed;
      } else {
        console.warn("你应该给一个isFixed的值并设为boolean类型");
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      this.APP_HEADER_HEIGHT = getAppHeaderHeight();
      var interval = setInterval(function () {
        if (!_this2.APP_HEADER_HEIGHT) _this2.APP_HEADER_HEIGHT = getAppHeaderHeight();else clearInterval(interval);
      }, 100);
    },
    computed: (_computed2 = {}, _defineProperty(_computed2, name, function () {
      return this.parentNineProvideInfo.inner;
    }), _defineProperty(_computed2, "__fixedToTop", function __fixedToTop() {
      return this[name] && this[name].fixedToTop;
    }), _defineProperty(_computed2, "hasFixedParent", function hasFixedParent() {
      return !!this.__fixedToTop;
    }), _defineProperty(_computed2, "isParentFixed", function isParentFixed() {
      return !!(this.__fixedToTop && this.__fixedToTop.isFixed);
    }), _defineProperty(_computed2, "fixedTop", function fixedTop() {
      return this.__fixedToTop ? this.__fixedToTop.height || 0 : this.APP_HEADER_HEIGHT;
    }), _defineProperty(_computed2, "childFixedTop", function childFixedTop() {
      if (this.fixedHeight === undefined) {
        console.warn("你需要提供一个`fixedHeight`属性用来表示你的组件吸顶部分的高度");
      }

      var thisHeight = this.fixedHeight || 0;
      return thisHeight + this.fixedTop;
    }), _computed2),
    methods: {
      // 当前组件传给后端的埋点信息 info是个对象
      componentTraceInfo: function componentTraceInfo(info) {
        var agentTraceInfo_ = {};

        if (this[name] && this[name].agentTraceInfo_) {
          agentTraceInfo_ = _baseFn.fn.clone(this[name].agentTraceInfo_); // cur = encodeURIComponent(JSON.stringify(this.parentInfo.agentTraceInfo_));
        }

        if (info) {
          Object.keys(info).forEach(function (key) {
            if (Array.isArray(info[key]) && agentTraceInfo_[key]) {
              agentTraceInfo_[key] = [].concat(_toConsumableArray(info[key]), _toConsumableArray(agentTraceInfo_[key]));
            } else {
              agentTraceInfo_[key] = info[key];
            }
          });
        }

        return encodeURIComponent(JSON.stringify(agentTraceInfo_));
      }
    }
  };
} // 埋点相关


var parseObject = function parseObject(obj) {
  var _obj = obj || {}; // 判断是否是jsonstr


  if (typeof obj === "string") {
    try {
      _obj = JSON.parse(obj);
    } catch (e) {//
    }
  }

  return _obj;
};

function createExposureMixin() {
  return {
    methods: {
      newExposureObj: function newExposureObj(item, index) {
        if (item && item.agentTraceInfo_) {
          // console.log({
          //     agentTraceInfo_: item.agentTraceInfo_,
          //     sortIndex: index,
          // });
          return {
            agentTraceInfo_: item.agentTraceInfo_,
            sortIndex: index
          };
        }

        return null;
      },
      // 列表项点击打点
      onItemClick: function onItemClick(item, index) {
        var logObj = this.newExposureObj(item, index);

        if (logObj) {
          this.$logE("listClick", {
            domain: logObj
          });
        }
      },
      // 需要拼在url上
      urlLogObj: function urlLogObj(item) {
        if (item) {
          var filterTexts = this.filterTexts || [];
          var agentTraceInfo_ = parseObject(item.agentTraceInfo_);
          var back_cur = Array.isArray(agentTraceInfo_.cur) ? agentTraceInfo_.cur.join("_") : agentTraceInfo_.cur || "";
          var front_cur = filterTexts.length ? filterTexts.join("_") : "";
          var obj = {
            cur: back_cur || front_cur,
            extension: agentTraceInfo_.extension ? JSON.stringify(agentTraceInfo_.extension) : ""
          };

          for (var propName in obj) {
            if (!obj[propName]) delete obj[propName];
          } // console.log(obj);


          return obj;
        }

        return {};
      },
      wrapItem: function wrapItem(item, index) {
        var urlLogObj = this.urlLogObj(item, index);
        return Object.assign(item, {
          urlLogObj: urlLogObj
        });
      }
    }
  };
}

function createAppContextMixin() {
  return {
    inject: ["appContext__"],
    computed: {
      triggerAction: function triggerAction() {
        return this.appContext__ && this.appContext__.triggerAction;
      }
    }
  };
}

function paramMixin() {
  return {
    inject: ['inheritParams'],
    methods: {
      formatApiParam: function formatApiParam(api, params) {
        try {
          var queryStr = (api || '').split('?');

          var apiParam = _baseFn.fn.parse(queryStr[1]);

          var param = apiParam.param ? JSON.parse(apiParam.param) : {}; // 链接中可能存在的param

          var paramsParam = params.param ? JSON.parse(params.param) : {}; // params对象中可能存在的param

          delete apiParam.param;
          delete apiParam.classMethod;
          delete apiParam.className;

          var clearParams = _baseFn.fn.clone(params); // 去除params中不需要放在param中的字段


          delete clearParams.param;
          delete clearParams.classMethod;
          delete clearParams.className;
          param = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, paramsParam), param), apiParam), clearParams), this.inheritParams && this.inheritParams.mergeData);
          delete param.pageIndex;
          delete param.pageSize;
          delete param.agentTraceInfo_;
          return JSON.stringify(param);
        } catch (error) {
          console.error(error);
          return null;
        }
      }
    }
  };
}

;
