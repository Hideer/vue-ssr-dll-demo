/**
 * Create by changsheng on 2019-04-19 01:37
 */
import WxSdk from '@wanwu/wx-sdk';
import {
    fn, ImageUtils, ua,
} from '@wanwu/base-fn';
import {
    createShareParams,
} from '@wanwu/base-logger';
import User from '@wanwu/base-user';
import shareImages from './shareImages';

let CacheShareOptions;
let CurrentRouterPath; // 当前路由
const WhiteReg = [
    'h5.wanwudezhi.com/mall-web',
    'h5.wanwudezhi.com/product-web',
    'h5.wanwudezhi.com/live-web',
    'h5.wanwudezhi.com/promotion-web',
    'h5.wanwudezhi.com/community-web',
    'm.wanwudezhi.com',
    'marketing-web',
];

const FakeQueryKeys = [
    'shareTime',
];

const ShareRemoveKeys = [
    'token',
    'trace_info',
    'tx_trace_key',
    'cps_user_source',
];

export default {
    /**
     * 更新页面分享配置，缓存分享配置对象
     * @param {object} options
     * @param {string} options.title 页面分享标题
     * @param {string} options.desc 页面分享描述
     * @param {string} options.link 页面分享链接
     * @param {string} options.imgUrl 页面分享小图
     * @param {string} options.captureScreen 页面使用截屏
     */
    updateShareData(options) {
        if (!ua.isWechat()) {
            CacheShareOptions = this.getShareOptions(options);
            return;
        }
        this.showShareMenu();

        const shareOptions = this.getShareOptions(options);
        // 当captureScreen置为true时，不再传imgUrl
        if (options.captureScreen && ua.isWechatMiniProgram()) {
            shareOptions.imgUrl = 'none';
        }
        CacheShareOptions = shareOptions;
        this.miniProgramPostMessage();

        WxSdk.updateAppMessageShareData(shareOptions);
        WxSdk.updateTimelineShareData(shareOptions);

        WxSdk.onMenuShareAppMessage(shareOptions);
        WxSdk.onMenuShareTimeline(shareOptions);
    },
    /**
     * 生成分享配置对象，处理link，生成分享准确的分享链接，
     * 这个方法可以认为是一个内部方法，
     * 一般不建议直接调用，可以用`getCacheShareOptions`方法
     * @param {object} options
     * @param {string} options.title 页面分享标题
     * @param {string} options.desc 页面分享描述
     * @param {string} options.link 页面分享链接
     * @param {string} options.imgUrl 页面分享小图
     * @returns {object} shareOptions 分享配置对象
     * {title,desc,link,imgUrl}
     */
    getShareOptions(options = {}) {
        CurrentRouterPath = options.router || CurrentRouterPath;
        const defaultShareOptions = {
            title: '玩物得志商城',
            desc: '找国风好物，上玩物得志',
            link: location.href,
            imgUrl: ImageUtils.getSquareImage(this.getRandomShareImg(), 200),
            router: CurrentRouterPath,
        };
        const {
            title, desc, link, imgUrl, target,
        } = options || {};
        const shareOptions = {
            title: title || defaultShareOptions.title,
            desc: desc || defaultShareOptions.desc,
            link: link || defaultShareOptions.link,
            imgUrl: imgUrl || defaultShareOptions.imgUrl,
            router: CurrentRouterPath,
            target: target || 'xcx',
        };


        const userInviteCode = User.getUserInfo().inviteCode;
        if (userInviteCode) {
            const url = shareOptions.link;
            shareOptions.link = fn.setQueryString(url, 'inviteCode', userInviteCode);
        }

        const isPublicFlow = fn.getQueryString('isPublicFlow');
        if (isPublicFlow) {
            const url = shareOptions.link;
            shareOptions.link = fn.setQueryString(url, 'isPublicFlow', '0');
        }
        // 分享渠道
        const sf = fn.getQueryString('sf', shareOptions.link);
        if (!sf) {
            const url = shareOptions.link;
            shareOptions.link = fn.setQueryString(url, 'sf', 'h5');
        }

        // const token = fn.getQueryString('token');
        // if (token) {
        //     const url = shareOptions.link;
        //     shareOptions.link = fn.removeQueryString(url, 'token');
        // }
        // const trace_info = fn.getQueryString('trace_info');
        // if (trace_info) {
        //     const url = shareOptions.link;
        //     shareOptions.link = fn.removeQueryString(url, 'trace_info');
        // }

        ShareRemoveKeys.map(removeKey => {
            const val = fn.getQueryString(removeKey);
            if (!val) return;
            const url = shareOptions.link;
            shareOptions.link = fn.removeQueryString(url, removeKey);
        })

        shareOptions.link = createShareParams(shareOptions.link);


        /**
         * 对符合白名单要求的链接做处理
         * link会带上当前时间戳
         * 并且生成一个realLink，不带时间戳的链接，目前是作为生成短链的缓存的key
         */
        const linkObj = new URL(shareOptions.link);
        if (new RegExp(`(${WhiteReg.join('|')})`).test(linkObj.origin + linkObj.pathname)) {
            const pattern = /(.*)\/\d+$/;
            if (pattern.test(linkObj.pathname)) {
                linkObj.pathname = linkObj.pathname.replace(pattern, '$1');
                shareOptions.realLink = linkObj.toString();
            }
            linkObj.pathname += `/${Date.now()}`;
            shareOptions.link = linkObj.toString();
        }
        shareOptions.realLink = shareOptions.realLink || shareOptions.link;
        FakeQueryKeys.forEach(key => {
            shareOptions.realLink = fn.removeQueryString(shareOptions.realLink, key);
        });

        return shareOptions;
    },

    /**
     * 生成当前页面缓存的分享配置对象，或者在不影响页面级别分享配置下，生成分享配置对象
     * @param {object} options
     * @param {string} options.title 分享标题
     * @param {string} options.desc 分享描述
     * @param {string} options.link 分享链接
     * @param {string} options.imgUrl 分享小图
     * @returns {object} cacheShareOptions 缓存再处理的，或者基于新的配置生成的分享对象
     * {title,desc,link,imgUrl,`page`,`queryStr`}  [page,queryStr是专为分享小程序生成的属性]
     */
    getCacheShareOptions(options) {
        const newShareOptions = options ? this.getShareOptions(options) : CacheShareOptions;
        // 获取微信的accessToken的值
        const originUrl = new RegExp(`^${location.origin}(/mall-web)?`);
        const urlParse = newShareOptions.link.replace(originUrl, '').split('?');
        let page = urlParse[0];
        let queryStr = urlParse[1];

        if (ua.isWechatMiniProgram()) {
            const replacePage = [
                {
                    rule: '/shop/index',
                    xcx: '/store/index',
                },
            ];
            for (var item of replacePage) {
                let rule = item.rule;
                if (!(rule instanceof RegExp)) {
                    rule = new RegExp(`${rule}(\/|$)+`);
                }
                if (rule.test(page)) {
                    page = item.xcx;
                }
                break;
            }
        }
        if (newShareOptions.target === 'h5') {
            page = '/webview/index';
            queryStr = `${(urlParse[1] + '&' || '')}src=${encodeURIComponent(newShareOptions.link)}`;
        }
        return {
            ...newShareOptions,
            page,
            queryStr,
        };
    },
    /**
     * 隐藏微信分享菜单中的按钮，效果有问题，不建议使用
     */
    hideShareMenu() {
        WxSdk.hideMenuItems({
            menuList: [
                'menuItem:share:appMessage',
                'menuItem:share:timeline',
                'menuItem:share:qq',
                'menuItem:share:weiboApp',
                'menuItem:share:facebook',
                'menuItem:share:QZone',
                'menuItem:copyUrl',
                'menuItem:openWithQQBrowser',
                'menuItem:openWithSafari',
                'menuItem:share:email',
            ],
        });
    },
    /**
     * 显示微信分享菜单中的按钮，效果有问题，不建议使用
     */
    showShareMenu() {
        WxSdk.showMenuItems({
            menuList: [
                'menuItem:share:appMessage',
                'menuItem:share:timeline',
                // 'menuItem:share:qq',
                // 'menuItem:share:weiboApp',
                // 'menuItem:share:facebook',
                // 'menuItem:share:QZone',
                // 'menuItem:copyUrl',
                // 'menuItem:openWithQQBrowser',
                // 'menuItem:openWithSafari',
                // 'menuItem:share:email',
            ],
        });
    },
    getRandomShareImg() {
        const randomNum = parseInt(Math.random() * 20);
        return shareImages[randomNum];
    },
    /**
     * 在用户触发分享或者其他会向小程序通信的钩子后，向小程序传输数据
     * @param {object} data 需要传给小程序的值
     */
    miniProgramPostMessage(data = {}) {
        if (ua.isWechatMiniProgram()) {
            try {
                const shareOptions = this.getCacheShareOptions();
                // shareOptions.link = `pages/webview/index?src=${encodeURIComponent(shareOptions.link)}`;
                shareOptions.link = `pages${shareOptions.page}?${shareOptions.queryStr}`;
                const params = {
                    shareOptions: shareOptions,
                    businessData: data,
                };
                window.wx.miniProgram.postMessage({
                    data: params,
                });
            } catch (e) {
                console.log(e);
            }
        }
    },
};
