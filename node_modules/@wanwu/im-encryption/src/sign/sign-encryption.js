var CryptoJS = require('crypto-js');
var base64 = require('../base64/base64');
var signUtils = require('../utils/sign-utils');
var SignConstants = require('../constant/security-sign-constants');

class SignParams {
    constructor(sId, timestamp, appVersion, signVersion, payload) {
        this.sId = sId;
        this.timestamp = timestamp;
        this.appVersion = appVersion;
        this.signVersion = signVersion;
        this.payload = payload;
    }
}

/**
 * 获取签名
 *
 * @param signParams 参与签名的参数
 * @param headerMap
 * @return Authorization的值
 */
function generateSign(signParams, headerMap) {
    if (!signUtils.checkSignParams(signParams)) {
        return SignConstants.SignCodeEnums.SIGN_PARAMS_ERROR;
    }
    if (headerMap === 'undefined' || headerMap == null) {
        headerMap = new Map();
    }

    var signedHeaders = '';
    var flag = false;
    for (var header of headerMap) {
        if (!flag) {
            signedHeaders += header[0];
            flag = true;
        } else {
            signedHeaders = signedHeaders + ';' + header[0];
        }
    }



    var signature = prepareParams(signParams, headerMap);
    var credential = signParams.timestamp + '_' + SignConstants.SignParamEnums.SIGNEDPARAM_END;

    var authorizationHeader = SignConstants.SignParamEnums.AUTHORIZATIONHEADER_ALGORITHM + '=' + SignConstants.SignParamEnums.ALGORITHM + '/' +
        SignConstants.SignParamEnums.AUTHORIZATIONHEADER_SIGNEDHEADERS + '=' + signedHeaders.toString() + '/' +
        SignConstants.SignParamEnums.AUTHORIZATIONHEADER_CREDENTIAL + '=' + credential + '/' +
        SignConstants.SignParamEnums.AUTHORIZATIONHEADER_SIGNATURE + '=' + signature;

    return authorizationHeader;
}

function prepareParams(signParams, headerMap) {
    var paramMap = new Map();

    var key = CryptoJS.MD5(SignConstants.SignParamEnums.SIGNSECRETKEY + SignConstants.SignParamEnums.SIGNSALT + signParams.signVersion).toString();

    for (var header of headerMap) {
        paramMap.set(header[0], header[1]);
    }

    paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_SID, signParams.sId);
    paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_TIMESTAMP, signParams.timestamp);
    paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_APPVERSION, signParams.appVersion);
    paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_SIGNVERSION, signParams.signVersion);
    paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_PAYLOAD, stringToSha256HMAC(signParams.payload, key));

    return calculationSign(paramMap, key);
}

function calculationSign(paramMap, key) {
    // 按照key值升序进行排列
    var signStr = signUtils.getParamStr(paramMap);
    signStr = signStr.toUpperCase();
    return CryptoJS.HmacSHA256(signStr, key).toString();
}

function stringToSha256HMAC(str, key) {
    // key = CryptoJS.MD5(key + salt).toString();
    return CryptoJS.HmacSHA256(str, key).toString();
}

// function bytesToBase64(bytes) {
//     return base64.fromByteArray(bytes);
// }


var sId = '100100';
var timestamp = 1593771577;// 732;//new Date().getTime(); //秒
var appVersion = '1.1.1';
var signVersion = '1.0.0';
var payload = 'asdasfasfa';

// byte数组payload先做base64，再做sha256_HMAC，然后参与签名

var headerMap = new Map();
headerMap.set('Sec-Fetch-Site', 'cross-site');
headerMap.set('Sec-Fetch-Mode', 'cors');
headerMap.set('Sec-Fetch-Dest', 'empty');
headerMap.set('Host', 'webim.tim.qq.com');
headerMap.set('Connection', 'keep-alive');
headerMap.set('Accept', 'application/json, text/plain, */*');
headerMap.set('DNT', '1');
headerMap.set('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36');
headerMap.set('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');
headerMap.set('Origin', 'http://im.wanwudezhi.work');
headerMap.set('Referer', 'http://im.wanwudezhi.work/index.html');
headerMap.set('Accept-Encoding', 'gzip, deflate, br');
headerMap.set('Accept-Language', 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-XA;q=0.6,zh-TW;q=0.5,fr;q=0.4');
headerMap.set('Signed-Headers', 'Sec-Fetch-Site;Sec-Fetch-Mode;Sec-Fetch-Dest');


function sign(sId, timestamp, appVersion, signVersion, payload, map) {
    var signParamsTest = new SignParams(sId, timestamp, appVersion, signVersion, payload);
    return generateSign(signParamsTest, (map || headerMap));
}


export default sign
;
