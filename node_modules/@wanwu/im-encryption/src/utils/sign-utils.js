exports.getParamStr = getParamStr;
exports.checkSignParams = checkSignParams;
exports.isEmpty = isEmpty;

/**
 * 参数签名串拼接
 * @param map
 * @return
 */
function getParamStr(map) {
    var buffer = '';
    var keys = [];

    map.forEach(function (value, key, map1) {
        keys.push(key);
    });

    keys.sort();

    var flag = false;
    // 参数值拼接进行加密
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== 'sign') {
            // 20190228 空值不参与签名
            var value = String(map.get(key));
            if (value === 'undefined' || value == null || value === '') {
                continue;
            }
            if (!flag) {
                buffer += (key + '=' + value);
                flag = true;
            } else {
                buffer += ('&' + key + '=' + value);
            }
        }
    }
    return String(buffer);
}


function checkSignParams(signParams) {
    if (isEmpty(signParams.sId) || isEmpty(signParams.appVersion) || isEmpty(signParams.signVersion) ||
        signParams.timestamp == null || signParams.timestamp === 0) {
        return false;
    }

    if (isEmpty(signParams.payload)) {
        signParams.payload = '';
    }

    return true;
}

function isEmpty(value) {
    return value === 'undefined' || value == null || value === '';
}
