'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.array.iterator');
require('core-js/modules/es.array.some');
require('core-js/modules/es.date.to-string');
require('core-js/modules/es.map');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.string.iterator');
require('core-js/modules/esnext.map.delete-all');
require('core-js/modules/esnext.map.every');
require('core-js/modules/esnext.map.filter');
require('core-js/modules/esnext.map.find');
require('core-js/modules/esnext.map.find-key');
require('core-js/modules/esnext.map.includes');
require('core-js/modules/esnext.map.key-of');
require('core-js/modules/esnext.map.map-keys');
require('core-js/modules/esnext.map.map-values');
require('core-js/modules/esnext.map.merge');
require('core-js/modules/esnext.map.reduce');
require('core-js/modules/esnext.map.some');
require('core-js/modules/esnext.map.update');
require('core-js/modules/web.dom-collections.iterator');
require('core-js/modules/es.symbol');
require('core-js/modules/es.symbol.description');
require('core-js/modules/es.symbol.iterator');
require('core-js/modules/es.array.from');
require('core-js/modules/es.array.is-array');
require('core-js/modules/es.array.slice');
require('core-js/modules/es.function.name');
require('core-js/modules/es.regexp.to-string');
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/esm/classCallCheck'));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var CryptoJS = require('crypto-js');

var base64 = require('../base64/base64');

var signUtils = require('../utils/sign-utils');

var SignConstants = require('../constant/security-sign-constants');

var SignParams = function SignParams(sId, timestamp, appVersion, signVersion, payload) {
  _classCallCheck(this, SignParams);

  this.sId = sId;
  this.timestamp = timestamp;
  this.appVersion = appVersion;
  this.signVersion = signVersion;
  this.payload = payload;
};
/**
 * 获取签名
 *
 * @param signParams 参与签名的参数
 * @param headerMap
 * @return Authorization的值
 */


function generateSign(signParams, headerMap) {
  if (!signUtils.checkSignParams(signParams)) {
    return SignConstants.SignCodeEnums.SIGN_PARAMS_ERROR;
  }

  if (headerMap === 'undefined' || headerMap == null) {
    headerMap = new Map();
  }

  var signedHeaders = '';
  var flag = false;

  var _iterator = _createForOfIteratorHelper(headerMap),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var header = _step.value;

      if (!flag) {
        signedHeaders += header[0];
        flag = true;
      } else {
        signedHeaders = signedHeaders + ';' + header[0];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var signature = prepareParams(signParams, headerMap);
  var credential = signParams.timestamp + '_' + SignConstants.SignParamEnums.SIGNEDPARAM_END;
  var authorizationHeader = SignConstants.SignParamEnums.AUTHORIZATIONHEADER_ALGORITHM + '=' + SignConstants.SignParamEnums.ALGORITHM + '/' + SignConstants.SignParamEnums.AUTHORIZATIONHEADER_SIGNEDHEADERS + '=' + signedHeaders.toString() + '/' + SignConstants.SignParamEnums.AUTHORIZATIONHEADER_CREDENTIAL + '=' + credential + '/' + SignConstants.SignParamEnums.AUTHORIZATIONHEADER_SIGNATURE + '=' + signature;
  return authorizationHeader;
}

function prepareParams(signParams, headerMap) {
  var paramMap = new Map();
  var key = CryptoJS.MD5(SignConstants.SignParamEnums.SIGNSECRETKEY + SignConstants.SignParamEnums.SIGNSALT + signParams.signVersion).toString();

  var _iterator2 = _createForOfIteratorHelper(headerMap),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var header = _step2.value;
      paramMap.set(header[0], header[1]);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_SID, signParams.sId);
  paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_TIMESTAMP, signParams.timestamp);
  paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_APPVERSION, signParams.appVersion);
  paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_SIGNVERSION, signParams.signVersion);
  paramMap.set(SignConstants.SignParamEnums.SIGNEDPARAM_PAYLOAD, stringToSha256HMAC(signParams.payload, key));
  return calculationSign(paramMap, key);
}

function calculationSign(paramMap, key) {
  // 按照key值升序进行排列
  var signStr = signUtils.getParamStr(paramMap);
  signStr = signStr.toUpperCase();
  return CryptoJS.HmacSHA256(signStr, key).toString();
}

function stringToSha256HMAC(str, key) {
  // key = CryptoJS.MD5(key + salt).toString();
  return CryptoJS.HmacSHA256(str, key).toString();
} // function bytesToBase64(bytes) {

var headerMap = new Map();
headerMap.set('Sec-Fetch-Site', 'cross-site');
headerMap.set('Sec-Fetch-Mode', 'cors');
headerMap.set('Sec-Fetch-Dest', 'empty');
headerMap.set('Host', 'webim.tim.qq.com');
headerMap.set('Connection', 'keep-alive');
headerMap.set('Accept', 'application/json, text/plain, */*');
headerMap.set('DNT', '1');
headerMap.set('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36');
headerMap.set('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');
headerMap.set('Origin', 'http://im.wanwudezhi.work');
headerMap.set('Referer', 'http://im.wanwudezhi.work/index.html');
headerMap.set('Accept-Encoding', 'gzip, deflate, br');
headerMap.set('Accept-Language', 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-XA;q=0.6,zh-TW;q=0.5,fr;q=0.4');
headerMap.set('Signed-Headers', 'Sec-Fetch-Site;Sec-Fetch-Mode;Sec-Fetch-Dest');

function sign(sId, timestamp, appVersion, signVersion, payload, map) {
  var signParamsTest = new SignParams(sId, timestamp, appVersion, signVersion, payload);
  return generateSign(signParamsTest, map || headerMap);
}

var base64$1 = require('./base64/base64');

var typeUtils = require('./utils/type-utils');

var signUtils$1 = require('./utils/sign-utils'); // var KEYV = [
//     0x3456189a,
//     0x1123ef23,
//     0x7abc7910,
//     0x11879034,
// ];// 加密解密所用的KEY


var salt = 0x120cd38d;
var tea_round = 32;
var key = new Array(4);

function TeaEncryption(sId, keyStr) {
  if (keyStr.length !== 32) {
    throw new Error('KeyStr Error!');
  }

  this.sId = sId;
  var keyInt = [hash(keyStr.substring(0, 8)), hash(keyStr.substring(8, 16)), hash(keyStr.substring(16, 24)), hash(keyStr.substring(24, 32))];

  for (var i = 4; i > 0; i--) {
    key[4 - i] = keyInt[i - 1] ^ salt;
  }

  if (this.sId !== '' && this.sId !== null) {
    var sIdHash = hash(this.sId);

    for (var _i = 0; _i < 4; _i++) {
      key[_i] = key[_i] ^ sIdHash;
    }
  }
}

function hash(str) {
  var strByte = typeUtils.toUTF8Array(str);
  var hash = 5381;

  for (var i = 0; i < strByte.length; i++) {
    hash = (hash << 5) + hash + strByte[i];
    /* hash * 33 + c */
  }

  return hash & 0xffffffffff;
}
/**
 * 加密8个字节数据，也就是两个int类型数据
 * @param content
 * @param offset 字节数据下标
 * @param key
 * @param times 加密轮数
 * @return
 */


function encrypt(content, offset, key, times) {
  var tempInt = typeUtils.byteToInt(content, offset);
  var y = tempInt[0] >>> 0;
  var z = tempInt[1] >>> 0;
  var sum = 0;
  var i;
  var delta = 0x9e3779b9; // 这是算法标准给的值

  var a = key[0];
  var b = key[1];
  var c = key[2];
  var d = key[3];

  for (i = 0; i < times; i++) {
    sum += delta;
    y += (z << 4) + a ^ z + sum ^ (z >>> 5) + b;
    z += (y << 4) + c ^ y + sum ^ (y >>> 5) + d; // 每次把y,z转成无符号类型

    y = y >>> 0;
    z = z >>> 0;
  }

  tempInt[0] = y;
  tempInt[1] = z; // System.out.printf("%d %d", y, z);

  return typeUtils.intToByte(tempInt, 0);
}
/**
 * 解密8个字节数据，也就是两个int类型数据
 * @param encryptContent
 * @param offset 字节数据下标
 * @param key
 * @param times 加密轮数
 * @return
 */


function decrypt(encryptContent, offset, key, times) {
  var tempInt = typeUtils.byteToInt(encryptContent, offset);
  var y = tempInt[0];
  var z = tempInt[1];
  var sum = 0;
  var i;
  var delta = 0x9e3779b9; // 这是算法标准给的值

  var a = key[0];
  var b = key[1];
  var c = key[2];
  var d = key[3];

  if (times === 32) {
    sum = 0xC6EF3720;
  } else if (times === 16) {
    sum = 0xE3779B90;
  } else {
    sum = delta * times;
  }

  for (i = 0; i < times; i++) {
    z -= (y << 4) + c ^ y + sum ^ (y >>> 5) + d;
    y -= (z << 4) + a ^ z + sum ^ (z >>> 5) + b;
    sum -= delta;
  }

  tempInt[0] = y;
  tempInt[1] = z;
  return typeUtils.intToByte(tempInt, 0);
} // 通过TEA算法加密信息 参数类型：stirng


function encryptBase64(info) {
  var temp = typeUtils.toUTF8Array(info);
  var n = 8 - temp.length % 8; // 若temp的位数不足8的倍数,需要填充的位数

  var encryptStr = new Array(temp.length + n);

  for (var i = 0; i < encryptStr.length; i++) {
    if (i >= temp.length) {
      encryptStr[i] = n;
    } else {
      encryptStr[i] = temp[i];
    }
  }

  var result = new Array(encryptStr.length);

  for (var offset = 0; offset < result.length; offset += 8) {
    var tempEncrpt = encrypt(encryptStr, offset, key, tea_round);

    for (var o = offset, _i2 = 0; o < offset + 8; o++, _i2++) {
      result[o] = tempEncrpt[_i2];
    }
  }

  return base64$1.fromByteArray(result);
} // 通过TEA算法加密信息 参数类型：JSONOBJECT


function decryptBase64(secretInfoBase) {
  var secretInfo = base64$1.toByteArray(secretInfoBase);
  var decryptStr = null;
  var tempDecrypt = new Array(secretInfo.length);

  if (secretInfo.length % 8 !== 0) {
    throw new Error('Abnormal encryption format!');
  }

  for (var offset = 0; offset < secretInfo.length; offset += 8) {
    decryptStr = decrypt(secretInfo, offset, key, tea_round);

    for (var o = offset, i = 0; o < offset + 8; o++, i++) {
      tempDecrypt[o] = decryptStr[i];
    } // System.arraycopy(decryptStr, 0, tempDecrypt, offset, 8);

  } // n为填充的数组元素数量


  var n = tempDecrypt[secretInfo.length - 1];

  if (!(n > 0 && n <= 8) || paddingCheck(tempDecrypt, n)) {
    throw new Error('Abnormal encryption format!');
  }

  var tempDecryptResult = new Array(secretInfo.length - n);

  for (var _i4 = 0; _i4 < tempDecrypt.length - n; _i4++) {
    tempDecryptResult[_i4] = tempDecrypt[_i4];
  } // return byteToString(tempDecryptResult);
  // return String.fromCharCode.apply(null,tempDecryptResult);


  return typeUtils.fromUTF8Array(tempDecryptResult);
}

function paddingCheck(tempDecrypt, n) {
  var k = n;

  while (n > 0) {
    if (tempDecrypt[tempDecrypt.length - n] !== k) {
      return true;
    }

    n--;
  }

  return false;
}

function outerEncrypt(content, key) {
  var _ref = window.ENCRYPT_KEY || {},
      _ref$appVersion = _ref.appVersion,
      appVersion = _ref$appVersion === void 0 ? '' : _ref$appVersion,
      _ref$signVersion = _ref.signVersion,
      signVersion = _ref$signVersion === void 0 ? '' : _ref$signVersion,
      _ref$h5sId = _ref.h5sId,
      h5sId = _ref$h5sId === void 0 ? '' : _ref$h5sId;

  var timestamp = Math.floor(new Date().getTime() / 1000);
  var obj = {
    appVersion: appVersion,
    content: content,
    sign: sign(h5sId, timestamp, appVersion, signVersion, content, new Map()),
    signVersion: signVersion,
    timestamp: timestamp
  };
  new TeaEncryption(h5sId, key);
  return encryptBase64(JSON.stringify(obj));
}
function outerDecrypt(eninfo) {
  var arr = ['200100', '100100', '300100', '400100'];
  var str = eninfo;
  arr.some(function (key) {
    try {
      str = JSON.parse(decryptBase64(eninfo)).content;
      return true;
    } catch (e) {
      console.log('解密发现异常', e);
    }
  });
  return str;
}
function signature(timestamp, payload, headerMap) {
  var _ref2 = window.ENCRYPT_KEY || {},
      _ref2$appVersion = _ref2.appVersion,
      appVersion = _ref2$appVersion === void 0 ? '' : _ref2$appVersion,
      _ref2$signVersion = _ref2.signVersion,
      signVersion = _ref2$signVersion === void 0 ? '' : _ref2$signVersion,
      _ref2$h5sId = _ref2.h5sId,
      h5sId = _ref2$h5sId === void 0 ? '' : _ref2$h5sId;

  return sign(h5sId, timestamp, appVersion, signVersion, payload, headerMap);
}
var index = {
  encrypt: outerEncrypt,
  decrypt: outerDecrypt,
  sign: signature
};

exports.default = index;
exports.outerDecrypt = outerDecrypt;
exports.outerEncrypt = outerEncrypt;
exports.signature = signature;
