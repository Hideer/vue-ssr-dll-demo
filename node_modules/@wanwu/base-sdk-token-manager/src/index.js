import { fn, ua } from '@wanwu/base-fn';
import { isApiDev } from '@wanwu/env-utils';
const envKey = isApiDev() ? 'dev' : '';

const CookieTokenKey = ua.isWechatMiniProgram() ? '__user_token_mini_program__' : `__user_token_RHu&Zr_${envKey}_`;
const oldTokenKey = '__user_token_1__';
const domain = '.' + (checkip(location.hostname) ? location.hostname : location.hostname.split('.').slice(-2).join('.'));
const expires = 7;
const path = '/';
/**
 *  保存token
 * @param {string} token Wwdz ****
 */
export function saveToken(token) {
    // 兼容token存取错误，后面需要删除
    fn.removeCookie(CookieTokenKey, {
        path,
    });
    fn.setCookie(CookieTokenKey, token, {
        path,
        domain,
        expires,
    });
    fn.setCookie(oldTokenKey, token, {
        path,
        expires,
    });
    localStorage.setItem(CookieTokenKey, token);
}
/**
 * 删除token
 */
export function removeToken() {
    localStorage.removeItem(CookieTokenKey);
    fn.removeCookie(CookieTokenKey, {
        path,
        domain,
    });
    fn.removeCookie(oldTokenKey, {
        path,
        domain,
    });
    fn.removeCookie(oldTokenKey, {
        path,
    });
}
/**
 * 获取token
 * @param {boolean} getTokenOnUrl 是否从url上获取token（默认只有app环境需要，目前只有九宫配置了固定从URL上获取token）
 */
export function getToken(getTokenOnUrl) {
    // 获取用户token值
    let token;
    const tokenCache = fn.getCookie(CookieTokenKey) || fn.getCookie(oldTokenKey) || localStorage.getItem(CookieTokenKey);
    if (ua.isApp() || ua.isWechatMiniProgram() || getTokenOnUrl) {
        token = fn.getQueryString('token') || tokenCache;
        if (token && token.indexOf('Wwdz (null)') !== -1) {
            token = '';
        }
    } else {
        token = tokenCache;
    }
    return token;
}

function checkip(host) {
    const pattern = /^(\d+\.){3}\d+$/;
    const flagIp = pattern.test(host);
    if (!flagIp) {
        return false;
    }
    return true;
}
