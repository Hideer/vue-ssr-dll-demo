'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es.array.concat');
require('core-js/modules/es.date.to-string');
require('core-js/modules/es.object.assign');
require('core-js/modules/es.object.to-string');
require('core-js/modules/es.regexp.to-string');
require('regenerator-runtime/runtime');
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/esm/asyncToGenerator'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/esm/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/esm/createClass'));
var index = require('@wanwu/base-fn/lib/fn/index');
var RC = _interopDefault(require('@wanwu/resource-center'));
require('core-js/modules/es.array.index-of');
require('core-js/modules/es.parse-int');
require('core-js/modules/es.regexp.exec');
require('core-js/modules/es.string.match');
require('core-js/modules/es.array.join');
require('core-js/modules/es.array.map');
require('core-js/modules/es.array.slice');
require('core-js/modules/es.object.keys');
require('core-js/modules/es.array.for-each');
require('core-js/modules/web.timers');
var baseFn = require('@wanwu/base-fn');

/**
 * 获取 ios 大版本号
 */
function getIOSVersion() {
  var verion = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
  return parseInt(verion[1], 10);
}
/**
 * 获取 browser 信息
 */

function getBrowser() {
  var ua = window.navigator.userAgent || '';
  var isAndroid = /android/i.test(ua);
  var isIos = /iphone|ipad|ipod/i.test(ua);
  var isWechat = /micromessenger\/([\d.]+)/i.test(ua);
  var isWeibo = /(weibo).*weibo__([\d.]+)/i.test(ua);
  var isQQ = /qq\/([\d.]+)/i.test(ua);
  var isQQBrowser = /(qqbrowser)\/([\d.]+)/i.test(ua);
  var isQzone = /qzone\/.*_qz_([\d.]+)/i.test(ua); // 安卓 chrome 浏览器，很多 app 都是在 chrome 的 ua 上进行扩展的

  var isOriginalChrome = /chrome\/[\d.]+ Mobile Safari\/[\d.]+/i.test(ua) && isAndroid; // chrome for ios 和 safari 的区别仅仅是将 Version/<VersionNum> 替换成了 CriOS/<ChromeRevision>
  // ios 上很多 app 都包含 safari 标识，但它们都是以自己的 app 标识开头，而不是 Mozilla

  var isSafari = /safari\/([\d.]+)$/i.test(ua) && isIos && ua.indexOf('Crios') < 0 && ua.indexOf('Mozilla') === 0;
  var isHuaWei = /huawei|honor/i.test(ua);
  var isViVO = /vivo/i.test(ua);
  var isXiaomi = /mix\s|mi\s|redmi/i.test(ua); // oppo的型号PXXMXX：如 PBDM00——R17 Pro, PACM00——R15, PBCM10——R15x

  var isOPPO = /oppo|P\w{2}M\d{2}/i.test(ua);
  return {
    isAndroid: isAndroid,
    isIos: isIos,
    isWechat: isWechat,
    isWeibo: isWeibo,
    isQQ: isQQ,
    isQQBrowser: isQQBrowser,
    isQzone: isQzone,
    isOriginalChrome: isOriginalChrome,
    isSafari: isSafari,
    isHuaWei: isHuaWei,
    isOPPO: isOPPO,
    isXiaomi: isXiaomi,
    isViVO: isViVO
  };
}

/**
 * 搭建基本的 url scheme
 * @param {object} config - 参数项
 * @param {object} options - callapp-lib 基础配置
 * @returns {string} url scheme
 * @memberof CallApp
 */

function buildScheme(config, options) {
  var path = config.path,
      param = config.param;
  var customBuildScheme = options.buildScheme;

  if (typeof customBuildScheme !== 'undefined') {
    return customBuildScheme(config, options);
  } // callapp-lib 2.0.0 版本移除 protocol 属性，添加 scheme 属性，详细用法见 README.md


  var _options$scheme = options.scheme,
      host = _options$scheme.host,
      port = _options$scheme.port,
      protocol = _options$scheme.protocol;
  var portPart = port ? ":".concat(port) : '';
  var hostPort = host ? "".concat(host).concat(portPart, "/") : '';
  var query = typeof param !== 'undefined' ? Object.keys(param).map(function (key) {
    return "".concat(key, "=").concat(param[key]);
  }).join('&') : '';
  var urlQuery = query ? "?".concat(query) : '';
  return "".concat(protocol, "://").concat(hostPort).concat(path).concat(urlQuery);
}
/**
 * 生成业务需要的 url scheme（区分是否是外链）
 * @param {object} config - 参数项
 * @param {object} options - callapp-lib 基础配置
 * @returns {string} url scheme
 * @memberof CallApp
 */

function generateScheme(config, options) {
  var outChain = options.outChain;
  var uri = buildScheme(config, options);

  if (typeof outChain !== 'undefined' && outChain) {
    var protocol = outChain.protocol,
        path = outChain.path,
        key = outChain.key;
    uri = "".concat(protocol, "://").concat(path, "?").concat(key, "=").concat(encodeURIComponent(uri));
  }

  return uri;
}
/**
 * 生成 android intent
 * @param {object} config - 唤端参数项
 * @param {object} options - callapp-lib 基础配置
 * @returns {string} intent
 * @memberof CallApp
 */

function generateIntent(config, options) {
  var outChain = options.outChain;
  var intent = options.intent,
      fallback = options.fallback;
  var intentParam = Object.keys(intent).map(function (key) {
    return "".concat(key, "=").concat(intent[key], ";");
  }).join('');
  var intentTail = "#Intent;".concat(intentParam, "S.browser_fallback_url=").concat(encodeURIComponent(fallback), ";end;");
  var urlPath = buildScheme(config, options);

  if (typeof outChain !== 'undefined' && outChain) {
    var _options$outChain = options.outChain,
        path = _options$outChain.path,
        key = _options$outChain.key;
    return "intent://".concat(path, "?").concat(key, "=").concat(encodeURIComponent(urlPath)).concat(intentTail);
  }

  urlPath = urlPath.slice(urlPath.indexOf('//') + 2);
  return "intent://".concat(urlPath).concat(intentTail);
}
/**
 * 生成 universalLink
 * @param {object} config - 唤端参数项
 * @param {object} options - callapp-lib 基础配置
 * @returns {string} universalLink
 * @memberof CallApp
 */

function generateUniversalLink(config, options) {
  var universal = options.universal;
  if (!universal) return '';
  var host = universal.host,
      pathKey = universal.pathKey;
  var path = config.path,
      param = config.param;
  var query = typeof param !== 'undefined' ? Object.keys(param).map(function (key) {
    return "".concat(key, "=").concat(param[key]);
  }).join('&') : '';
  var urlQuery = query ? "&".concat(query) : '';
  return "https://".concat(host, "?").concat(pathKey, "=").concat(path).concat(urlQuery);
}
/**
 * 去安卓各自的应用市场
 */

function generateAndroidSelfStore() {
  var browser = getBrowser();
  var pkgName = 'com.zdwh.wwdz'; // 小米

  if (browser.isXiaomi) {
    return "mimarket://details?id=".concat(pkgName);
  } // vivo


  if (browser.isViVO) {
    return "vivomarket://details?id=".concat(pkgName);
  } // 华为


  if (browser.isHuaWei) {
    return "market://details?id=".concat(pkgName);
  }

  if (browser.isOPPO) {
    return "oppomarket://details?packagename=".concat(pkgName);
  }

  return '';
}
/**
 * 生成 应用宝链接
 * @param {object} config - 唤端参数项
 * @param {object} options - callapp-lib 基础配置
 * @returns {string} 应用宝链接
 * @memberof CallApp
 */

function generateYingYongBao(config, options) {
  if (config) {
    var url = generateScheme(config, options);
    return "".concat(options.yingyongbao, "&android_schema=").concat(encodeURIComponent(url));
  } // 支持 AppLink


  return options.yingyongbao;
}

var iframe = null;
/**
 * 获取页面隐藏属性的前缀
 * 如果页面支持 hidden 属性，返回 '' 就行
 * 如果不支持，各个浏览器对 hidden 属性，有自己的实现，不同浏览器不同前缀，遍历看支持哪个
 */

function getPagePropertyPrefix() {
  var prefixes = ['webkit', 'moz', 'ms', 'o'];
  var correctPrefix;
  if ('hidden' in document) return '';
  prefixes.forEach(function (prefix) {
    if ("".concat(prefix, "Hidden") in document) {
      correctPrefix = prefix;
    }
  });
  return correctPrefix || false;
}
/**
 * 判断页面是否隐藏（进入后台）
 */


function isPageHidden() {
  var prefix = getPagePropertyPrefix();
  if (prefix === false) return false;
  var hiddenProperty = prefix ? "".concat(prefix, "Hidden") : 'hidden';
  return document[hiddenProperty];
}
/**
 * 获取判断页面 显示|隐藏 状态改变的属性
 */


function getVisibilityChangeProperty() {
  var prefix = getPagePropertyPrefix();
  if (prefix === false) return false;
  return "".concat(prefix, "visibilitychange");
}
/**
 * 通过 top.location.href 跳转
 * 使用 top 是因为在 qq 中打开的页面不属于顶级页面(iframe级别)
 * 自身 url 变更无法触动唤端操作
 * @param {string}} [uri] - 需要打开的地址
 */


function evokeByLocation(uri) {
  if (!uri) {
    return;
  }

  window.top.location.href = uri;
}
/**
 * 通过 iframe 唤起
 * @param {string}} [uri] - 需要打开的地址
 */

function evokeByIFrame(uri) {
  if (!iframe) {
    iframe = document.createElement('iframe');
    iframe.frameborder = '0';
    iframe.style.cssText = 'display:none;border:0;width:0;height:0;';
    document.body.appendChild(iframe);
  }

  iframe.src = uri;
}
/**
 * 通过 A 标签唤起
 * @param {string}} [uri] - 需要打开的地址
 */

function evokeByTagA(uri) {
  var tagA = document.createElement('a');
  tagA.setAttribute('href', uri);
  tagA.setAttribute('ignoreHijack', 'true');
  tagA.style.display = 'none';
  document.body.appendChild(tagA);
  tagA.click();
}
/**
 * 检测是否唤端成功
 * @param {function} cb - 唤端失败回调函数
 */

function checkOpen(cb, timeout) {
  var visibilityChangeProperty = getVisibilityChangeProperty();
  var timer = setTimeout(function () {
    var hidden = isPageHidden();

    if (!hidden) {
      cb();
    }
  }, timeout);

  if (visibilityChangeProperty) {
    document.addEventListener(visibilityChangeProperty, function () {
      clearTimeout(timer);
    });
    return;
  }

  window.addEventListener('pagehide', function () {
    clearTimeout(timer);
  });
}

var CallApp = /*#__PURE__*/function () {
  /**
   *Creates an instance of CallApp.
   * @param {object=} options - 配置项
   * @memberof CallApp
   */
  function CallApp(options) {
    _classCallCheck(this, CallApp);

    // 默认跳转配置
    var wanwuConfig = new baseFn.WANWUConfig();
    var defaultOptions = wanwuConfig.getConfig('callapp', 'defaultOptions') || {
      scheme: {
        protocol: 'zdwh',
        host: 'wwdz'
      },
      appstore: 'https://itunes.apple.com/cn/app/id1457143679',
      yingyongbao: 'https://a.app.qq.com/o/simple.jsp?pkgname=com.zdwh.wwdz',
      fallback: 'https://a.app.qq.com/o/simple.jsp?pkgname=com.zdwh.wwdz',
      timeout: 2000
    };
    this.options = Object.assign(defaultOptions, options);
    this.browser = getBrowser();
    this.getRCConfig();
  } // 获取资源位配置


  _createClass(CallApp, [{
    key: "getRCConfig",
    value: function getRCConfig() {
      var _this = this;

      this.isAndroidBrowser = this.browser.isAndroid && !this.browser.isWechat;
      this.isAndroidWechat = this.browser.isAndroid && this.browser.isWechat;
      return RC.get('149').then(function (res) {
        if (res) {
          _this.abGuideMask = !!res.isGuideMaskShow;
          _this.androidAppLink = res.androidAppLink;
          _this.isGuideMaskShow = _this.isAndroidWechat && _this.abGuideMask;
          _this.middleCallPage = res.middleCallPage;
        }
      });
    }
    /**
     * 注册为方法
     * generateScheme | generateIntent | generateUniversalLink | generateYingYongBao | checkOpen
     */

  }, {
    key: "generateScheme",
    value: function generateScheme$1(config) {
      return generateScheme(config, this.options);
    }
  }, {
    key: "generateIntent",
    value: function generateIntent$1(config) {
      return generateIntent(config, this.options);
    }
  }, {
    key: "generateUniversalLink",
    value: function generateUniversalLink$1(config) {
      return generateUniversalLink(config, this.options);
    }
  }, {
    key: "generateYingYongBao",
    value: function generateYingYongBao$1(config) {
      return generateYingYongBao(config, this.options);
    }
  }, {
    key: "generateAndroidSelfStore",
    value: function generateAndroidSelfStore$1(config) {
      return generateAndroidSelfStore(config, this.options);
    }
  }, {
    key: "checkOpen",
    value: function checkOpen$1(cb) {
      return checkOpen(cb, this.options.timeout);
    }
    /**
     * 跳转安卓|ios对应的AppStore（对外接口）
     */

  }, {
    key: "gotoAppStore",
    value: function gotoAppStore(config) {
      var _this2 = this;

      if (this.browser.isIos) {
        evokeByLocation(this.options.appstore);
      } else {
        var url = this.generateAndroidSelfStore();

        if (url && this.isAndroidBrowser) {
          evokeByLocation(url);
          this.checkOpen(function () {
            _this2.gotoYingYongBao(config);
          });
        } else {
          this.gotoYingYongBao(config);
        }
      }
    } // 去安卓应用宝

  }, {
    key: "gotoYingYongBao",
    value: function gotoYingYongBao(config) {
      var url = this.generateYingYongBao(config);
      evokeByLocation(url);
    }
    /**
     * 直接下载app（对外接口）
     */

  }, {
    key: "directDownloadApp",
    value: function () {
      var _directDownloadApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var url;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getRCConfig();

              case 2:
                url = this.androidAppLink;

                if (url) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                window.location.href = url;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function directDownloadApp() {
        return _directDownloadApp.apply(this, arguments);
      }

      return directDownloadApp;
    }()
    /**
     * 安卓唤起失败的处理：跳转中转页、各自应用市场、应用宝
     * @param {*} config
     */

  }, {
    key: "fallToAndroid",
    value: function () {
      var _fallToAndroid = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
        var url;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getRCConfig();

              case 2:
                // 微信浏览器+非ab引导 —— 直接去应用市场或者应用宝
                if (this.isAndroidWechat && !this.abGuideMask || !this.middleCallPage) {
                  this.gotoAppStore(config);
                } else {
                  // 否则去中转页：非微信浏览器——下载选择按钮，微信浏览器+ab引导——引导层
                  url = index.setQueryString(this.middleCallPage, 'called', true);
                  evokeByLocation(url);
                }

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function fallToAndroid(_x) {
        return _fallToAndroid.apply(this, arguments);
      }

      return fallToAndroid;
    }()
    /**
     * 1. 检测是否唤起失败
     * 2. 唤端失败跳转通用(下载)页
     * @memberof CallApp
     */

  }, {
    key: "fallToFbUrl",
    value: function fallToFbUrl(config) {
      var _this3 = this;

      this.checkOpen(function () {
        if (_this3.browser.isAndroid) {
          _this3.fallToAndroid(config);
        } else {
          _this3.gotoAppStore();
        }
      });
    }
    /**
     * 唤端失败调用自定义回调函数
     * @memberof CallApp
     */

  }, {
    key: "fallToCustomCb",
    value: function fallToCustomCb(callback) {
      this.checkOpen(function () {
        callback();
      });
    }
    /**
     * 预处理config（ios只支持openApp形式）
     * @param {*} config
     */

  }, {
    key: "preHandleConfig",
    value: function preHandleConfig(config) {
      var browser = getBrowser();

      if (browser.isIos) {
        var path = config.path,
            param = config.param;

        if (path !== 'openApp' && path !== 'splash') {
          var _ref = this.options.scheme || {},
              _ref$protocol = _ref.protocol,
              protocol = _ref$protocol === void 0 ? 'zdwh' : _ref$protocol,
              _ref$host = _ref.host,
              host = _ref$host === void 0 ? 'wwdz' : _ref$host; // 修复bug


          var jumpUrl = encodeURIComponent(index.stringifyUrl("".concat(protocol, "://").concat(host, "/").concat(path), param));
          return {
            path: 'openApp',
            param: {
              jumpUrl: jumpUrl
            }
          };
        }
      }

      return config;
    }
    /**
     * 唤起客户端
     * 根据不同 browser 执行不同唤端策略
     * @param {object} config - 唤端参数项
     * @memberof CallApp
     */

  }, {
    key: "open",
    value: function open(_config) {
      // 允许从外部传入格式化config的函数
      var wanwuConfig = new baseFn.WANWUConfig();
      var funPreHandleConfig = Object.prototype.toString.call(wanwuConfig.getConfig('callapp', 'preHandleConfig')) === '[object Function]' ? wanwuConfig.getConfig('callapp', 'preHandleConfig') : this.preHandleConfig;
      var config = funPreHandleConfig(_config);
      var browser = getBrowser();
      var _this$options = this.options,
          universal = _this$options.universal,
          appstore = _this$options.appstore,
          logFunc = _this$options.logFunc,
          intent = _this$options.intent;
      var callback = config.callback;
      var supportUniversal = typeof universal !== 'undefined';
      var schemeURL = this.generateScheme(config);
      var checkOpenFall = null;

      if (typeof logFunc !== 'undefined') {
        logFunc();
      }

      if (browser.isIos) {
        // 近期ios版本qq禁止了scheme和universalLink唤起app，安卓不受影响 - 18年12月23日
        // ios qq浏览器禁止了scheme和universalLink - 2019年5月1日
        if (browser.isWechat || browser.isQQ || browser.isQQBrowser) {
          evokeByLocation(appstore);
        } else if (getIOSVersion() < 9) {
          evokeByIFrame(schemeURL);
          checkOpenFall = this.fallToFbUrl;
        } else if (!supportUniversal) {
          evokeByLocation(schemeURL);
          checkOpenFall = this.fallToFbUrl;
        } else {
          evokeByLocation(this.generateUniversalLink(config));
        } // Android

      } else if (browser.isWechat) {
        this.fallToAndroid(config);
      } else if (browser.isOriginalChrome) {
        if (typeof intent !== 'undefined') {
          evokeByLocation(this.generateIntent(config));
          checkOpenFall = this.fallToFbUrl;
        } else {
          // scheme 在 andriod chrome 25+ 版本上必须手势触发
          evokeByTagA(schemeURL);
          checkOpenFall = this.fallToFbUrl;
        }
      } else {
        evokeByIFrame(schemeURL);
        checkOpenFall = this.fallToFbUrl;
      }

      if (typeof callback !== 'undefined') {
        this.fallToCustomCb(callback);
        return;
      }

      if (!checkOpenFall) return;
      checkOpenFall.call(this, config);
    }
  }]);

  return CallApp;
}();

exports.default = CallApp;
