/**
 * Create by changsheng on 2019-04-12 10:19
 */

const path = require('path');
const fse = require('fs-extra');
const fetch = require('node-fetch');

function getRouterConfig(options) {
    const { pageDir, routerDir, fileName, pathFormat, needNoImport = true } = options;
    const businessList = fse.readdirSync(pageDir);

    let routes = [];
    let routesNoImport = [];
    let routeList = [];

    businessList.forEach((businessName) => {
        const pagesPath = path.resolve(pageDir, businessName);
        const stat = fse.statSync(pagesPath);
        if (!stat.isDirectory()) {
            return;
        }
        const pages = fse.readdirSync(pagesPath).filter((pageName) => {
            return pageName.endsWith('.vue');
        }).map((pageName) => {
            return pageName.replace('.vue', '');
        });

        const pageRoutes = [];
        pages.forEach((pageName) => {
            let camelCaseName = pageName;
            const firstLetter = pageName[0];
            const leftName = pageName.substring(1, pageName.length);

            if (/[A-Z]/.test(firstLetter)) {
                camelCaseName = firstLetter.toLowerCase() + leftName;
            }

            const pagePath = path.relative(routerDir, path.resolve(pageDir, `${businessName}/${pageName}.vue`));
            pageRoutes.push({
                routeStr: `
                {
                    path: '/${businessName}/${camelCaseName}/:timestamp?',
                    name: '${businessName}.${camelCaseName}',
                    component: () =>
                        import(/* webpackChunkName: "${businessName}.${camelCaseName}" */ '${pagePath}'),
                }`,
                pathStr: `
                {
                    path: '/${businessName}/${camelCaseName}/:timestamp?',
                    name: '${businessName}.${camelCaseName}',
                }`,
                route: {
                    path: `/${businessName}/${camelCaseName}`,
                    name: `${businessName}.${camelCaseName}`,
                },
            });
            if (pathFormat) {
                const path = pathFormat(businessName, camelCaseName);
                pageRoutes.push({
                    routeStr: `
                {
                    path: '${path}/:timestamp?',
                    name: '${businessName}.${camelCaseName}',
                    component: () =>
                        import(/* webpackChunkName: "${businessName}.${camelCaseName}" */ '${pagePath}'),
                }`,
                    pathStr: `
                {
                    path: '${path}/:timestamp?',
                    name: '${businessName}.${camelCaseName}',
                }`,
                    route: {
                        path: `${path}`,
                        name: `${businessName}.${camelCaseName}`,
                    },
                });
            }
        });

        pageRoutes.forEach(item => {
            routes.push(item.routeStr);
            routesNoImport.push(item.pathStr);
            routeList.push(item.route);
        });
    });

    const pagePath = path.relative(routerDir, path.resolve(pageDir, `error/NotFound.vue`));

    routes.push(`
        {
            path: '*',
            name: '404',
            component: () =>
                import(/* webpackChunkName: "error.notFound" */ '${pagePath}'),
        }`,
    );

    const distRouterFile = path.resolve(routerDir, fileName);
    const distPathFile = path.resolve(routerDir, 'path-' + fileName);
    fse.writeFileSync(
        distRouterFile,
        `export default [${routes.join(',')}
        ];`,
    );
    needNoImport &&
    fse.writeFileSync(
        distPathFile,
        `export default [${routesNoImport.join(',')}
        ]`,
    );

    const cwd = process.cwd();
    const packageFilePath = path.resolve(cwd, './package.json');
    const packageJson = (() => {
        return fse.readJsonSync(packageFilePath);
    })();
    if(!packageJson || !packageJson.name) return console.log('fail: 路由上报失败, 未找到项目名');
    const projectName = packageJson.name;
    const params = {
        base: projectName,
        routes: routeList,
    };
    if (process.env.NODE_ENV === 'production') {
        fetch('http://static.service.wanwudezhi.work/api/h5manager/saveH5RouteList', {
            body: JSON.stringify(params),
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST',
        }).catch(err => {
            console.log('fail: 路由上报请求失败', err)
        });
    }
}

module.exports = {
    getRouterConfig,
};
