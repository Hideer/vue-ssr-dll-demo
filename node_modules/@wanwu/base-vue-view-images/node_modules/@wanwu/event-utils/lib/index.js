'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('core-js/modules/web.dom.iterable');
require('core-js/modules/es6.object.to-string');
require('core-js/modules/es6.object.keys');
require('core-js/modules/es6.array.for-each');

/**
 * 绑定事件
 * @param {HTMLElement} target
 * @param {string} event
 * @param {EventHanlder} handler
 * @param {boolean} passive
 */
function on(target, event, handler) {
  var passive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  target.addEventListener(event, handler, {
    capture: false,
    passive: passive
  });
}
/**
 * 取消绑定事件
 * @param {HTMLElement} target
 * @param {string} event
 * @param {EventHanlder} handler
 */

function off(target, event, handler) {
  target.removeEventListener(event, handler);
}
/**
 * 阻止事件冒泡
 * @param {Event} event
 */

function stop(event) {
  event.stopPropagation();
}
/**
 * 去下事件默认行为
 * @param {Event} event
 */

function prevent(event) {
  event.preventDefault();
}
/**
 * vue实例批量绑定事件
 * @param {Vue instance} vm
 * @param {Events Object} events
 */

function vmBindEvents(vm, events) {
  if (events instanceof Object) {
    Object.keys(events).forEach(function (key) {
      var eventFn = events[key];
      vm.$on(key, eventFn);
    });
  }
}
/**
 * vue实例批量解绑事件
 * @param {Vue instance} vm
 * @param {Events Object} events
 */

function vmUnbindEvents(vm, events) {
  if (events instanceof Object) {
    Object.keys(events).forEach(function (key) {
      var eventFn = events[key];
      vm.$off(key, eventFn);
    });
  }
}

exports.off = off;
exports.on = on;
exports.prevent = prevent;
exports.stop = stop;
exports.vmBindEvents = vmBindEvents;
exports.vmUnbindEvents = vmUnbindEvents;
