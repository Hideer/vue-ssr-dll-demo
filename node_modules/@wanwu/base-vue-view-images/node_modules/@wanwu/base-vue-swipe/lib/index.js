'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/es6.function.name');
require('core-js/modules/es6.array.for-each');
var _defineProperty = _interopDefault(require('@babel/runtime-corejs2/helpers/esm/defineProperty'));
require('core-js/modules/es6.number.constructor');
var mixinTouch = _interopDefault(require('@wanwu/base-vue-mixin-touch'));
var vueRuntimeHelpers = require('@wanwu/vue-runtime-helpers');
require('core-js/modules/es6.array.index-of');

var script = {
  name: 'Swipe',
  components: {},
  mixins: [mixinTouch],
  props: {
    width: {
      type: Number,
      "default": 0
    },
    height: {
      type: Number,
      "default": 0
    },
    autoplay: {
      type: Number,
      "default": 0
    },
    vertical: Boolean,
    initialSwipe: {
      type: Number,
      "default": 0
    },
    indicatorColor: String,
    loop: {
      type: Boolean,
      "default": true
    },
    touchable: {
      type: Boolean,
      "default": true
    },
    showIndicators: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number,
      "default": 500
    },
    // trank整体的偏移量
    offsetNum: {
      type: Number,
      "default": 0
    }
  },
  data: function data() {
    return {
      computedWidth: 0,
      computedHeight: 0,
      offset: 0,
      active: 0,
      deltaX: 0,
      deltaY: 0,
      swipes: [],
      swiping: false
    };
  },
  computed: {
    count: function count() {
      return this.swipes.length;
    },
    delta: function delta() {
      return this.vertical ? this.deltaY : this.deltaX;
    },
    size: function size() {
      return this[this.vertical ? 'computedHeight' : 'computedWidth'];
    },
    trackSize: function trackSize() {
      return this.count * this.size;
    },
    activeIndicator: function activeIndicator() {
      return (this.active + this.count) % this.count;
    },
    isCorrectDirection: function isCorrectDirection() {
      var expect = this.vertical ? 'vertical' : 'horizontal';
      return this.direction === expect;
    },
    trackStyle: function trackStyle() {
      var _ref;

      var mainAxis = this.vertical ? 'height' : 'width';
      var crossAxis = this.vertical ? 'width' : 'height';
      return _ref = {}, _defineProperty(_ref, mainAxis, "".concat(this.trackSize, "px")), _defineProperty(_ref, crossAxis, this[crossAxis] ? "".concat(this[crossAxis], "px") : ''), _defineProperty(_ref, "transitionDuration", "".concat(this.swiping ? 0 : this.duration, "ms")), _defineProperty(_ref, "transform", "translate".concat(this.vertical ? 'Y' : 'X', "(").concat(this.offset + this.offsetNum, "px)")), _ref;
    },
    indicatorStyle: function indicatorStyle() {
      return {
        backgroundColor: this.indicatorColor
      };
    }
  },
  watch: {
    swipes: function swipes() {
      this.initialize();
    },
    initialSwipe: function initialSwipe() {
      this.initialize();
    },
    autoplay: function autoplay(_autoplay) {
      if (!_autoplay) {
        this.clear();
      } else {
        this.autoPlay();
      }
    }
  },
  mounted: function mounted() {
    this.initialize(); // if (!this.$isServer) {
    //     on(window, 'resize', this.onResize, true);
    // }
  },
  activated: function activated() {
    // if (this.rendered) {
    //     this.initialize(this.active);
    // }
    // this.rendered = true;
    this.autoPlay();
  },
  deactivated: function deactivated() {
    this.clear();
  },
  destroyed: function destroyed() {
    this.clear(); // if (!this.$isServer) {
    //     off(window, 'resize', this.onResize, true);
    // }
  },
  methods: {
    // initialize swipe position
    initialize: function initialize() {
      var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.initialSwipe;
      clearTimeout(this.timer);

      if (this.$el) {
        var rect = this.$el.getBoundingClientRect();
        this.computedWidth = this.width || rect.width;
        this.computedHeight = this.height || rect.height;
      }

      this.swiping = true;
      this.active = active;
      this.offset = this.count > 1 ? -this.size * this.active : 0;
      this.swipes.forEach(function (swipe) {
        swipe.offset = 0;
      });
      this.autoPlay();

      if (this.offsetNum && this.count > 2 && this.loop && this.swipes[this.count - 1]) {
        this.swipes[this.count - 1].offset = -this.trackSize;
      } // this.move({
      //     pace: 1,
      //     offset: 0,
      // });

    },
    // onResize() {
    //     setTimeout(() => {
    //         this.initialize(this.activeIndicator);
    //     }, 200);
    // },
    onTouchStart: function onTouchStart(event) {
      if (!this.touchable) return;
      this.clear();
      this.swiping = true;
      this.touchStart(event);
      this.correctPosition();
    },
    onTouchMove: function onTouchMove(event) {
      if (!this.touchable || !this.swiping) return;
      this.touchMove(event);

      if (this.isCorrectDirection) {
        event.preventDefault();
        event.stopPropagation();
        this.move({
          offset: Math.min(Math.max(this.delta, -this.size), this.size)
        });
      }
    },
    onTouchEnd: function onTouchEnd() {
      if (!this.touchable || !this.swiping) return;

      if (this.delta && this.isCorrectDirection) {
        var offset = this.vertical ? this.offsetY : this.offsetX;
        this.move({
          pace: offset > 0 ? this.delta > 0 ? -1 : 1 : 0,
          emitChange: true
        });
      }

      this.swiping = false;
      this.autoPlay();
    },
    move: function move(_ref2) {
      var _ref2$pace = _ref2.pace,
          pace = _ref2$pace === void 0 ? 0 : _ref2$pace,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === void 0 ? 0 : _ref2$offset,
          emitChange = _ref2.emitChange;
      var delta = this.delta,
          active = this.active,
          count = this.count,
          swipes = this.swipes,
          trackSize = this.trackSize,
          offsetNum = this.offsetNum;
      var atFirst = offsetNum && count > 2 && this.loop ? active <= 1 : active === 0;
      var atSecond = active <= 0;
      var atLast = offsetNum && count > 2 && this.loop ? active >= count - 2 : active === count - 1;
      var atLastSecond = active >= count - 1;
      var outOfBounds = !this.loop && (atFirst && (offset > 0 || pace < 0) || atLast && (offset < 0 || pace > 0));

      if (outOfBounds || count <= 1) {
        return;
      }

      if (swipes[0]) {
        swipes[0].offset = atLast && (delta < 0 || pace > 0) ? trackSize : 0;
      }

      if (offsetNum && count > 2 && swipes[1] && this.loop) {
        swipes[1].offset = atLastSecond && (delta < 0 || pace > 0) ? trackSize : 0;
      }

      if (swipes[count - 1]) {
        swipes[count - 1].offset = atFirst && (delta > 0 || pace < 0) ? -trackSize : 0;
      }

      if (offsetNum && count > 2 && swipes[count - 2] && this.loop) {
        swipes[count - 2].offset = atSecond && (delta > 0 || pace < 0) ? -trackSize : 0;
      }

      if (pace && active + pace >= -1 && active + pace <= count) {
        this.active += pace;

        if (emitChange) {
          this.$emit('change', this.activeIndicator);
        }
      }

      this.offset = Math.round(offset - this.active * this.size);
    },
    swipeTo: function swipeTo(index) {
      var _this = this;

      var emitChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.swiping = true;
      this.resetTouchStatus();
      this.correctPosition();
      setTimeout(function () {
        _this.swiping = false;

        _this.move({
          pace: index % _this.count - _this.active,
          emitChange: emitChange
        });
      }, 30);
    },
    correctPosition: function correctPosition() {
      if (this.active <= -1) {
        this.move({
          pace: this.count
        });
      }

      if (this.active >= this.count) {
        this.move({
          pace: -this.count
        });
      }
    },
    clear: function clear() {
      clearTimeout(this.timer);
    },
    autoPlay: function autoPlay() {
      var _this2 = this;

      var autoplay = this.autoplay;

      if (autoplay && this.count > 1) {
        this.clear();
        this.timer = setTimeout(function () {
          _this2.swiping = true;

          _this2.resetTouchStatus();

          _this2.correctPosition();

          setTimeout(function () {
            _this2.swiping = false;

            _this2.move({
              pace: 1,
              emitChange: true
            });

            _this2.autoPlay();
          }, 30);
        }, autoplay);
      }
    }
  }
};

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "component__swipe swipe"
  }, [_c('div', {
    ref: "track",
    staticClass: "swipe__track",
    style: _vm.trackStyle,
    on: {
      "touchstart": _vm.onTouchStart,
      "touchmove": _vm.onTouchMove,
      "touchend": _vm.onTouchEnd,
      "touchcancel": _vm.onTouchEnd
    }
  }, [_vm._t("default")], 2), _vm._v(" "), _vm._t("indicator", [_vm.showIndicators ? _c('div', {
    "class": {
      swipe__indicators: true,
      'swipe__indicators--vertical': _vm.vertical
    }
  }, _vm._l(Array(_vm.count), function (item, index) {
    return _c('i', {
      key: index,
      "class": {
        'swipe__indicator--active': index === _vm.activeIndicator,
        swipe__indicator: true
      },
      style: index === _vm.activeIndicator ? _vm.indicatorStyle : null
    });
  }), 0) : _vm._e()])], 2);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-814b38b6_0", {
    source: ".component__swipe[data-v-814b38b6]{overflow:hidden;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.component__swipe .swipe__track[data-v-814b38b6]{height:100%}.component__swipe .swipe__indicator[data-v-814b38b6]{opacity:.3;border-radius:50%;width:.1rem;height:.1rem;transition:opacity .2s;background-color:#d8d8d8}.component__swipe .swipe__indicator[data-v-814b38b6]:not(:last-child){margin-right:.1rem}.component__swipe .swipe__indicator--active[data-v-814b38b6]{opacity:1;background-color:#ea313e}.component__swipe .swipe__indicators[data-v-814b38b6]{display:flex;position:absolute;left:50%;bottom:.1rem;transform:translateX(-50%)}.component__swipe .swipe__indicators--vertical[data-v-814b38b6]{left:.1rem;top:50%;bottom:auto;flex-direction:column;transform:translateY(-50%)}.component__swipe .swipe__indicators--vertical .swipe__indicator[data-v-814b38b6]:not(:last-child){margin-bottom:.1rem}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-814b38b6";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, vueRuntimeHelpers.createInjector, undefined, undefined);

//
//
//
//
//
//
var script$1 = {
  name: 'SwipeItem',
  components: {},
  props: {},
  data: function data() {
    return {
      offset: 0
    };
  },
  computed: {
    style: function style() {
      var _this$$parent = this.$parent,
          vertical = _this$$parent.vertical,
          computedWidth = _this$$parent.computedWidth,
          computedHeight = _this$$parent.computedHeight;
      return {
        width: computedWidth ? computedWidth + 'px' : '',
        height: vertical ? computedHeight + 'px' : '100%',
        transform: "translate".concat(vertical ? 'Y' : 'X', "(").concat(this.offset, "px)")
      };
    }
  },
  methods: {},
  beforeCreate: function beforeCreate() {
    this.$parent.swipes.push(this);
  },
  destroyed: function destroyed() {
    this.$parent.swipes.splice(this.$parent.swipes.indexOf(this), 1);
  }
};

/* script */
var __vue_script__$1 = script$1;
/* template */

var __vue_render__$1 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', _vm._g({
    staticClass: "component__swipeItem swipeItem",
    style: _vm.style
  }, _vm.$listeners), [_vm._t("default")], 2);
};

var __vue_staticRenderFns__$1 = [];
/* style */

var __vue_inject_styles__$1 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-7dc16ea6_0", {
    source: ".component__swipeItem[data-v-7dc16ea6]{float:left;height:100%}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$1 = "data-v-7dc16ea6";
/* module identifier */

var __vue_module_identifier__$1 = undefined;
/* functional template */

var __vue_is_functional_template__$1 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$1 = vueRuntimeHelpers.normalizeComponent({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, vueRuntimeHelpers.createInjector, undefined, undefined);

__vue_component__.install = function (Vue) {
  Vue.component(__vue_component__.name, __vue_component__);
};

__vue_component__$1.install = function (Vue) {
  Vue.component(__vue_component__$1.name, __vue_component__$1);
};
var index = {
  install: function install(Vue) {
    __vue_component__.install(Vue);
    __vue_component__$1.install(Vue);
  },
  Swipe: __vue_component__,
  SwipeItem: __vue_component__$1
};

exports.Swipe = __vue_component__;
exports.SwipeItem = __vue_component__$1;
exports.default = index;
